
ultrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba40  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  0800bbd0  0800bbd0  0000cbd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c02c  0800c02c  0000e1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800c02c  0800c02c  0000d02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c034  0800c034  0000e1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c034  0800c034  0000d034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c038  0800c038  0000d038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800c03c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000780  200001ec  0800c228  0000e1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000096c  0800c228  0000e96c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c654  00000000  00000000  0000e21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000407d  00000000  00000000  0002a870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001940  00000000  00000000  0002e8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001393  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cfde  00000000  00000000  000315c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020da0  00000000  00000000  0005e5a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100cca  00000000  00000000  0007f341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018000b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a94  00000000  00000000  00180050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  00187ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bbb8 	.word	0x0800bbb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800bbb8 	.word	0x0800bbb8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	b08a      	sub	sp, #40	@ 0x28
 8000f3c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  const char *name = "BlueNRG";
 8000f3e:	4b4e      	ldr	r3, [pc, #312]	@ (8001078 <MX_BlueNRG_MS_Init+0x140>)
 8000f40:	617b      	str	r3, [r7, #20]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 8000f42:	f000 f8ad 	bl	80010a0 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000f46:	2000      	movs	r0, #0
 8000f48:	f002 feac 	bl	8003ca4 <BSP_PB_GetState>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	4b4a      	ldr	r3, [pc, #296]	@ (800107c <MX_BlueNRG_MS_Init+0x144>)
 8000f52:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 8000f54:	2100      	movs	r1, #0
 8000f56:	484a      	ldr	r0, [pc, #296]	@ (8001080 <MX_BlueNRG_MS_Init+0x148>)
 8000f58:	f007 fc72 	bl	8008840 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8000f5c:	1dba      	adds	r2, r7, #6
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	4611      	mov	r1, r2
 8000f64:	4618      	mov	r0, r3
 8000f66:	f007 fae0 	bl	800852a <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 8000f6a:	f007 fb22 	bl	80085b2 <hci_reset>
  HAL_Delay(100);
 8000f6e:	2064      	movs	r0, #100	@ 0x64
 8000f70:	f003 f948 	bl	8004204 <HAL_Delay>

  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8000f74:	7a3b      	ldrb	r3, [r7, #8]
 8000f76:	2b30      	cmp	r3, #48	@ 0x30
 8000f78:	d902      	bls.n	8000f80 <MX_BlueNRG_MS_Init+0x48>
    bnrg_expansion_board = IDB05A1;
 8000f7a:	4b42      	ldr	r3, [pc, #264]	@ (8001084 <MX_BlueNRG_MS_Init+0x14c>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	701a      	strb	r2, [r3, #0]
  }

  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 8000f80:	f107 0209 	add.w	r2, r7, #9
 8000f84:	4b40      	ldr	r3, [pc, #256]	@ (8001088 <MX_BlueNRG_MS_Init+0x150>)
 8000f86:	2106      	movs	r1, #6
 8000f88:	2080      	movs	r0, #128	@ 0x80
 8000f8a:	f007 fa48 	bl	800841e <aci_hal_read_config_data>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	613b      	str	r3, [r7, #16]

  if (ret) {
    PRINTF("Read Static Random address failed.\n");
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8000f92:	4b3d      	ldr	r3, [pc, #244]	@ (8001088 <MX_BlueNRG_MS_Init+0x150>)
 8000f94:	795b      	ldrb	r3, [r3, #5]
 8000f96:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000f9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8000f9c:	d001      	beq.n	8000fa2 <MX_BlueNRG_MS_Init+0x6a>
    PRINTF("Static Random address not well formed.\n");
    while(1);
 8000f9e:	bf00      	nop
 8000fa0:	e7fd      	b.n	8000f9e <MX_BlueNRG_MS_Init+0x66>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 8000fa2:	f007 f808 	bl	8007fb6 <aci_gatt_init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	613b      	str	r3, [r7, #16]
  if(ret){
    PRINTF("GATT_Init failed.\n");
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 8000faa:	4b36      	ldr	r3, [pc, #216]	@ (8001084 <MX_BlueNRG_MS_Init+0x14c>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d110      	bne.n	8000fd4 <MX_BlueNRG_MS_Init+0x9c>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000fb2:	f107 020e 	add.w	r2, r7, #14
 8000fb6:	f107 030a 	add.w	r3, r7, #10
 8000fba:	9301      	str	r3, [sp, #4]
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f006 fdc8 	bl	8007b5e <aci_gap_init_IDB05A1>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	e00a      	b.n	8000fea <MX_BlueNRG_MS_Init+0xb2>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000fd4:	f107 030a 	add.w	r3, r7, #10
 8000fd8:	f107 020c 	add.w	r2, r7, #12
 8000fdc:	f107 010e 	add.w	r1, r7, #14
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f006 fe0c 	bl	8007bfe <aci_gap_init_IDB04A1>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	613b      	str	r3, [r7, #16]
  if (ret != BLE_STATUS_SUCCESS) {
    PRINTF("GAP_Init failed.\n");
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000fea:	89fc      	ldrh	r4, [r7, #14]
 8000fec:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 8000fee:	6978      	ldr	r0, [r7, #20]
 8000ff0:	f7ff f93e 	bl	8000270 <strlen>
 8000ff4:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	2200      	movs	r2, #0
 8001000:	4629      	mov	r1, r5
 8001002:	4620      	mov	r0, r4
 8001004:	f007 f94e 	bl	80082a4 <aci_gatt_update_char_value>
 8001008:	4603      	mov	r3, r0
 800100a:	613b      	str	r3, [r7, #16]
  if (ret) {
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_BlueNRG_MS_Init+0xde>
    PRINTF("aci_gatt_update_char_value failed.\n");
    while(1);
 8001012:	bf00      	nop
 8001014:	e7fd      	b.n	8001012 <MX_BlueNRG_MS_Init+0xda>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8001016:	2301      	movs	r3, #1
 8001018:	9303      	str	r3, [sp, #12]
 800101a:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <MX_BlueNRG_MS_Init+0x154>)
 800101c:	9302      	str	r3, [sp, #8]
 800101e:	2300      	movs	r3, #0
 8001020:	9301      	str	r3, [sp, #4]
 8001022:	2310      	movs	r3, #16
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2307      	movs	r3, #7
 8001028:	2200      	movs	r2, #0
 800102a:	2100      	movs	r1, #0
 800102c:	2001      	movs	r0, #1
 800102e:	f006 ff1a 	bl	8007e66 <aci_gap_set_auth_requirement>
 8001032:	4603      	mov	r3, r0
 8001034:	613b      	str	r3, [r7, #16]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_BlueNRG_MS_Init+0x108>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
    while(1);
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <MX_BlueNRG_MS_Init+0x104>
  }

  PRINTF("BLE Stack Initialized\n");

  ret = Add_HWServW2ST_Service();
 8001040:	f001 fa80 	bl	8002544 <Add_HWServW2ST_Service>
 8001044:	4603      	mov	r3, r0
 8001046:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_BlueNRG_MS_Init+0x11a>
    PRINTF("BlueMS HW service added successfully.\n");
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
    while(1);
 800104e:	bf00      	nop
 8001050:	e7fd      	b.n	800104e <MX_BlueNRG_MS_Init+0x116>
  }

  ret = Add_SWServW2ST_Service();
 8001052:	f001 fb49 	bl	80026e8 <Add_SWServW2ST_Service>
 8001056:	4603      	mov	r3, r0
 8001058:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_BlueNRG_MS_Init+0x12c>
     PRINTF("BlueMS SW service added successfully.\n");
  } else {
     PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
     while(1);
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <MX_BlueNRG_MS_Init+0x128>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 8001064:	2104      	movs	r1, #4
 8001066:	2001      	movs	r0, #1
 8001068:	f007 fa2e 	bl	80084c8 <aci_hal_set_tx_power_level>
 800106c:	4603      	mov	r3, r0
 800106e:	613b      	str	r3, [r7, #16]

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8001070:	bf00      	nop
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bdb0      	pop	{r4, r5, r7, pc}
 8001078:	0800bbd0 	.word	0x0800bbd0
 800107c:	20000000 	.word	0x20000000
 8001080:	08002cad 	.word	0x08002cad
 8001084:	20000208 	.word	0x20000208
 8001088:	2000020c 	.word	0x2000020c
 800108c:	0001e240 	.word	0x0001e240

08001090 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 8001094:	f000 f812 	bl	80010bc <User_Process>
  hci_user_evt_proc();
 8001098:	f007 fd4c 	bl	8008b34 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}

080010a0 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80010a4:	2101      	movs	r1, #1
 80010a6:	2000      	movs	r0, #0
 80010a8:	f002 fda8 	bl	8003bfc <BSP_PB_Init>
  BSP_LED_Init(LED2);
 80010ac:	2000      	movs	r0, #0
 80010ae:	f002 fd3d 	bl	8003b2c <BSP_LED_Init>

  BSP_COM_Init(COM1);
 80010b2:	2000      	movs	r0, #0
 80010b4:	f002 fe54 	bl	8003d60 <BSP_COM_Init>
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}

080010bc <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;

  if (set_connectable)
 80010c2:	4b2a      	ldr	r3, [pc, #168]	@ (800116c <User_Process+0xb0>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d004      	beq.n	80010d6 <User_Process+0x1a>
  {
    Set_DeviceConnectable();
 80010cc:	f001 fd7a 	bl	8002bc4 <Set_DeviceConnectable>
    set_connectable = FALSE;
 80010d0:	4b26      	ldr	r3, [pc, #152]	@ (800116c <User_Process+0xb0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
    /* Debouncing */
    HAL_Delay(50);
#endif
    //BSP_LED_Toggle(LED2);

    if (connected)
 80010d6:	4b26      	ldr	r3, [pc, #152]	@ (8001170 <User_Process+0xb4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d042      	beq.n	8001164 <User_Process+0xa8>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 80010de:	f003 f885 	bl	80041ec <HAL_GetTick>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f007 feb5 	bl	8008e54 <srand>

      /* Update emulated Environmental data */
      Set_Random_Environmental_Values(&data_t, &data_p);
 80010ea:	463a      	mov	r2, r7
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	4611      	mov	r1, r2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 f84b 	bl	800118c <Set_Random_Environmental_Values>
      BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 80010f6:	edd7 7a00 	vldr	s15, [r7]
 80010fa:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001174 <User_Process+0xb8>
 80010fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001102:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001106:	edd7 7a01 	vldr	s15, [r7, #4]
 800110a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800110e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001112:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001116:	ee17 3a90 	vmov	r3, s15
 800111a:	b21b      	sxth	r3, r3
 800111c:	4619      	mov	r1, r3
 800111e:	ee16 0a90 	vmov	r0, s13
 8001122:	f001 fd09 	bl	8002b38 <BlueMS_Environmental_Update>

      /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
      Set_Random_Motion_Values(counter);
 8001126:	4b14      	ldr	r3, [pc, #80]	@ (8001178 <User_Process+0xbc>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f8a2 	bl	8001274 <Set_Random_Motion_Values>
      Acc_Update(&x_axes, &g_axes, &m_axes);
 8001130:	4a12      	ldr	r2, [pc, #72]	@ (800117c <User_Process+0xc0>)
 8001132:	4913      	ldr	r1, [pc, #76]	@ (8001180 <User_Process+0xc4>)
 8001134:	4813      	ldr	r0, [pc, #76]	@ (8001184 <User_Process+0xc8>)
 8001136:	f001 fb67 	bl	8002808 <Acc_Update>
      Quat_Update(&q_axes);
 800113a:	4813      	ldr	r0, [pc, #76]	@ (8001188 <User_Process+0xcc>)
 800113c:	f001 fbee 	bl	800291c <Quat_Update>

      counter ++;
 8001140:	4b0d      	ldr	r3, [pc, #52]	@ (8001178 <User_Process+0xbc>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	3301      	adds	r3, #1
 8001146:	4a0c      	ldr	r2, [pc, #48]	@ (8001178 <User_Process+0xbc>)
 8001148:	6013      	str	r3, [r2, #0]
      if (counter == 40) {
 800114a:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <User_Process+0xbc>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b28      	cmp	r3, #40	@ 0x28
 8001150:	d104      	bne.n	800115c <User_Process+0xa0>
        counter = 0;
 8001152:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <User_Process+0xbc>)
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
        Reset_Motion_Values();
 8001158:	f001 f8fa 	bl	8002350 <Reset_Motion_Values>
      }
#if !USE_BUTTON
      HAL_Delay(1000); /* wait 1 sec before sending new data */
 800115c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001160:	f003 f850 	bl	8004204 <HAL_Delay>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000001 	.word	0x20000001
 8001170:	20000248 	.word	0x20000248
 8001174:	42c80000 	.word	0x42c80000
 8001178:	20000214 	.word	0x20000214
 800117c:	20000264 	.word	0x20000264
 8001180:	20000258 	.word	0x20000258
 8001184:	2000024c 	.word	0x2000024c
 8001188:	20000270 	.word	0x20000270

0800118c <Set_Random_Environmental_Values>:
 * @param  float pointer to temperature data
 * @param  float pointer to pressure data
 * @retval None
 */
static void Set_Random_Environmental_Values(float *data_t, float *data_p)
{
 800118c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	6039      	str	r1, [r7, #0]
  //*data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
	if(distance > 100)
 8001198:	4b32      	ldr	r3, [pc, #200]	@ (8001264 <Set_Random_Environmental_Values+0xd8>)
 800119a:	edd3 7a00 	vldr	s15, [r3]
 800119e:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001268 <Set_Random_Environmental_Values+0xdc>
 80011a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011aa:	dd0c      	ble.n	80011c6 <Set_Random_Environmental_Values+0x3a>
		  {
			  //enterin sleepmode and turnin on LED
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	2120      	movs	r1, #32
 80011b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b4:	f003 fc70 	bl	8004a98 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011be:	482b      	ldr	r0, [pc, #172]	@ (800126c <Set_Random_Environmental_Values+0xe0>)
 80011c0:	f003 fc6a 	bl	8004a98 <HAL_GPIO_WritePin>
 80011c4:	e00c      	b.n	80011e0 <Set_Random_Environmental_Values+0x54>
		  else
		  {

			  // Resume Tick increment
			 // HAL_ResumeTick();
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2120      	movs	r1, #32
 80011ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ce:	f003 fc63 	bl	8004a98 <HAL_GPIO_WritePin>
			  BSP_LED_Toggle(LED2);
 80011d2:	2000      	movs	r0, #0
 80011d4:	f002 fcbc 	bl	8003b50 <BSP_LED_Toggle>
			  *data_t = distance;
 80011d8:	4b22      	ldr	r3, [pc, #136]	@ (8001264 <Set_Random_Environmental_Values+0xd8>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	601a      	str	r2, [r3, #0]

		  }
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 80011e0:	f007 fe66 	bl	8008eb0 <rand>
 80011e4:	4603      	mov	r3, r0
 80011e6:	17da      	asrs	r2, r3, #31
 80011e8:	4698      	mov	r8, r3
 80011ea:	4691      	mov	r9, r2
 80011ec:	4642      	mov	r2, r8
 80011ee:	464b      	mov	r3, r9
 80011f0:	f04f 0000 	mov.w	r0, #0
 80011f4:	f04f 0100 	mov.w	r1, #0
 80011f8:	0099      	lsls	r1, r3, #2
 80011fa:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80011fe:	0090      	lsls	r0, r2, #2
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	eb12 0408 	adds.w	r4, r2, r8
 8001208:	eb43 0509 	adc.w	r5, r3, r9
 800120c:	f04f 0200 	mov.w	r2, #0
 8001210:	f04f 0300 	mov.w	r3, #0
 8001214:	012b      	lsls	r3, r5, #4
 8001216:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800121a:	0122      	lsls	r2, r4, #4
 800121c:	4614      	mov	r4, r2
 800121e:	461d      	mov	r5, r3
 8001220:	4620      	mov	r0, r4
 8001222:	4629      	mov	r1, r5
 8001224:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001228:	f04f 0300 	mov.w	r3, #0
 800122c:	f7ff fd0c 	bl	8000c48 <__aeabi_uldivmod>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	f7ff f9a8 	bl	800058c <__aeabi_ul2d>
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	4b0b      	ldr	r3, [pc, #44]	@ (8001270 <Set_Random_Environmental_Values+0xe4>)
 8001242:	f7ff f823 	bl	800028c <__adddf3>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f7ff fcab 	bl	8000ba8 <__aeabi_d2f>
 8001252:	4602      	mov	r2, r0
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	601a      	str	r2, [r3, #0]
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001262:	bf00      	nop
 8001264:	200003d0 	.word	0x200003d0
 8001268:	42c80000 	.word	0x42c80000
 800126c:	48000400 	.word	0x48000400
 8001270:	408f4000 	.word	0x408f4000

08001274 <Set_Random_Motion_Values>:
 * @brief  Set random values for all motion sensor data
 * @param  uint32_t counter for changing the rotation direction
 * @retval None
 */
static void Set_Random_Motion_Values(uint32_t cnt)
{
 8001274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001278:	f5ad 7d7a 	sub.w	sp, sp, #1000	@ 0x3e8
 800127c:	af00      	add	r7, sp, #0
 800127e:	f8c7 03e4 	str.w	r0, [r7, #996]	@ 0x3e4
  /* Update Acceleration, Gyroscope and Sensor Fusion data */
  if (cnt < 20) {
 8001282:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001286:	2b13      	cmp	r3, #19
 8001288:	f200 8426 	bhi.w	8001ad8 <Set_Random_Motion_Values+0x864>
    x_axes.AXIS_X +=  (10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 800128c:	f007 fe10 	bl	8008eb0 <rand>
 8001290:	4603      	mov	r3, r0
 8001292:	17da      	asrs	r2, r3, #31
 8001294:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 8001298:	f8c7 232c 	str.w	r2, [r7, #812]	@ 0x32c
 800129c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80012a0:	2200      	movs	r2, #0
 80012a2:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
 80012a6:	f8c7 2324 	str.w	r2, [r7, #804]	@ 0x324
 80012aa:	e9d7 45ca 	ldrd	r4, r5, [r7, #808]	@ 0x328
 80012ae:	462b      	mov	r3, r5
 80012b0:	e9d7 abc8 	ldrd	sl, fp, [r7, #800]	@ 0x320
 80012b4:	4652      	mov	r2, sl
 80012b6:	fb02 f203 	mul.w	r2, r2, r3
 80012ba:	465b      	mov	r3, fp
 80012bc:	4621      	mov	r1, r4
 80012be:	fb01 f303 	mul.w	r3, r1, r3
 80012c2:	4413      	add	r3, r2
 80012c4:	4622      	mov	r2, r4
 80012c6:	4651      	mov	r1, sl
 80012c8:	fba2 8901 	umull	r8, r9, r2, r1
 80012cc:	444b      	add	r3, r9
 80012ce:	4699      	mov	r9, r3
 80012d0:	4642      	mov	r2, r8
 80012d2:	464b      	mov	r3, r9
 80012d4:	1891      	adds	r1, r2, r2
 80012d6:	66b9      	str	r1, [r7, #104]	@ 0x68
 80012d8:	415b      	adcs	r3, r3
 80012da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80012dc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80012e0:	eb12 0108 	adds.w	r1, r2, r8
 80012e4:	f8c7 1318 	str.w	r1, [r7, #792]	@ 0x318
 80012e8:	eb43 0309 	adc.w	r3, r3, r9
 80012ec:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 80012f0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80012f4:	f04f 0300 	mov.w	r3, #0
 80012f8:	e9d7 01c6 	ldrd	r0, r1, [r7, #792]	@ 0x318
 80012fc:	f7ff fca4 	bl	8000c48 <__aeabi_uldivmod>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	f112 010a 	adds.w	r1, r2, #10
 8001308:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 800130c:	f143 0300 	adc.w	r3, r3, #0
 8001310:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001314:	4bec      	ldr	r3, [pc, #944]	@ (80016c8 <Set_Random_Motion_Values+0x454>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800131e:	4413      	add	r3, r2
 8001320:	461a      	mov	r2, r3
 8001322:	4be9      	ldr	r3, [pc, #932]	@ (80016c8 <Set_Random_Motion_Values+0x454>)
 8001324:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y += -(10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001326:	f007 fdc3 	bl	8008eb0 <rand>
 800132a:	4603      	mov	r3, r0
 800132c:	17da      	asrs	r2, r3, #31
 800132e:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 8001332:	f8c7 2314 	str.w	r2, [r7, #788]	@ 0x314
 8001336:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800133a:	2200      	movs	r2, #0
 800133c:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
 8001340:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 8001344:	e9d7 45c4 	ldrd	r4, r5, [r7, #784]	@ 0x310
 8001348:	462b      	mov	r3, r5
 800134a:	e9d7 89c2 	ldrd	r8, r9, [r7, #776]	@ 0x308
 800134e:	4642      	mov	r2, r8
 8001350:	fb02 f203 	mul.w	r2, r2, r3
 8001354:	464b      	mov	r3, r9
 8001356:	4621      	mov	r1, r4
 8001358:	fb01 f303 	mul.w	r3, r1, r3
 800135c:	4413      	add	r3, r2
 800135e:	4622      	mov	r2, r4
 8001360:	4641      	mov	r1, r8
 8001362:	fba2 1201 	umull	r1, r2, r2, r1
 8001366:	f8c7 23dc 	str.w	r2, [r7, #988]	@ 0x3dc
 800136a:	460a      	mov	r2, r1
 800136c:	f8c7 23d8 	str.w	r2, [r7, #984]	@ 0x3d8
 8001370:	f8d7 23dc 	ldr.w	r2, [r7, #988]	@ 0x3dc
 8001374:	4413      	add	r3, r2
 8001376:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
 800137a:	e9d7 45f6 	ldrd	r4, r5, [r7, #984]	@ 0x3d8
 800137e:	4622      	mov	r2, r4
 8001380:	462b      	mov	r3, r5
 8001382:	f04f 0000 	mov.w	r0, #0
 8001386:	f04f 0100 	mov.w	r1, #0
 800138a:	0099      	lsls	r1, r3, #2
 800138c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001390:	0090      	lsls	r0, r2, #2
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4621      	mov	r1, r4
 8001398:	1851      	adds	r1, r2, r1
 800139a:	f8c7 1300 	str.w	r1, [r7, #768]	@ 0x300
 800139e:	4629      	mov	r1, r5
 80013a0:	eb43 0101 	adc.w	r1, r3, r1
 80013a4:	f8c7 1304 	str.w	r1, [r7, #772]	@ 0x304
 80013a8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80013ac:	f04f 0300 	mov.w	r3, #0
 80013b0:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	@ 0x300
 80013b4:	f7ff fc48 	bl	8000c48 <__aeabi_uldivmod>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	f06f 0009 	mvn.w	r0, #9
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295
 80013c4:	1a80      	subs	r0, r0, r2
 80013c6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 80013ca:	eb61 0303 	sbc.w	r3, r1, r3
 80013ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80013d2:	4bbd      	ldr	r3, [pc, #756]	@ (80016c8 <Set_Random_Motion_Values+0x454>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	461a      	mov	r2, r3
 80013d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80013dc:	4413      	add	r3, r2
 80013de:	461a      	mov	r2, r3
 80013e0:	4bb9      	ldr	r3, [pc, #740]	@ (80016c8 <Set_Random_Motion_Values+0x454>)
 80013e2:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 80013e4:	f007 fd64 	bl	8008eb0 <rand>
 80013e8:	4603      	mov	r3, r0
 80013ea:	17da      	asrs	r2, r3, #31
 80013ec:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 80013f0:	f8c7 22fc 	str.w	r2, [r7, #764]	@ 0x2fc
 80013f4:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80013f8:	2200      	movs	r2, #0
 80013fa:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 80013fe:	f8c7 22f4 	str.w	r2, [r7, #756]	@ 0x2f4
 8001402:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	@ 0x2f8
 8001406:	462b      	mov	r3, r5
 8001408:	e9d7 89bc 	ldrd	r8, r9, [r7, #752]	@ 0x2f0
 800140c:	4642      	mov	r2, r8
 800140e:	fb02 f203 	mul.w	r2, r2, r3
 8001412:	464b      	mov	r3, r9
 8001414:	4621      	mov	r1, r4
 8001416:	fb01 f303 	mul.w	r3, r1, r3
 800141a:	4413      	add	r3, r2
 800141c:	4622      	mov	r2, r4
 800141e:	4641      	mov	r1, r8
 8001420:	fba2 1201 	umull	r1, r2, r2, r1
 8001424:	f8c7 23d4 	str.w	r2, [r7, #980]	@ 0x3d4
 8001428:	460a      	mov	r2, r1
 800142a:	f8c7 23d0 	str.w	r2, [r7, #976]	@ 0x3d0
 800142e:	f8d7 23d4 	ldr.w	r2, [r7, #980]	@ 0x3d4
 8001432:	4413      	add	r3, r2
 8001434:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 8001438:	e9d7 45f4 	ldrd	r4, r5, [r7, #976]	@ 0x3d0
 800143c:	4622      	mov	r2, r4
 800143e:	462b      	mov	r3, r5
 8001440:	f04f 0000 	mov.w	r0, #0
 8001444:	f04f 0100 	mov.w	r1, #0
 8001448:	00d9      	lsls	r1, r3, #3
 800144a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800144e:	00d0      	lsls	r0, r2, #3
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4621      	mov	r1, r4
 8001456:	1a51      	subs	r1, r2, r1
 8001458:	f8c7 12e8 	str.w	r1, [r7, #744]	@ 0x2e8
 800145c:	4629      	mov	r1, r5
 800145e:	eb63 0301 	sbc.w	r3, r3, r1
 8001462:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 8001466:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800146a:	f04f 0300 	mov.w	r3, #0
 800146e:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 8001472:	f7ff fbe9 	bl	8000c48 <__aeabi_uldivmod>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	f112 010a 	adds.w	r1, r2, #10
 800147e:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8001482:	f143 0300 	adc.w	r3, r3, #0
 8001486:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800148a:	4b8f      	ldr	r3, [pc, #572]	@ (80016c8 <Set_Random_Motion_Values+0x454>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	461a      	mov	r2, r3
 8001490:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001494:	4413      	add	r3, r2
 8001496:	461a      	mov	r2, r3
 8001498:	4b8b      	ldr	r3, [pc, #556]	@ (80016c8 <Set_Random_Motion_Values+0x454>)
 800149a:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 800149c:	f007 fd08 	bl	8008eb0 <rand>
 80014a0:	4603      	mov	r3, r0
 80014a2:	17da      	asrs	r2, r3, #31
 80014a4:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 80014a8:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 80014ac:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80014b0:	2200      	movs	r2, #0
 80014b2:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 80014b6:	f8c7 22dc 	str.w	r2, [r7, #732]	@ 0x2dc
 80014ba:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	@ 0x2e0
 80014be:	462b      	mov	r3, r5
 80014c0:	e9d7 89b6 	ldrd	r8, r9, [r7, #728]	@ 0x2d8
 80014c4:	4642      	mov	r2, r8
 80014c6:	fb02 f203 	mul.w	r2, r2, r3
 80014ca:	464b      	mov	r3, r9
 80014cc:	4621      	mov	r1, r4
 80014ce:	fb01 f303 	mul.w	r3, r1, r3
 80014d2:	4413      	add	r3, r2
 80014d4:	4622      	mov	r2, r4
 80014d6:	4641      	mov	r1, r8
 80014d8:	fba2 1201 	umull	r1, r2, r2, r1
 80014dc:	f8c7 23cc 	str.w	r2, [r7, #972]	@ 0x3cc
 80014e0:	460a      	mov	r2, r1
 80014e2:	f8c7 23c8 	str.w	r2, [r7, #968]	@ 0x3c8
 80014e6:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 80014ea:	4413      	add	r3, r2
 80014ec:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 80014f0:	e9d7 12f2 	ldrd	r1, r2, [r7, #968]	@ 0x3c8
 80014f4:	460b      	mov	r3, r1
 80014f6:	18db      	adds	r3, r3, r3
 80014f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80014fa:	4613      	mov	r3, r2
 80014fc:	eb42 0303 	adc.w	r3, r2, r3
 8001500:	667b      	str	r3, [r7, #100]	@ 0x64
 8001502:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001506:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800150a:	f04f 0300 	mov.w	r3, #0
 800150e:	f7ff fb9b 	bl	8000c48 <__aeabi_uldivmod>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 800151a:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 800151e:	f143 0300 	adc.w	r3, r3, #0
 8001522:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001526:	4b69      	ldr	r3, [pc, #420]	@ (80016cc <Set_Random_Motion_Values+0x458>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001530:	4413      	add	r3, r2
 8001532:	461a      	mov	r2, r3
 8001534:	4b65      	ldr	r3, [pc, #404]	@ (80016cc <Set_Random_Motion_Values+0x458>)
 8001536:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y += -(100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001538:	f007 fcba 	bl	8008eb0 <rand>
 800153c:	4603      	mov	r3, r0
 800153e:	17da      	asrs	r2, r3, #31
 8001540:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 8001544:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 8001548:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800154c:	2200      	movs	r2, #0
 800154e:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 8001552:	f8c7 22cc 	str.w	r2, [r7, #716]	@ 0x2cc
 8001556:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	@ 0x2d0
 800155a:	462b      	mov	r3, r5
 800155c:	e9d7 89b2 	ldrd	r8, r9, [r7, #712]	@ 0x2c8
 8001560:	4642      	mov	r2, r8
 8001562:	fb02 f203 	mul.w	r2, r2, r3
 8001566:	464b      	mov	r3, r9
 8001568:	4621      	mov	r1, r4
 800156a:	fb01 f303 	mul.w	r3, r1, r3
 800156e:	4413      	add	r3, r2
 8001570:	4622      	mov	r2, r4
 8001572:	4641      	mov	r1, r8
 8001574:	fba2 1201 	umull	r1, r2, r2, r1
 8001578:	f8c7 23c4 	str.w	r2, [r7, #964]	@ 0x3c4
 800157c:	460a      	mov	r2, r1
 800157e:	f8c7 23c0 	str.w	r2, [r7, #960]	@ 0x3c0
 8001582:	f8d7 23c4 	ldr.w	r2, [r7, #964]	@ 0x3c4
 8001586:	4413      	add	r3, r2
 8001588:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 800158c:	f04f 0000 	mov.w	r0, #0
 8001590:	f04f 0100 	mov.w	r1, #0
 8001594:	e9d7 45f0 	ldrd	r4, r5, [r7, #960]	@ 0x3c0
 8001598:	462b      	mov	r3, r5
 800159a:	0099      	lsls	r1, r3, #2
 800159c:	4623      	mov	r3, r4
 800159e:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 80015a2:	4623      	mov	r3, r4
 80015a4:	0098      	lsls	r0, r3, #2
 80015a6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80015aa:	f04f 0300 	mov.w	r3, #0
 80015ae:	f7ff fb4b 	bl	8000c48 <__aeabi_uldivmod>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 80015ba:	f04f 31ff 	mov.w	r1, #4294967295
 80015be:	1a80      	subs	r0, r0, r2
 80015c0:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
 80015c4:	eb61 0303 	sbc.w	r3, r1, r3
 80015c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80015cc:	4b3f      	ldr	r3, [pc, #252]	@ (80016cc <Set_Random_Motion_Values+0x458>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	461a      	mov	r2, r3
 80015d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80015d6:	4413      	add	r3, r2
 80015d8:	461a      	mov	r2, r3
 80015da:	4b3c      	ldr	r3, [pc, #240]	@ (80016cc <Set_Random_Motion_Values+0x458>)
 80015dc:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 80015de:	f007 fc67 	bl	8008eb0 <rand>
 80015e2:	4603      	mov	r3, r0
 80015e4:	17da      	asrs	r2, r3, #31
 80015e6:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
 80015ea:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 80015ee:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80015f2:	2200      	movs	r2, #0
 80015f4:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 80015f8:	f8c7 22bc 	str.w	r2, [r7, #700]	@ 0x2bc
 80015fc:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	@ 0x2c0
 8001600:	462b      	mov	r3, r5
 8001602:	e9d7 89ae 	ldrd	r8, r9, [r7, #696]	@ 0x2b8
 8001606:	4642      	mov	r2, r8
 8001608:	fb02 f203 	mul.w	r2, r2, r3
 800160c:	464b      	mov	r3, r9
 800160e:	4621      	mov	r1, r4
 8001610:	fb01 f303 	mul.w	r3, r1, r3
 8001614:	4413      	add	r3, r2
 8001616:	4622      	mov	r2, r4
 8001618:	4641      	mov	r1, r8
 800161a:	fba2 1201 	umull	r1, r2, r2, r1
 800161e:	f8c7 23bc 	str.w	r2, [r7, #956]	@ 0x3bc
 8001622:	460a      	mov	r2, r1
 8001624:	f8c7 23b8 	str.w	r2, [r7, #952]	@ 0x3b8
 8001628:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 800162c:	4413      	add	r3, r2
 800162e:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 8001632:	e9d7 45ee 	ldrd	r4, r5, [r7, #952]	@ 0x3b8
 8001636:	4622      	mov	r2, r4
 8001638:	462b      	mov	r3, r5
 800163a:	1891      	adds	r1, r2, r2
 800163c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800163e:	415b      	adcs	r3, r3
 8001640:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001642:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001646:	4621      	mov	r1, r4
 8001648:	1851      	adds	r1, r2, r1
 800164a:	6539      	str	r1, [r7, #80]	@ 0x50
 800164c:	4629      	mov	r1, r5
 800164e:	eb43 0101 	adc.w	r1, r3, r1
 8001652:	6579      	str	r1, [r7, #84]	@ 0x54
 8001654:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8001658:	460b      	mov	r3, r1
 800165a:	18db      	adds	r3, r3, r3
 800165c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800165e:	4613      	mov	r3, r2
 8001660:	eb42 0303 	adc.w	r3, r2, r3
 8001664:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001666:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 800166a:	4618      	mov	r0, r3
 800166c:	4621      	mov	r1, r4
 800166e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	f7ff fae7 	bl	8000c48 <__aeabi_uldivmod>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001682:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8001686:	f143 0300 	adc.w	r3, r3, #0
 800168a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800168e:	4b0f      	ldr	r3, [pc, #60]	@ (80016cc <Set_Random_Motion_Values+0x458>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	461a      	mov	r2, r3
 8001694:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001698:	4413      	add	r3, r2
 800169a:	461a      	mov	r2, r3
 800169c:	4b0b      	ldr	r3, [pc, #44]	@ (80016cc <Set_Random_Motion_Values+0x458>)
 800169e:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80016a0:	f007 fc06 	bl	8008eb0 <rand>
 80016a4:	4603      	mov	r3, r0
 80016a6:	17da      	asrs	r2, r3, #31
 80016a8:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 80016ac:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 80016b0:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80016b4:	2200      	movs	r2, #0
 80016b6:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 80016ba:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 80016be:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	@ 0x2b0
 80016c2:	462b      	mov	r3, r5
 80016c4:	e004      	b.n	80016d0 <Set_Random_Motion_Values+0x45c>
 80016c6:	bf00      	nop
 80016c8:	2000024c 	.word	0x2000024c
 80016cc:	20000258 	.word	0x20000258
 80016d0:	e9d7 89aa 	ldrd	r8, r9, [r7, #680]	@ 0x2a8
 80016d4:	4642      	mov	r2, r8
 80016d6:	fb02 f203 	mul.w	r2, r2, r3
 80016da:	464b      	mov	r3, r9
 80016dc:	4621      	mov	r1, r4
 80016de:	fb01 f303 	mul.w	r3, r1, r3
 80016e2:	4413      	add	r3, r2
 80016e4:	4622      	mov	r2, r4
 80016e6:	4641      	mov	r1, r8
 80016e8:	fba2 1201 	umull	r1, r2, r2, r1
 80016ec:	f8c7 23b4 	str.w	r2, [r7, #948]	@ 0x3b4
 80016f0:	460a      	mov	r2, r1
 80016f2:	f8c7 23b0 	str.w	r2, [r7, #944]	@ 0x3b0
 80016f6:	f8d7 23b4 	ldr.w	r2, [r7, #948]	@ 0x3b4
 80016fa:	4413      	add	r3, r2
 80016fc:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 8001700:	e9d7 45ec 	ldrd	r4, r5, [r7, #944]	@ 0x3b0
 8001704:	4622      	mov	r2, r4
 8001706:	462b      	mov	r3, r5
 8001708:	1891      	adds	r1, r2, r2
 800170a:	6439      	str	r1, [r7, #64]	@ 0x40
 800170c:	415b      	adcs	r3, r3
 800170e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001710:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001714:	4621      	mov	r1, r4
 8001716:	1851      	adds	r1, r2, r1
 8001718:	f8c7 12a0 	str.w	r1, [r7, #672]	@ 0x2a0
 800171c:	4629      	mov	r1, r5
 800171e:	eb43 0101 	adc.w	r1, r3, r1
 8001722:	f8c7 12a4 	str.w	r1, [r7, #676]	@ 0x2a4
 8001726:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	@ 0x2a0
 8001732:	f7ff fa89 	bl	8000c48 <__aeabi_uldivmod>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	1cd1      	adds	r1, r2, #3
 800173c:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8001740:	f143 0300 	adc.w	r3, r3, #0
 8001744:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001748:	4be1      	ldr	r3, [pc, #900]	@ (8001ad0 <Set_Random_Motion_Values+0x85c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001752:	4413      	add	r3, r2
 8001754:	461a      	mov	r2, r3
 8001756:	4bde      	ldr	r3, [pc, #888]	@ (8001ad0 <Set_Random_Motion_Values+0x85c>)
 8001758:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y += -(3  + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 800175a:	f007 fba9 	bl	8008eb0 <rand>
 800175e:	4603      	mov	r3, r0
 8001760:	17da      	asrs	r2, r3, #31
 8001762:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 8001766:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 800176a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800176e:	2200      	movs	r2, #0
 8001770:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8001774:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 8001778:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	@ 0x298
 800177c:	462b      	mov	r3, r5
 800177e:	e9d7 89a4 	ldrd	r8, r9, [r7, #656]	@ 0x290
 8001782:	4642      	mov	r2, r8
 8001784:	fb02 f203 	mul.w	r2, r2, r3
 8001788:	464b      	mov	r3, r9
 800178a:	4621      	mov	r1, r4
 800178c:	fb01 f303 	mul.w	r3, r1, r3
 8001790:	4413      	add	r3, r2
 8001792:	4622      	mov	r2, r4
 8001794:	4641      	mov	r1, r8
 8001796:	fba2 1201 	umull	r1, r2, r2, r1
 800179a:	f8c7 23ac 	str.w	r2, [r7, #940]	@ 0x3ac
 800179e:	460a      	mov	r2, r1
 80017a0:	f8c7 23a8 	str.w	r2, [r7, #936]	@ 0x3a8
 80017a4:	f8d7 23ac 	ldr.w	r2, [r7, #940]	@ 0x3ac
 80017a8:	4413      	add	r3, r2
 80017aa:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 80017ae:	f04f 0000 	mov.w	r0, #0
 80017b2:	f04f 0100 	mov.w	r1, #0
 80017b6:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	@ 0x3a8
 80017ba:	462b      	mov	r3, r5
 80017bc:	0099      	lsls	r1, r3, #2
 80017be:	4623      	mov	r3, r4
 80017c0:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 80017c4:	4623      	mov	r3, r4
 80017c6:	0098      	lsls	r0, r3, #2
 80017c8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80017cc:	f04f 0300 	mov.w	r3, #0
 80017d0:	f7ff fa3a 	bl	8000c48 <__aeabi_uldivmod>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	f06f 0002 	mvn.w	r0, #2
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295
 80017e0:	1a80      	subs	r0, r0, r2
 80017e2:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
 80017e6:	eb61 0303 	sbc.w	r3, r1, r3
 80017ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80017ee:	4bb8      	ldr	r3, [pc, #736]	@ (8001ad0 <Set_Random_Motion_Values+0x85c>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	461a      	mov	r2, r3
 80017f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80017f8:	4413      	add	r3, r2
 80017fa:	461a      	mov	r2, r3
 80017fc:	4bb4      	ldr	r3, [pc, #720]	@ (8001ad0 <Set_Random_Motion_Values+0x85c>)
 80017fe:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z +=  (3  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001800:	f007 fb56 	bl	8008eb0 <rand>
 8001804:	4603      	mov	r3, r0
 8001806:	17da      	asrs	r2, r3, #31
 8001808:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 800180c:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 8001810:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001814:	2200      	movs	r2, #0
 8001816:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 800181a:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 800181e:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	@ 0x288
 8001822:	462b      	mov	r3, r5
 8001824:	e9d7 89a0 	ldrd	r8, r9, [r7, #640]	@ 0x280
 8001828:	4642      	mov	r2, r8
 800182a:	fb02 f203 	mul.w	r2, r2, r3
 800182e:	464b      	mov	r3, r9
 8001830:	4621      	mov	r1, r4
 8001832:	fb01 f303 	mul.w	r3, r1, r3
 8001836:	4413      	add	r3, r2
 8001838:	4622      	mov	r2, r4
 800183a:	4641      	mov	r1, r8
 800183c:	fba2 1201 	umull	r1, r2, r2, r1
 8001840:	f8c7 23a4 	str.w	r2, [r7, #932]	@ 0x3a4
 8001844:	460a      	mov	r2, r1
 8001846:	f8c7 23a0 	str.w	r2, [r7, #928]	@ 0x3a0
 800184a:	f8d7 23a4 	ldr.w	r2, [r7, #932]	@ 0x3a4
 800184e:	4413      	add	r3, r2
 8001850:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 8001854:	e9d7 45e8 	ldrd	r4, r5, [r7, #928]	@ 0x3a0
 8001858:	4622      	mov	r2, r4
 800185a:	462b      	mov	r3, r5
 800185c:	f04f 0000 	mov.w	r0, #0
 8001860:	f04f 0100 	mov.w	r1, #0
 8001864:	0099      	lsls	r1, r3, #2
 8001866:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800186a:	0090      	lsls	r0, r2, #2
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4621      	mov	r1, r4
 8001872:	1851      	adds	r1, r2, r1
 8001874:	f8c7 1278 	str.w	r1, [r7, #632]	@ 0x278
 8001878:	4629      	mov	r1, r5
 800187a:	eb43 0101 	adc.w	r1, r3, r1
 800187e:	f8c7 127c 	str.w	r1, [r7, #636]	@ 0x27c
 8001882:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 800188e:	f7ff f9db 	bl	8000c48 <__aeabi_uldivmod>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	1cd1      	adds	r1, r2, #3
 8001898:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 800189c:	f143 0300 	adc.w	r3, r3, #0
 80018a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80018a4:	4b8a      	ldr	r3, [pc, #552]	@ (8001ad0 <Set_Random_Motion_Values+0x85c>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	461a      	mov	r2, r3
 80018aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80018ae:	4413      	add	r3, r2
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b87      	ldr	r3, [pc, #540]	@ (8001ad0 <Set_Random_Motion_Values+0x85c>)
 80018b4:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X -= (100  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80018b6:	f007 fafb 	bl	8008eb0 <rand>
 80018ba:	4603      	mov	r3, r0
 80018bc:	17da      	asrs	r2, r3, #31
 80018be:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 80018c2:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 80018c6:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80018ca:	2200      	movs	r2, #0
 80018cc:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 80018d0:	f8c7 226c 	str.w	r2, [r7, #620]	@ 0x26c
 80018d4:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	@ 0x270
 80018d8:	462b      	mov	r3, r5
 80018da:	e9d7 899a 	ldrd	r8, r9, [r7, #616]	@ 0x268
 80018de:	4642      	mov	r2, r8
 80018e0:	fb02 f203 	mul.w	r2, r2, r3
 80018e4:	464b      	mov	r3, r9
 80018e6:	4621      	mov	r1, r4
 80018e8:	fb01 f303 	mul.w	r3, r1, r3
 80018ec:	4413      	add	r3, r2
 80018ee:	4622      	mov	r2, r4
 80018f0:	4641      	mov	r1, r8
 80018f2:	fba2 1201 	umull	r1, r2, r2, r1
 80018f6:	f8c7 239c 	str.w	r2, [r7, #924]	@ 0x39c
 80018fa:	460a      	mov	r2, r1
 80018fc:	f8c7 2398 	str.w	r2, [r7, #920]	@ 0x398
 8001900:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 8001904:	4413      	add	r3, r2
 8001906:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 800190a:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	@ 0x398
 800190e:	4622      	mov	r2, r4
 8001910:	462b      	mov	r3, r5
 8001912:	1891      	adds	r1, r2, r2
 8001914:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001916:	415b      	adcs	r3, r3
 8001918:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800191a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800191e:	4621      	mov	r1, r4
 8001920:	1851      	adds	r1, r2, r1
 8001922:	f8c7 1260 	str.w	r1, [r7, #608]	@ 0x260
 8001926:	4629      	mov	r1, r5
 8001928:	eb43 0101 	adc.w	r1, r3, r1
 800192c:	f8c7 1264 	str.w	r1, [r7, #612]	@ 0x264
 8001930:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
 800193c:	f7ff f984 	bl	8000c48 <__aeabi_uldivmod>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001948:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800194c:	f143 0300 	adc.w	r3, r3, #0
 8001950:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001954:	4b5f      	ldr	r3, [pc, #380]	@ (8001ad4 <Set_Random_Motion_Values+0x860>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	461a      	mov	r2, r3
 800195a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	461a      	mov	r2, r3
 8001962:	4b5c      	ldr	r3, [pc, #368]	@ (8001ad4 <Set_Random_Motion_Values+0x860>)
 8001964:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y += (100  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001966:	f007 faa3 	bl	8008eb0 <rand>
 800196a:	4603      	mov	r3, r0
 800196c:	17da      	asrs	r2, r3, #31
 800196e:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 8001972:	f8c7 225c 	str.w	r2, [r7, #604]	@ 0x25c
 8001976:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800197a:	2200      	movs	r2, #0
 800197c:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8001980:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 8001984:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	@ 0x258
 8001988:	462b      	mov	r3, r5
 800198a:	e9d7 8994 	ldrd	r8, r9, [r7, #592]	@ 0x250
 800198e:	4642      	mov	r2, r8
 8001990:	fb02 f203 	mul.w	r2, r2, r3
 8001994:	464b      	mov	r3, r9
 8001996:	4621      	mov	r1, r4
 8001998:	fb01 f303 	mul.w	r3, r1, r3
 800199c:	4413      	add	r3, r2
 800199e:	4622      	mov	r2, r4
 80019a0:	4641      	mov	r1, r8
 80019a2:	fba2 1201 	umull	r1, r2, r2, r1
 80019a6:	f8c7 2394 	str.w	r2, [r7, #916]	@ 0x394
 80019aa:	460a      	mov	r2, r1
 80019ac:	f8c7 2390 	str.w	r2, [r7, #912]	@ 0x390
 80019b0:	f8d7 2394 	ldr.w	r2, [r7, #916]	@ 0x394
 80019b4:	4413      	add	r3, r2
 80019b6:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 80019ba:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	@ 0x390
 80019be:	4622      	mov	r2, r4
 80019c0:	462b      	mov	r3, r5
 80019c2:	f04f 0000 	mov.w	r0, #0
 80019c6:	f04f 0100 	mov.w	r1, #0
 80019ca:	0099      	lsls	r1, r3, #2
 80019cc:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80019d0:	0090      	lsls	r0, r2, #2
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4621      	mov	r1, r4
 80019d8:	1851      	adds	r1, r2, r1
 80019da:	f8c7 1248 	str.w	r1, [r7, #584]	@ 0x248
 80019de:	4629      	mov	r1, r5
 80019e0:	eb43 0101 	adc.w	r1, r3, r1
 80019e4:	f8c7 124c 	str.w	r1, [r7, #588]	@ 0x24c
 80019e8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80019ec:	f04f 0300 	mov.w	r3, #0
 80019f0:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	@ 0x248
 80019f4:	f7ff f928 	bl	8000c48 <__aeabi_uldivmod>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001a00:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001a02:	f143 0300 	adc.w	r3, r3, #0
 8001a06:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001a08:	4b32      	ldr	r3, [pc, #200]	@ (8001ad4 <Set_Random_Motion_Values+0x860>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001a10:	4413      	add	r3, r2
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b2f      	ldr	r3, [pc, #188]	@ (8001ad4 <Set_Random_Motion_Values+0x860>)
 8001a16:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z -= (100  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001a18:	f007 fa4a 	bl	8008eb0 <rand>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	17da      	asrs	r2, r3, #31
 8001a20:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8001a24:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 8001a28:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 8001a32:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 8001a36:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	@ 0x240
 8001a3a:	462b      	mov	r3, r5
 8001a3c:	e9d7 898e 	ldrd	r8, r9, [r7, #568]	@ 0x238
 8001a40:	4642      	mov	r2, r8
 8001a42:	fb02 f203 	mul.w	r2, r2, r3
 8001a46:	464b      	mov	r3, r9
 8001a48:	4621      	mov	r1, r4
 8001a4a:	fb01 f303 	mul.w	r3, r1, r3
 8001a4e:	4413      	add	r3, r2
 8001a50:	4622      	mov	r2, r4
 8001a52:	4641      	mov	r1, r8
 8001a54:	fba2 1201 	umull	r1, r2, r2, r1
 8001a58:	f8c7 238c 	str.w	r2, [r7, #908]	@ 0x38c
 8001a5c:	460a      	mov	r2, r1
 8001a5e:	f8c7 2388 	str.w	r2, [r7, #904]	@ 0x388
 8001a62:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 8001a66:	4413      	add	r3, r2
 8001a68:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 8001a6c:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	@ 0x388
 8001a70:	4622      	mov	r2, r4
 8001a72:	462b      	mov	r3, r5
 8001a74:	f04f 0000 	mov.w	r0, #0
 8001a78:	f04f 0100 	mov.w	r1, #0
 8001a7c:	00d9      	lsls	r1, r3, #3
 8001a7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a82:	00d0      	lsls	r0, r2, #3
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4621      	mov	r1, r4
 8001a8a:	1a51      	subs	r1, r2, r1
 8001a8c:	f8c7 1230 	str.w	r1, [r7, #560]	@ 0x230
 8001a90:	4629      	mov	r1, r5
 8001a92:	eb63 0301 	sbc.w	r3, r3, r1
 8001a96:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 8001a9a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 8001aa6:	f7ff f8cf 	bl	8000c48 <__aeabi_uldivmod>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001ab2:	6739      	str	r1, [r7, #112]	@ 0x70
 8001ab4:	f143 0300 	adc.w	r3, r3, #0
 8001ab8:	677b      	str	r3, [r7, #116]	@ 0x74
 8001aba:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <Set_Random_Motion_Values+0x860>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b03      	ldr	r3, [pc, #12]	@ (8001ad4 <Set_Random_Motion_Values+0x860>)
 8001ac8:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
  }

}
 8001aca:	f000 bc37 	b.w	800233c <Set_Random_Motion_Values+0x10c8>
 8001ace:	bf00      	nop
 8001ad0:	20000264 	.word	0x20000264
 8001ad4:	20000270 	.word	0x20000270
    x_axes.AXIS_X += -(10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001ad8:	f007 f9ea 	bl	8008eb0 <rand>
 8001adc:	4603      	mov	r3, r0
 8001ade:	17da      	asrs	r2, r3, #31
 8001ae0:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 8001ae4:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 8001ae8:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001aec:	2200      	movs	r2, #0
 8001aee:	469a      	mov	sl, r3
 8001af0:	4693      	mov	fp, r2
 8001af2:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8001af6:	460b      	mov	r3, r1
 8001af8:	fb0a f203 	mul.w	r2, sl, r3
 8001afc:	4603      	mov	r3, r0
 8001afe:	fb03 f30b 	mul.w	r3, r3, fp
 8001b02:	4413      	add	r3, r2
 8001b04:	4602      	mov	r2, r0
 8001b06:	fba2 450a 	umull	r4, r5, r2, sl
 8001b0a:	442b      	add	r3, r5
 8001b0c:	461d      	mov	r5, r3
 8001b0e:	4622      	mov	r2, r4
 8001b10:	462b      	mov	r3, r5
 8001b12:	1891      	adds	r1, r2, r2
 8001b14:	6339      	str	r1, [r7, #48]	@ 0x30
 8001b16:	415b      	adcs	r3, r3
 8001b18:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b1a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001b1e:	1911      	adds	r1, r2, r4
 8001b20:	f8c7 1220 	str.w	r1, [r7, #544]	@ 0x220
 8001b24:	416b      	adcs	r3, r5
 8001b26:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8001b2a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8001b36:	f7ff f887 	bl	8000c48 <__aeabi_uldivmod>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	f06f 0009 	mvn.w	r0, #9
 8001b42:	f04f 31ff 	mov.w	r1, #4294967295
 8001b46:	1a80      	subs	r0, r0, r2
 8001b48:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
 8001b4c:	eb61 0303 	sbc.w	r3, r1, r3
 8001b50:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001b54:	4beb      	ldr	r3, [pc, #940]	@ (8001f04 <Set_Random_Motion_Values+0xc90>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001b5e:	4413      	add	r3, r2
 8001b60:	461a      	mov	r2, r3
 8001b62:	4be8      	ldr	r3, [pc, #928]	@ (8001f04 <Set_Random_Motion_Values+0xc90>)
 8001b64:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y +=  (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001b66:	f007 f9a3 	bl	8008eb0 <rand>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	17da      	asrs	r2, r3, #31
 8001b6e:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 8001b72:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 8001b76:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8001b80:	f8c7 2214 	str.w	r2, [r7, #532]	@ 0x214
 8001b84:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	@ 0x218
 8001b88:	462b      	mov	r3, r5
 8001b8a:	e9d7 8984 	ldrd	r8, r9, [r7, #528]	@ 0x210
 8001b8e:	4642      	mov	r2, r8
 8001b90:	fb02 f203 	mul.w	r2, r2, r3
 8001b94:	464b      	mov	r3, r9
 8001b96:	4621      	mov	r1, r4
 8001b98:	fb01 f303 	mul.w	r3, r1, r3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	4622      	mov	r2, r4
 8001ba0:	4641      	mov	r1, r8
 8001ba2:	fba2 1201 	umull	r1, r2, r2, r1
 8001ba6:	f8c7 2384 	str.w	r2, [r7, #900]	@ 0x384
 8001baa:	460a      	mov	r2, r1
 8001bac:	f8c7 2380 	str.w	r2, [r7, #896]	@ 0x380
 8001bb0:	f8d7 2384 	ldr.w	r2, [r7, #900]	@ 0x384
 8001bb4:	4413      	add	r3, r2
 8001bb6:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 8001bba:	e9d7 45e0 	ldrd	r4, r5, [r7, #896]	@ 0x380
 8001bbe:	4622      	mov	r2, r4
 8001bc0:	462b      	mov	r3, r5
 8001bc2:	f04f 0000 	mov.w	r0, #0
 8001bc6:	f04f 0100 	mov.w	r1, #0
 8001bca:	0099      	lsls	r1, r3, #2
 8001bcc:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001bd0:	0090      	lsls	r0, r2, #2
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4621      	mov	r1, r4
 8001bd8:	1851      	adds	r1, r2, r1
 8001bda:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
 8001bde:	4629      	mov	r1, r5
 8001be0:	eb43 0101 	adc.w	r1, r3, r1
 8001be4:	f8c7 120c 	str.w	r1, [r7, #524]	@ 0x20c
 8001be8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 8001bf4:	f7ff f828 	bl	8000c48 <__aeabi_uldivmod>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	f112 010a 	adds.w	r1, r2, #10
 8001c00:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 8001c04:	f143 0300 	adc.w	r3, r3, #0
 8001c08:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001c0c:	4bbd      	ldr	r3, [pc, #756]	@ (8001f04 <Set_Random_Motion_Values+0xc90>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	461a      	mov	r2, r3
 8001c12:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001c16:	4413      	add	r3, r2
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4bba      	ldr	r3, [pc, #744]	@ (8001f04 <Set_Random_Motion_Values+0xc90>)
 8001c1c:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z += -(10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001c1e:	f007 f947 	bl	8008eb0 <rand>
 8001c22:	4603      	mov	r3, r0
 8001c24:	17da      	asrs	r2, r3, #31
 8001c26:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8001c2a:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 8001c2e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001c32:	2200      	movs	r2, #0
 8001c34:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 8001c38:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 8001c3c:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	@ 0x200
 8001c40:	462b      	mov	r3, r5
 8001c42:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	@ 0x1f8
 8001c46:	4642      	mov	r2, r8
 8001c48:	fb02 f203 	mul.w	r2, r2, r3
 8001c4c:	464b      	mov	r3, r9
 8001c4e:	4621      	mov	r1, r4
 8001c50:	fb01 f303 	mul.w	r3, r1, r3
 8001c54:	4413      	add	r3, r2
 8001c56:	4622      	mov	r2, r4
 8001c58:	4641      	mov	r1, r8
 8001c5a:	fba2 1201 	umull	r1, r2, r2, r1
 8001c5e:	f8c7 237c 	str.w	r2, [r7, #892]	@ 0x37c
 8001c62:	460a      	mov	r2, r1
 8001c64:	f8c7 2378 	str.w	r2, [r7, #888]	@ 0x378
 8001c68:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 8001c6c:	4413      	add	r3, r2
 8001c6e:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 8001c72:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	@ 0x378
 8001c76:	4622      	mov	r2, r4
 8001c78:	462b      	mov	r3, r5
 8001c7a:	f04f 0000 	mov.w	r0, #0
 8001c7e:	f04f 0100 	mov.w	r1, #0
 8001c82:	00d9      	lsls	r1, r3, #3
 8001c84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c88:	00d0      	lsls	r0, r2, #3
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4621      	mov	r1, r4
 8001c90:	1a51      	subs	r1, r2, r1
 8001c92:	f8c7 11f0 	str.w	r1, [r7, #496]	@ 0x1f0
 8001c96:	4629      	mov	r1, r5
 8001c98:	eb63 0301 	sbc.w	r3, r3, r1
 8001c9c:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 8001ca0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 8001cac:	f7fe ffcc 	bl	8000c48 <__aeabi_uldivmod>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	f06f 0009 	mvn.w	r0, #9
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cbc:	1a80      	subs	r0, r0, r2
 8001cbe:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
 8001cc2:	eb61 0303 	sbc.w	r3, r1, r3
 8001cc6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001cca:	4b8e      	ldr	r3, [pc, #568]	@ (8001f04 <Set_Random_Motion_Values+0xc90>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001cd4:	4413      	add	r3, r2
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4b8a      	ldr	r3, [pc, #552]	@ (8001f04 <Set_Random_Motion_Values+0xc90>)
 8001cda:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X += -(100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8001cdc:	f007 f8e8 	bl	8008eb0 <rand>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	17da      	asrs	r2, r3, #31
 8001ce4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001ce8:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 8001cec:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001cf6:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8001cfa:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	@ 0x1e8
 8001cfe:	462b      	mov	r3, r5
 8001d00:	e9d7 8978 	ldrd	r8, r9, [r7, #480]	@ 0x1e0
 8001d04:	4642      	mov	r2, r8
 8001d06:	fb02 f203 	mul.w	r2, r2, r3
 8001d0a:	464b      	mov	r3, r9
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	fb01 f303 	mul.w	r3, r1, r3
 8001d12:	4413      	add	r3, r2
 8001d14:	4622      	mov	r2, r4
 8001d16:	4641      	mov	r1, r8
 8001d18:	fba2 1201 	umull	r1, r2, r2, r1
 8001d1c:	f8c7 2374 	str.w	r2, [r7, #884]	@ 0x374
 8001d20:	460a      	mov	r2, r1
 8001d22:	f8c7 2370 	str.w	r2, [r7, #880]	@ 0x370
 8001d26:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 8001d2a:	4413      	add	r3, r2
 8001d2c:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 8001d30:	e9d7 12dc 	ldrd	r1, r2, [r7, #880]	@ 0x370
 8001d34:	460b      	mov	r3, r1
 8001d36:	18db      	adds	r3, r3, r3
 8001d38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	eb42 0303 	adc.w	r3, r2, r3
 8001d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001d46:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	f7fe ff7b 	bl	8000c48 <__aeabi_uldivmod>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 8001d5a:	f04f 31ff 	mov.w	r1, #4294967295
 8001d5e:	1a80      	subs	r0, r0, r2
 8001d60:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
 8001d64:	eb61 0303 	sbc.w	r3, r1, r3
 8001d68:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001d6c:	4b66      	ldr	r3, [pc, #408]	@ (8001f08 <Set_Random_Motion_Values+0xc94>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	461a      	mov	r2, r3
 8001d72:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001d76:	4413      	add	r3, r2
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b63      	ldr	r3, [pc, #396]	@ (8001f08 <Set_Random_Motion_Values+0xc94>)
 8001d7c:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y +=  (100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001d7e:	f007 f897 	bl	8008eb0 <rand>
 8001d82:	4603      	mov	r3, r0
 8001d84:	17da      	asrs	r2, r3, #31
 8001d86:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8001d8a:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001d8e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001d92:	2200      	movs	r2, #0
 8001d94:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001d98:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 8001d9c:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	@ 0x1d8
 8001da0:	462b      	mov	r3, r5
 8001da2:	e9d7 8974 	ldrd	r8, r9, [r7, #464]	@ 0x1d0
 8001da6:	4642      	mov	r2, r8
 8001da8:	fb02 f203 	mul.w	r2, r2, r3
 8001dac:	464b      	mov	r3, r9
 8001dae:	4621      	mov	r1, r4
 8001db0:	fb01 f303 	mul.w	r3, r1, r3
 8001db4:	4413      	add	r3, r2
 8001db6:	4622      	mov	r2, r4
 8001db8:	4641      	mov	r1, r8
 8001dba:	fba2 1201 	umull	r1, r2, r2, r1
 8001dbe:	f8c7 236c 	str.w	r2, [r7, #876]	@ 0x36c
 8001dc2:	460a      	mov	r2, r1
 8001dc4:	f8c7 2368 	str.w	r2, [r7, #872]	@ 0x368
 8001dc8:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 8001dcc:	4413      	add	r3, r2
 8001dce:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
 8001dd2:	f04f 0000 	mov.w	r0, #0
 8001dd6:	f04f 0100 	mov.w	r1, #0
 8001dda:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	@ 0x368
 8001dde:	462b      	mov	r3, r5
 8001de0:	0099      	lsls	r1, r3, #2
 8001de2:	4623      	mov	r3, r4
 8001de4:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001de8:	4623      	mov	r3, r4
 8001dea:	0098      	lsls	r0, r3, #2
 8001dec:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	f7fe ff28 	bl	8000c48 <__aeabi_uldivmod>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001e00:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 8001e04:	f143 0300 	adc.w	r3, r3, #0
 8001e08:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001e0c:	4b3e      	ldr	r3, [pc, #248]	@ (8001f08 <Set_Random_Motion_Values+0xc94>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	461a      	mov	r2, r3
 8001e12:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001e16:	4413      	add	r3, r2
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f08 <Set_Random_Motion_Values+0xc94>)
 8001e1c:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z += -(100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8001e1e:	f007 f847 	bl	8008eb0 <rand>
 8001e22:	4603      	mov	r3, r0
 8001e24:	17da      	asrs	r2, r3, #31
 8001e26:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001e2a:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 8001e2e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001e32:	2200      	movs	r2, #0
 8001e34:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001e38:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8001e3c:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	@ 0x1c8
 8001e40:	462b      	mov	r3, r5
 8001e42:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 8001e46:	4642      	mov	r2, r8
 8001e48:	fb02 f203 	mul.w	r2, r2, r3
 8001e4c:	464b      	mov	r3, r9
 8001e4e:	4621      	mov	r1, r4
 8001e50:	fb01 f303 	mul.w	r3, r1, r3
 8001e54:	4413      	add	r3, r2
 8001e56:	4622      	mov	r2, r4
 8001e58:	4641      	mov	r1, r8
 8001e5a:	fba2 1201 	umull	r1, r2, r2, r1
 8001e5e:	f8c7 2364 	str.w	r2, [r7, #868]	@ 0x364
 8001e62:	460a      	mov	r2, r1
 8001e64:	f8c7 2360 	str.w	r2, [r7, #864]	@ 0x360
 8001e68:	f8d7 2364 	ldr.w	r2, [r7, #868]	@ 0x364
 8001e6c:	4413      	add	r3, r2
 8001e6e:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 8001e72:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	@ 0x360
 8001e76:	4622      	mov	r2, r4
 8001e78:	462b      	mov	r3, r5
 8001e7a:	1891      	adds	r1, r2, r2
 8001e7c:	6239      	str	r1, [r7, #32]
 8001e7e:	415b      	adcs	r3, r3
 8001e80:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e86:	4621      	mov	r1, r4
 8001e88:	1851      	adds	r1, r2, r1
 8001e8a:	61b9      	str	r1, [r7, #24]
 8001e8c:	4629      	mov	r1, r5
 8001e8e:	eb43 0101 	adc.w	r1, r3, r1
 8001e92:	61f9      	str	r1, [r7, #28]
 8001e94:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	18db      	adds	r3, r3, r3
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	eb42 0303 	adc.w	r3, r2, r3
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	4621      	mov	r1, r4
 8001eae:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	f7fe fec7 	bl	8000c48 <__aeabi_uldivmod>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 8001ec2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec6:	1a80      	subs	r0, r0, r2
 8001ec8:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
 8001ecc:	eb61 0303 	sbc.w	r3, r1, r3
 8001ed0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f08 <Set_Random_Motion_Values+0xc94>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001ede:	4413      	add	r3, r2
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4b09      	ldr	r3, [pc, #36]	@ (8001f08 <Set_Random_Motion_Values+0xc94>)
 8001ee4:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X += -(3  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001ee6:	f006 ffe3 	bl	8008eb0 <rand>
 8001eea:	4603      	mov	r3, r0
 8001eec:	17da      	asrs	r2, r3, #31
 8001eee:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8001ef2:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001ef6:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001efa:	2200      	movs	r2, #0
 8001efc:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8001f00:	e004      	b.n	8001f0c <Set_Random_Motion_Values+0xc98>
 8001f02:	bf00      	nop
 8001f04:	2000024c 	.word	0x2000024c
 8001f08:	20000258 	.word	0x20000258
 8001f0c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8001f10:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	@ 0x1b8
 8001f14:	462b      	mov	r3, r5
 8001f16:	e9d7 896c 	ldrd	r8, r9, [r7, #432]	@ 0x1b0
 8001f1a:	4642      	mov	r2, r8
 8001f1c:	fb02 f203 	mul.w	r2, r2, r3
 8001f20:	464b      	mov	r3, r9
 8001f22:	4621      	mov	r1, r4
 8001f24:	fb01 f303 	mul.w	r3, r1, r3
 8001f28:	4413      	add	r3, r2
 8001f2a:	4622      	mov	r2, r4
 8001f2c:	4641      	mov	r1, r8
 8001f2e:	fba2 1201 	umull	r1, r2, r2, r1
 8001f32:	f8c7 235c 	str.w	r2, [r7, #860]	@ 0x35c
 8001f36:	460a      	mov	r2, r1
 8001f38:	f8c7 2358 	str.w	r2, [r7, #856]	@ 0x358
 8001f3c:	f8d7 235c 	ldr.w	r2, [r7, #860]	@ 0x35c
 8001f40:	4413      	add	r3, r2
 8001f42:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
 8001f46:	e9d7 45d6 	ldrd	r4, r5, [r7, #856]	@ 0x358
 8001f4a:	4622      	mov	r2, r4
 8001f4c:	462b      	mov	r3, r5
 8001f4e:	f04f 0000 	mov.w	r0, #0
 8001f52:	f04f 0100 	mov.w	r1, #0
 8001f56:	00d9      	lsls	r1, r3, #3
 8001f58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f5c:	00d0      	lsls	r0, r2, #3
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4621      	mov	r1, r4
 8001f64:	1a51      	subs	r1, r2, r1
 8001f66:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
 8001f6a:	4629      	mov	r1, r5
 8001f6c:	eb63 0301 	sbc.w	r3, r3, r1
 8001f70:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8001f74:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001f78:	f04f 0300 	mov.w	r3, #0
 8001f7c:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 8001f80:	f7fe fe62 	bl	8000c48 <__aeabi_uldivmod>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	f06f 0002 	mvn.w	r0, #2
 8001f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f90:	1a80      	subs	r0, r0, r2
 8001f92:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
 8001f96:	eb61 0303 	sbc.w	r3, r1, r3
 8001f9a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001f9e:	4bea      	ldr	r3, [pc, #936]	@ (8002348 <Set_Random_Motion_Values+0x10d4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001fa8:	4413      	add	r3, r2
 8001faa:	461a      	mov	r2, r3
 8001fac:	4be6      	ldr	r3, [pc, #920]	@ (8002348 <Set_Random_Motion_Values+0x10d4>)
 8001fae:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y +=  (3  + ((uint64_t)rand()*9*cnt)/RAND_MAX);
 8001fb0:	f006 ff7e 	bl	8008eb0 <rand>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	17da      	asrs	r2, r3, #31
 8001fb8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001fbc:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 8001fc0:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8001fca:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001fce:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	@ 0x1a0
 8001fd2:	462b      	mov	r3, r5
 8001fd4:	e9d7 8966 	ldrd	r8, r9, [r7, #408]	@ 0x198
 8001fd8:	4642      	mov	r2, r8
 8001fda:	fb02 f203 	mul.w	r2, r2, r3
 8001fde:	464b      	mov	r3, r9
 8001fe0:	4621      	mov	r1, r4
 8001fe2:	fb01 f303 	mul.w	r3, r1, r3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	4622      	mov	r2, r4
 8001fea:	4641      	mov	r1, r8
 8001fec:	fba2 1201 	umull	r1, r2, r2, r1
 8001ff0:	f8c7 2354 	str.w	r2, [r7, #852]	@ 0x354
 8001ff4:	460a      	mov	r2, r1
 8001ff6:	f8c7 2350 	str.w	r2, [r7, #848]	@ 0x350
 8001ffa:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 8001ffe:	4413      	add	r3, r2
 8002000:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8002004:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	@ 0x350
 8002008:	4622      	mov	r2, r4
 800200a:	462b      	mov	r3, r5
 800200c:	f04f 0000 	mov.w	r0, #0
 8002010:	f04f 0100 	mov.w	r1, #0
 8002014:	00d9      	lsls	r1, r3, #3
 8002016:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800201a:	00d0      	lsls	r0, r2, #3
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4621      	mov	r1, r4
 8002022:	1851      	adds	r1, r2, r1
 8002024:	f8c7 1190 	str.w	r1, [r7, #400]	@ 0x190
 8002028:	4629      	mov	r1, r5
 800202a:	eb43 0101 	adc.w	r1, r3, r1
 800202e:	f8c7 1194 	str.w	r1, [r7, #404]	@ 0x194
 8002032:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800203e:	f7fe fe03 	bl	8000c48 <__aeabi_uldivmod>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	1cd1      	adds	r1, r2, #3
 8002048:	f8c7 10f0 	str.w	r1, [r7, #240]	@ 0xf0
 800204c:	f143 0300 	adc.w	r3, r3, #0
 8002050:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002054:	4bbc      	ldr	r3, [pc, #752]	@ (8002348 <Set_Random_Motion_Values+0x10d4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	461a      	mov	r2, r3
 800205a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800205e:	4413      	add	r3, r2
 8002060:	461a      	mov	r2, r3
 8002062:	4bb9      	ldr	r3, [pc, #740]	@ (8002348 <Set_Random_Motion_Values+0x10d4>)
 8002064:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8002066:	f006 ff23 	bl	8008eb0 <rand>
 800206a:	4603      	mov	r3, r0
 800206c:	17da      	asrs	r2, r3, #31
 800206e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002072:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 8002076:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800207a:	2200      	movs	r2, #0
 800207c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002080:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8002084:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	@ 0x188
 8002088:	462b      	mov	r3, r5
 800208a:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	@ 0x180
 800208e:	4642      	mov	r2, r8
 8002090:	fb02 f203 	mul.w	r2, r2, r3
 8002094:	464b      	mov	r3, r9
 8002096:	4621      	mov	r1, r4
 8002098:	fb01 f303 	mul.w	r3, r1, r3
 800209c:	4413      	add	r3, r2
 800209e:	4622      	mov	r2, r4
 80020a0:	4641      	mov	r1, r8
 80020a2:	fba2 1201 	umull	r1, r2, r2, r1
 80020a6:	f8c7 234c 	str.w	r2, [r7, #844]	@ 0x34c
 80020aa:	460a      	mov	r2, r1
 80020ac:	f8c7 2348 	str.w	r2, [r7, #840]	@ 0x348
 80020b0:	f8d7 234c 	ldr.w	r2, [r7, #844]	@ 0x34c
 80020b4:	4413      	add	r3, r2
 80020b6:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 80020ba:	e9d7 45d2 	ldrd	r4, r5, [r7, #840]	@ 0x348
 80020be:	4622      	mov	r2, r4
 80020c0:	462b      	mov	r3, r5
 80020c2:	1891      	adds	r1, r2, r2
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	415b      	adcs	r3, r3
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020ce:	4621      	mov	r1, r4
 80020d0:	1851      	adds	r1, r2, r1
 80020d2:	f8c7 1178 	str.w	r1, [r7, #376]	@ 0x178
 80020d6:	4629      	mov	r1, r5
 80020d8:	eb43 0101 	adc.w	r1, r3, r1
 80020dc:	f8c7 117c 	str.w	r1, [r7, #380]	@ 0x17c
 80020e0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 80020ec:	f7fe fdac 	bl	8000c48 <__aeabi_uldivmod>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	f06f 0002 	mvn.w	r0, #2
 80020f8:	f04f 31ff 	mov.w	r1, #4294967295
 80020fc:	1a80      	subs	r0, r0, r2
 80020fe:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
 8002102:	eb61 0303 	sbc.w	r3, r1, r3
 8002106:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800210a:	4b8f      	ldr	r3, [pc, #572]	@ (8002348 <Set_Random_Motion_Values+0x10d4>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	461a      	mov	r2, r3
 8002110:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002114:	4413      	add	r3, r2
 8002116:	461a      	mov	r2, r3
 8002118:	4b8b      	ldr	r3, [pc, #556]	@ (8002348 <Set_Random_Motion_Values+0x10d4>)
 800211a:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 800211c:	f006 fec8 	bl	8008eb0 <rand>
 8002120:	4603      	mov	r3, r0
 8002122:	17da      	asrs	r2, r3, #31
 8002124:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8002128:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 800212c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8002130:	2200      	movs	r2, #0
 8002132:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8002136:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 800213a:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	@ 0x170
 800213e:	462b      	mov	r3, r5
 8002140:	e9d7 895a 	ldrd	r8, r9, [r7, #360]	@ 0x168
 8002144:	4642      	mov	r2, r8
 8002146:	fb02 f203 	mul.w	r2, r2, r3
 800214a:	464b      	mov	r3, r9
 800214c:	4621      	mov	r1, r4
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	4413      	add	r3, r2
 8002154:	4622      	mov	r2, r4
 8002156:	4641      	mov	r1, r8
 8002158:	fba2 1201 	umull	r1, r2, r2, r1
 800215c:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 8002160:	460a      	mov	r2, r1
 8002162:	f8c7 2340 	str.w	r2, [r7, #832]	@ 0x340
 8002166:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 800216a:	4413      	add	r3, r2
 800216c:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 8002170:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	@ 0x340
 8002174:	4622      	mov	r2, r4
 8002176:	462b      	mov	r3, r5
 8002178:	f04f 0000 	mov.w	r0, #0
 800217c:	f04f 0100 	mov.w	r1, #0
 8002180:	00d9      	lsls	r1, r3, #3
 8002182:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002186:	00d0      	lsls	r0, r2, #3
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4621      	mov	r1, r4
 800218e:	1a51      	subs	r1, r2, r1
 8002190:	f8c7 1160 	str.w	r1, [r7, #352]	@ 0x160
 8002194:	4629      	mov	r1, r5
 8002196:	eb63 0301 	sbc.w	r3, r3, r1
 800219a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 800219e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 80021aa:	f7fe fd4d 	bl	8000c48 <__aeabi_uldivmod>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	f112 01c8 	adds.w	r1, r2, #200	@ 0xc8
 80021b6:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 80021ba:	f143 0300 	adc.w	r3, r3, #0
 80021be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80021c2:	4b62      	ldr	r3, [pc, #392]	@ (800234c <Set_Random_Motion_Values+0x10d8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021cc:	4413      	add	r3, r2
 80021ce:	461a      	mov	r2, r3
 80021d0:	4b5e      	ldr	r3, [pc, #376]	@ (800234c <Set_Random_Motion_Values+0x10d8>)
 80021d2:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80021d4:	f006 fe6c 	bl	8008eb0 <rand>
 80021d8:	4603      	mov	r3, r0
 80021da:	17da      	asrs	r2, r3, #31
 80021dc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80021e0:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 80021e4:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80021e8:	2200      	movs	r2, #0
 80021ea:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80021ee:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 80021f2:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 80021f6:	462b      	mov	r3, r5
 80021f8:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	@ 0x150
 80021fc:	4642      	mov	r2, r8
 80021fe:	fb02 f203 	mul.w	r2, r2, r3
 8002202:	464b      	mov	r3, r9
 8002204:	4621      	mov	r1, r4
 8002206:	fb01 f303 	mul.w	r3, r1, r3
 800220a:	4413      	add	r3, r2
 800220c:	4622      	mov	r2, r4
 800220e:	4641      	mov	r1, r8
 8002210:	fba2 1201 	umull	r1, r2, r2, r1
 8002214:	f8c7 233c 	str.w	r2, [r7, #828]	@ 0x33c
 8002218:	460a      	mov	r2, r1
 800221a:	f8c7 2338 	str.w	r2, [r7, #824]	@ 0x338
 800221e:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8002222:	4413      	add	r3, r2
 8002224:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8002228:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	@ 0x338
 800222c:	4622      	mov	r2, r4
 800222e:	462b      	mov	r3, r5
 8002230:	1891      	adds	r1, r2, r2
 8002232:	6039      	str	r1, [r7, #0]
 8002234:	415b      	adcs	r3, r3
 8002236:	607b      	str	r3, [r7, #4]
 8002238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800223c:	4621      	mov	r1, r4
 800223e:	1851      	adds	r1, r2, r1
 8002240:	f8c7 1148 	str.w	r1, [r7, #328]	@ 0x148
 8002244:	4629      	mov	r1, r5
 8002246:	eb43 0101 	adc.w	r1, r3, r1
 800224a:	f8c7 114c 	str.w	r1, [r7, #332]	@ 0x14c
 800224e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002252:	f04f 0300 	mov.w	r3, #0
 8002256:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800225a:	f7fe fcf5 	bl	8000c48 <__aeabi_uldivmod>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	f112 0196 	adds.w	r1, r2, #150	@ 0x96
 8002266:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 800226a:	f143 0300 	adc.w	r3, r3, #0
 800226e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002272:	4b36      	ldr	r3, [pc, #216]	@ (800234c <Set_Random_Motion_Values+0x10d8>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	461a      	mov	r2, r3
 8002278:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	461a      	mov	r2, r3
 8002280:	4b32      	ldr	r3, [pc, #200]	@ (800234c <Set_Random_Motion_Values+0x10d8>)
 8002282:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8002284:	f006 fe14 	bl	8008eb0 <rand>
 8002288:	4603      	mov	r3, r0
 800228a:	17da      	asrs	r2, r3, #31
 800228c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8002290:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 8002294:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8002298:	2200      	movs	r2, #0
 800229a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800229e:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 80022a2:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 80022a6:	462b      	mov	r3, r5
 80022a8:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 80022ac:	4642      	mov	r2, r8
 80022ae:	fb02 f203 	mul.w	r2, r2, r3
 80022b2:	464b      	mov	r3, r9
 80022b4:	4621      	mov	r1, r4
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	4622      	mov	r2, r4
 80022be:	4641      	mov	r1, r8
 80022c0:	fba2 1201 	umull	r1, r2, r2, r1
 80022c4:	f8c7 2334 	str.w	r2, [r7, #820]	@ 0x334
 80022c8:	460a      	mov	r2, r1
 80022ca:	f8c7 2330 	str.w	r2, [r7, #816]	@ 0x330
 80022ce:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 80022d2:	4413      	add	r3, r2
 80022d4:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 80022d8:	e9d7 45cc 	ldrd	r4, r5, [r7, #816]	@ 0x330
 80022dc:	4622      	mov	r2, r4
 80022de:	462b      	mov	r3, r5
 80022e0:	f04f 0000 	mov.w	r0, #0
 80022e4:	f04f 0100 	mov.w	r1, #0
 80022e8:	0099      	lsls	r1, r3, #2
 80022ea:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80022ee:	0090      	lsls	r0, r2, #2
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4621      	mov	r1, r4
 80022f6:	1851      	adds	r1, r2, r1
 80022f8:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 80022fc:	4629      	mov	r1, r5
 80022fe:	eb43 0101 	adc.w	r1, r3, r1
 8002302:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8002306:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 8002312:	f7fe fc99 	bl	8000c48 <__aeabi_uldivmod>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	f112 010a 	adds.w	r1, r2, #10
 800231e:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8002322:	f143 0300 	adc.w	r3, r3, #0
 8002326:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800232a:	4b08      	ldr	r3, [pc, #32]	@ (800234c <Set_Random_Motion_Values+0x10d8>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	461a      	mov	r2, r3
 8002330:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002334:	4413      	add	r3, r2
 8002336:	461a      	mov	r2, r3
 8002338:	4b04      	ldr	r3, [pc, #16]	@ (800234c <Set_Random_Motion_Values+0x10d8>)
 800233a:	609a      	str	r2, [r3, #8]
}
 800233c:	bf00      	nop
 800233e:	f507 777a 	add.w	r7, r7, #1000	@ 0x3e8
 8002342:	46bd      	mov	sp, r7
 8002344:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002348:	20000264 	.word	0x20000264
 800234c:	20000270 	.word	0x20000270

08002350 <Reset_Motion_Values>:
 * @brief  Reset values for all motion sensor data
 * @param  None
 * @retval None
 */
static void Reset_Motion_Values(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 8002354:	4b6e      	ldr	r3, [pc, #440]	@ (8002510 <Reset_Motion_Values+0x1c0>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4b6e      	ldr	r3, [pc, #440]	@ (8002514 <Reset_Motion_Values+0x1c4>)
 800235a:	fb83 1302 	smull	r1, r3, r3, r2
 800235e:	11d9      	asrs	r1, r3, #7
 8002360:	17d3      	asrs	r3, r2, #31
 8002362:	1acb      	subs	r3, r1, r3
 8002364:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002368:	fb01 f303 	mul.w	r3, r1, r3
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d103      	bne.n	800237a <Reset_Motion_Values+0x2a>
 8002372:	4b67      	ldr	r3, [pc, #412]	@ (8002510 <Reset_Motion_Values+0x1c0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	425b      	negs	r3, r3
 8002378:	e000      	b.n	800237c <Reset_Motion_Values+0x2c>
 800237a:	230a      	movs	r3, #10
 800237c:	4a64      	ldr	r2, [pc, #400]	@ (8002510 <Reset_Motion_Values+0x1c0>)
 800237e:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 8002380:	4b63      	ldr	r3, [pc, #396]	@ (8002510 <Reset_Motion_Values+0x1c0>)
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	4b63      	ldr	r3, [pc, #396]	@ (8002514 <Reset_Motion_Values+0x1c4>)
 8002386:	fb83 1302 	smull	r1, r3, r3, r2
 800238a:	11d9      	asrs	r1, r3, #7
 800238c:	17d3      	asrs	r3, r2, #31
 800238e:	1acb      	subs	r3, r1, r3
 8002390:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d103      	bne.n	80023a6 <Reset_Motion_Values+0x56>
 800239e:	4b5c      	ldr	r3, [pc, #368]	@ (8002510 <Reset_Motion_Values+0x1c0>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	425b      	negs	r3, r3
 80023a4:	e001      	b.n	80023aa <Reset_Motion_Values+0x5a>
 80023a6:	f06f 0309 	mvn.w	r3, #9
 80023aa:	4a59      	ldr	r2, [pc, #356]	@ (8002510 <Reset_Motion_Values+0x1c0>)
 80023ac:	6053      	str	r3, [r2, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 80023ae:	4b58      	ldr	r3, [pc, #352]	@ (8002510 <Reset_Motion_Values+0x1c0>)
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	4b58      	ldr	r3, [pc, #352]	@ (8002514 <Reset_Motion_Values+0x1c4>)
 80023b4:	fb83 1302 	smull	r1, r3, r3, r2
 80023b8:	11d9      	asrs	r1, r3, #7
 80023ba:	17d3      	asrs	r3, r2, #31
 80023bc:	1acb      	subs	r3, r1, r3
 80023be:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80023c2:	fb01 f303 	mul.w	r3, r1, r3
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d103      	bne.n	80023d4 <Reset_Motion_Values+0x84>
 80023cc:	4b50      	ldr	r3, [pc, #320]	@ (8002510 <Reset_Motion_Values+0x1c0>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	425b      	negs	r3, r3
 80023d2:	e000      	b.n	80023d6 <Reset_Motion_Values+0x86>
 80023d4:	230a      	movs	r3, #10
 80023d6:	4a4e      	ldr	r2, [pc, #312]	@ (8002510 <Reset_Motion_Values+0x1c0>)
 80023d8:	6093      	str	r3, [r2, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 80023da:	4b4f      	ldr	r3, [pc, #316]	@ (8002518 <Reset_Motion_Values+0x1c8>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	4b4d      	ldr	r3, [pc, #308]	@ (8002514 <Reset_Motion_Values+0x1c4>)
 80023e0:	fb83 1302 	smull	r1, r3, r3, r2
 80023e4:	11d9      	asrs	r1, r3, #7
 80023e6:	17d3      	asrs	r3, r2, #31
 80023e8:	1acb      	subs	r3, r1, r3
 80023ea:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d103      	bne.n	8002400 <Reset_Motion_Values+0xb0>
 80023f8:	4b47      	ldr	r3, [pc, #284]	@ (8002518 <Reset_Motion_Values+0x1c8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	425b      	negs	r3, r3
 80023fe:	e000      	b.n	8002402 <Reset_Motion_Values+0xb2>
 8002400:	2364      	movs	r3, #100	@ 0x64
 8002402:	4a45      	ldr	r2, [pc, #276]	@ (8002518 <Reset_Motion_Values+0x1c8>)
 8002404:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 8002406:	4b44      	ldr	r3, [pc, #272]	@ (8002518 <Reset_Motion_Values+0x1c8>)
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	4b42      	ldr	r3, [pc, #264]	@ (8002514 <Reset_Motion_Values+0x1c4>)
 800240c:	fb83 1302 	smull	r1, r3, r3, r2
 8002410:	11d9      	asrs	r1, r3, #7
 8002412:	17d3      	asrs	r3, r2, #31
 8002414:	1acb      	subs	r3, r1, r3
 8002416:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800241a:	fb01 f303 	mul.w	r3, r1, r3
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d103      	bne.n	800242c <Reset_Motion_Values+0xdc>
 8002424:	4b3c      	ldr	r3, [pc, #240]	@ (8002518 <Reset_Motion_Values+0x1c8>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	425b      	negs	r3, r3
 800242a:	e001      	b.n	8002430 <Reset_Motion_Values+0xe0>
 800242c:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8002430:	4a39      	ldr	r2, [pc, #228]	@ (8002518 <Reset_Motion_Values+0x1c8>)
 8002432:	6053      	str	r3, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 8002434:	4b38      	ldr	r3, [pc, #224]	@ (8002518 <Reset_Motion_Values+0x1c8>)
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	4b36      	ldr	r3, [pc, #216]	@ (8002514 <Reset_Motion_Values+0x1c4>)
 800243a:	fb83 1302 	smull	r1, r3, r3, r2
 800243e:	11d9      	asrs	r1, r3, #7
 8002440:	17d3      	asrs	r3, r2, #31
 8002442:	1acb      	subs	r3, r1, r3
 8002444:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002448:	fb01 f303 	mul.w	r3, r1, r3
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d103      	bne.n	800245a <Reset_Motion_Values+0x10a>
 8002452:	4b31      	ldr	r3, [pc, #196]	@ (8002518 <Reset_Motion_Values+0x1c8>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	425b      	negs	r3, r3
 8002458:	e000      	b.n	800245c <Reset_Motion_Values+0x10c>
 800245a:	2364      	movs	r3, #100	@ 0x64
 800245c:	4a2e      	ldr	r2, [pc, #184]	@ (8002518 <Reset_Motion_Values+0x1c8>)
 800245e:	6093      	str	r3, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 8002460:	4b2d      	ldr	r3, [pc, #180]	@ (8002518 <Reset_Motion_Values+0x1c8>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4b2b      	ldr	r3, [pc, #172]	@ (8002514 <Reset_Motion_Values+0x1c4>)
 8002466:	fb83 1302 	smull	r1, r3, r3, r2
 800246a:	11d9      	asrs	r1, r3, #7
 800246c:	17d3      	asrs	r3, r2, #31
 800246e:	1acb      	subs	r3, r1, r3
 8002470:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002474:	fb01 f303 	mul.w	r3, r1, r3
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d103      	bne.n	8002486 <Reset_Motion_Values+0x136>
 800247e:	4b27      	ldr	r3, [pc, #156]	@ (800251c <Reset_Motion_Values+0x1cc>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	425b      	negs	r3, r3
 8002484:	e000      	b.n	8002488 <Reset_Motion_Values+0x138>
 8002486:	2303      	movs	r3, #3
 8002488:	4a24      	ldr	r2, [pc, #144]	@ (800251c <Reset_Motion_Values+0x1cc>)
 800248a:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 800248c:	4b22      	ldr	r3, [pc, #136]	@ (8002518 <Reset_Motion_Values+0x1c8>)
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	4b20      	ldr	r3, [pc, #128]	@ (8002514 <Reset_Motion_Values+0x1c4>)
 8002492:	fb83 1302 	smull	r1, r3, r3, r2
 8002496:	11d9      	asrs	r1, r3, #7
 8002498:	17d3      	asrs	r3, r2, #31
 800249a:	1acb      	subs	r3, r1, r3
 800249c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d103      	bne.n	80024b2 <Reset_Motion_Values+0x162>
 80024aa:	4b1c      	ldr	r3, [pc, #112]	@ (800251c <Reset_Motion_Values+0x1cc>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	425b      	negs	r3, r3
 80024b0:	e001      	b.n	80024b6 <Reset_Motion_Values+0x166>
 80024b2:	f06f 0302 	mvn.w	r3, #2
 80024b6:	4a19      	ldr	r2, [pc, #100]	@ (800251c <Reset_Motion_Values+0x1cc>)
 80024b8:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 80024ba:	4b17      	ldr	r3, [pc, #92]	@ (8002518 <Reset_Motion_Values+0x1c8>)
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	4b15      	ldr	r3, [pc, #84]	@ (8002514 <Reset_Motion_Values+0x1c4>)
 80024c0:	fb83 1302 	smull	r1, r3, r3, r2
 80024c4:	11d9      	asrs	r1, r3, #7
 80024c6:	17d3      	asrs	r3, r2, #31
 80024c8:	1acb      	subs	r3, r1, r3
 80024ca:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80024ce:	fb01 f303 	mul.w	r3, r1, r3
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d103      	bne.n	80024e0 <Reset_Motion_Values+0x190>
 80024d8:	4b10      	ldr	r3, [pc, #64]	@ (800251c <Reset_Motion_Values+0x1cc>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	425b      	negs	r3, r3
 80024de:	e000      	b.n	80024e2 <Reset_Motion_Values+0x192>
 80024e0:	2303      	movs	r3, #3
 80024e2:	4a0e      	ldr	r2, [pc, #56]	@ (800251c <Reset_Motion_Values+0x1cc>)
 80024e4:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 80024e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002520 <Reset_Motion_Values+0x1d0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	425b      	negs	r3, r3
 80024ec:	4a0c      	ldr	r2, [pc, #48]	@ (8002520 <Reset_Motion_Values+0x1d0>)
 80024ee:	6013      	str	r3, [r2, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 80024f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002520 <Reset_Motion_Values+0x1d0>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	425b      	negs	r3, r3
 80024f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002520 <Reset_Motion_Values+0x1d0>)
 80024f8:	6053      	str	r3, [r2, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 80024fa:	4b09      	ldr	r3, [pc, #36]	@ (8002520 <Reset_Motion_Values+0x1d0>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	425b      	negs	r3, r3
 8002500:	4a07      	ldr	r2, [pc, #28]	@ (8002520 <Reset_Motion_Values+0x1d0>)
 8002502:	6093      	str	r3, [r2, #8]
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	2000024c 	.word	0x2000024c
 8002514:	10624dd3 	.word	0x10624dd3
 8002518:	20000258 	.word	0x20000258
 800251c:	20000264 	.word	0x20000264
 8002520:	20000270 	.word	0x20000270

08002524 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 800252e:	4b04      	ldr	r3, [pc, #16]	@ (8002540 <BSP_PB_Callback+0x1c>)
 8002530:	2201      	movs	r2, #1
 8002532:	701a      	strb	r2, [r3, #0]
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	20000212 	.word	0x20000212

08002544 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 8002544:	b590      	push	{r4, r7, lr}
 8002546:	b08d      	sub	sp, #52	@ 0x34
 8002548:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];

  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 800254a:	231b      	movs	r3, #27
 800254c:	713b      	strb	r3, [r7, #4]
 800254e:	23c5      	movs	r3, #197	@ 0xc5
 8002550:	717b      	strb	r3, [r7, #5]
 8002552:	23d5      	movs	r3, #213	@ 0xd5
 8002554:	71bb      	strb	r3, [r7, #6]
 8002556:	23a5      	movs	r3, #165	@ 0xa5
 8002558:	71fb      	strb	r3, [r7, #7]
 800255a:	2302      	movs	r3, #2
 800255c:	723b      	strb	r3, [r7, #8]
 800255e:	2300      	movs	r3, #0
 8002560:	727b      	strb	r3, [r7, #9]
 8002562:	23b4      	movs	r3, #180	@ 0xb4
 8002564:	72bb      	strb	r3, [r7, #10]
 8002566:	239a      	movs	r3, #154	@ 0x9a
 8002568:	72fb      	strb	r3, [r7, #11]
 800256a:	23e1      	movs	r3, #225	@ 0xe1
 800256c:	733b      	strb	r3, [r7, #12]
 800256e:	2311      	movs	r3, #17
 8002570:	737b      	strb	r3, [r7, #13]
 8002572:	2301      	movs	r3, #1
 8002574:	73bb      	strb	r3, [r7, #14]
 8002576:	2300      	movs	r3, #0
 8002578:	73fb      	strb	r3, [r7, #15]
 800257a:	2300      	movs	r3, #0
 800257c:	743b      	strb	r3, [r7, #16]
 800257e:	2300      	movs	r3, #0
 8002580:	747b      	strb	r3, [r7, #17]
 8002582:	2300      	movs	r3, #0
 8002584:	74bb      	strb	r3, [r7, #18]
 8002586:	2300      	movs	r3, #0
 8002588:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800258a:	4b52      	ldr	r3, [pc, #328]	@ (80026d4 <Add_HWServW2ST_Service+0x190>)
 800258c:	461c      	mov	r4, r3
 800258e:	1d3b      	adds	r3, r7, #4
 8002590:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002592:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 8002596:	4b50      	ldr	r3, [pc, #320]	@ (80026d8 <Add_HWServW2ST_Service+0x194>)
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	2310      	movs	r3, #16
 800259c:	2201      	movs	r2, #1
 800259e:	494d      	ldr	r1, [pc, #308]	@ (80026d4 <Add_HWServW2ST_Service+0x190>)
 80025a0:	2002      	movs	r0, #2
 80025a2:	f005 fd2b 	bl	8007ffc <aci_gatt_add_serv>
 80025a6:	4603      	mov	r3, r0
 80025a8:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80025aa:	7dfb      	ldrb	r3, [r7, #23]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <Add_HWServW2ST_Service+0x70>
    return BLE_STATUS_ERROR;
 80025b0:	2347      	movs	r3, #71	@ 0x47
 80025b2:	e08a      	b.n	80026ca <Add_HWServW2ST_Service+0x186>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 80025b4:	231b      	movs	r3, #27
 80025b6:	713b      	strb	r3, [r7, #4]
 80025b8:	23c5      	movs	r3, #197	@ 0xc5
 80025ba:	717b      	strb	r3, [r7, #5]
 80025bc:	23d5      	movs	r3, #213	@ 0xd5
 80025be:	71bb      	strb	r3, [r7, #6]
 80025c0:	23a5      	movs	r3, #165	@ 0xa5
 80025c2:	71fb      	strb	r3, [r7, #7]
 80025c4:	2302      	movs	r3, #2
 80025c6:	723b      	strb	r3, [r7, #8]
 80025c8:	2300      	movs	r3, #0
 80025ca:	727b      	strb	r3, [r7, #9]
 80025cc:	2336      	movs	r3, #54	@ 0x36
 80025ce:	72bb      	strb	r3, [r7, #10]
 80025d0:	23ac      	movs	r3, #172	@ 0xac
 80025d2:	72fb      	strb	r3, [r7, #11]
 80025d4:	23e1      	movs	r3, #225	@ 0xe1
 80025d6:	733b      	strb	r3, [r7, #12]
 80025d8:	2311      	movs	r3, #17
 80025da:	737b      	strb	r3, [r7, #13]
 80025dc:	2301      	movs	r3, #1
 80025de:	73bb      	strb	r3, [r7, #14]
 80025e0:	2300      	movs	r3, #0
 80025e2:	73fb      	strb	r3, [r7, #15]
 80025e4:	2300      	movs	r3, #0
 80025e6:	743b      	strb	r3, [r7, #16]
 80025e8:	2300      	movs	r3, #0
 80025ea:	747b      	strb	r3, [r7, #17]
 80025ec:	2300      	movs	r3, #0
 80025ee:	74bb      	strb	r3, [r7, #18]
 80025f0:	2300      	movs	r3, #0
 80025f2:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 80025f4:	7cbb      	ldrb	r3, [r7, #18]
 80025f6:	f043 0304 	orr.w	r3, r3, #4
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 80025fe:	7cbb      	ldrb	r3, [r7, #18]
 8002600:	f043 0310 	orr.w	r3, r3, #16
 8002604:	b2db      	uxtb	r3, r3
 8002606:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002608:	4b34      	ldr	r3, [pc, #208]	@ (80026dc <Add_HWServW2ST_Service+0x198>)
 800260a:	461c      	mov	r4, r3
 800260c:	1d3b      	adds	r3, r7, #4
 800260e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002610:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8002614:	4b30      	ldr	r3, [pc, #192]	@ (80026d8 <Add_HWServW2ST_Service+0x194>)
 8002616:	8818      	ldrh	r0, [r3, #0]
 8002618:	4b31      	ldr	r3, [pc, #196]	@ (80026e0 <Add_HWServW2ST_Service+0x19c>)
 800261a:	9305      	str	r3, [sp, #20]
 800261c:	2300      	movs	r3, #0
 800261e:	9304      	str	r3, [sp, #16]
 8002620:	2310      	movs	r3, #16
 8002622:	9303      	str	r3, [sp, #12]
 8002624:	2304      	movs	r3, #4
 8002626:	9302      	str	r3, [sp, #8]
 8002628:	2300      	movs	r3, #0
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	2312      	movs	r3, #18
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	2308      	movs	r3, #8
 8002632:	4a2a      	ldr	r2, [pc, #168]	@ (80026dc <Add_HWServW2ST_Service+0x198>)
 8002634:	2102      	movs	r1, #2
 8002636:	f005 fd6a 	bl	800810e <aci_gatt_add_char>
 800263a:	4603      	mov	r3, r0
 800263c:	75fb      	strb	r3, [r7, #23]
                           2+2+4,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800263e:	7dfb      	ldrb	r3, [r7, #23]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <Add_HWServW2ST_Service+0x104>
    return BLE_STATUS_ERROR;
 8002644:	2347      	movs	r3, #71	@ 0x47
 8002646:	e040      	b.n	80026ca <Add_HWServW2ST_Service+0x186>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8002648:	231b      	movs	r3, #27
 800264a:	713b      	strb	r3, [r7, #4]
 800264c:	23c5      	movs	r3, #197	@ 0xc5
 800264e:	717b      	strb	r3, [r7, #5]
 8002650:	23d5      	movs	r3, #213	@ 0xd5
 8002652:	71bb      	strb	r3, [r7, #6]
 8002654:	23a5      	movs	r3, #165	@ 0xa5
 8002656:	71fb      	strb	r3, [r7, #7]
 8002658:	2302      	movs	r3, #2
 800265a:	723b      	strb	r3, [r7, #8]
 800265c:	2300      	movs	r3, #0
 800265e:	727b      	strb	r3, [r7, #9]
 8002660:	2336      	movs	r3, #54	@ 0x36
 8002662:	72bb      	strb	r3, [r7, #10]
 8002664:	23ac      	movs	r3, #172	@ 0xac
 8002666:	72fb      	strb	r3, [r7, #11]
 8002668:	23e1      	movs	r3, #225	@ 0xe1
 800266a:	733b      	strb	r3, [r7, #12]
 800266c:	2311      	movs	r3, #17
 800266e:	737b      	strb	r3, [r7, #13]
 8002670:	2301      	movs	r3, #1
 8002672:	73bb      	strb	r3, [r7, #14]
 8002674:	2300      	movs	r3, #0
 8002676:	73fb      	strb	r3, [r7, #15]
 8002678:	2300      	movs	r3, #0
 800267a:	743b      	strb	r3, [r7, #16]
 800267c:	2300      	movs	r3, #0
 800267e:	747b      	strb	r3, [r7, #17]
 8002680:	23e0      	movs	r3, #224	@ 0xe0
 8002682:	74bb      	strb	r3, [r7, #18]
 8002684:	2300      	movs	r3, #0
 8002686:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002688:	4b14      	ldr	r3, [pc, #80]	@ (80026dc <Add_HWServW2ST_Service+0x198>)
 800268a:	461c      	mov	r4, r3
 800268c:	1d3b      	adds	r3, r7, #4
 800268e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002690:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8002694:	4b10      	ldr	r3, [pc, #64]	@ (80026d8 <Add_HWServW2ST_Service+0x194>)
 8002696:	8818      	ldrh	r0, [r3, #0]
 8002698:	4b12      	ldr	r3, [pc, #72]	@ (80026e4 <Add_HWServW2ST_Service+0x1a0>)
 800269a:	9305      	str	r3, [sp, #20]
 800269c:	2300      	movs	r3, #0
 800269e:	9304      	str	r3, [sp, #16]
 80026a0:	2310      	movs	r3, #16
 80026a2:	9303      	str	r3, [sp, #12]
 80026a4:	2304      	movs	r3, #4
 80026a6:	9302      	str	r3, [sp, #8]
 80026a8:	2300      	movs	r3, #0
 80026aa:	9301      	str	r3, [sp, #4]
 80026ac:	2310      	movs	r3, #16
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	2314      	movs	r3, #20
 80026b2:	4a0a      	ldr	r2, [pc, #40]	@ (80026dc <Add_HWServW2ST_Service+0x198>)
 80026b4:	2102      	movs	r1, #2
 80026b6:	f005 fd2a 	bl	800810e <aci_gatt_add_char>
 80026ba:	4603      	mov	r3, r0
 80026bc:	75fb      	strb	r3, [r7, #23]
                           2+3*3*2,
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80026be:	7dfb      	ldrb	r3, [r7, #23]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <Add_HWServW2ST_Service+0x184>
    return BLE_STATUS_ERROR;
 80026c4:	2347      	movs	r3, #71	@ 0x47
 80026c6:	e000      	b.n	80026ca <Add_HWServW2ST_Service+0x186>

  return BLE_STATUS_SUCCESS;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	371c      	adds	r7, #28
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd90      	pop	{r4, r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000224 	.word	0x20000224
 80026d8:	20000218 	.word	0x20000218
 80026dc:	20000234 	.word	0x20000234
 80026e0:	2000021a 	.word	0x2000021a
 80026e4:	2000021c 	.word	0x2000021c

080026e8 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 80026e8:	b590      	push	{r4, r7, lr}
 80026ea:	b08d      	sub	sp, #52	@ 0x34
 80026ec:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberOfRecords=1;
 80026ee:	2301      	movs	r3, #1
 80026f0:	617b      	str	r3, [r7, #20]
  uint8_t uuid[16];

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 80026f2:	231b      	movs	r3, #27
 80026f4:	703b      	strb	r3, [r7, #0]
 80026f6:	23c5      	movs	r3, #197	@ 0xc5
 80026f8:	707b      	strb	r3, [r7, #1]
 80026fa:	23d5      	movs	r3, #213	@ 0xd5
 80026fc:	70bb      	strb	r3, [r7, #2]
 80026fe:	23a5      	movs	r3, #165	@ 0xa5
 8002700:	70fb      	strb	r3, [r7, #3]
 8002702:	2302      	movs	r3, #2
 8002704:	713b      	strb	r3, [r7, #4]
 8002706:	2300      	movs	r3, #0
 8002708:	717b      	strb	r3, [r7, #5]
 800270a:	23b4      	movs	r3, #180	@ 0xb4
 800270c:	71bb      	strb	r3, [r7, #6]
 800270e:	239a      	movs	r3, #154	@ 0x9a
 8002710:	71fb      	strb	r3, [r7, #7]
 8002712:	23e1      	movs	r3, #225	@ 0xe1
 8002714:	723b      	strb	r3, [r7, #8]
 8002716:	2311      	movs	r3, #17
 8002718:	727b      	strb	r3, [r7, #9]
 800271a:	2302      	movs	r3, #2
 800271c:	72bb      	strb	r3, [r7, #10]
 800271e:	2300      	movs	r3, #0
 8002720:	72fb      	strb	r3, [r7, #11]
 8002722:	2300      	movs	r3, #0
 8002724:	733b      	strb	r3, [r7, #12]
 8002726:	2300      	movs	r3, #0
 8002728:	737b      	strb	r3, [r7, #13]
 800272a:	2300      	movs	r3, #0
 800272c:	73bb      	strb	r3, [r7, #14]
 800272e:	2300      	movs	r3, #0
 8002730:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8002732:	4b31      	ldr	r3, [pc, #196]	@ (80027f8 <Add_SWServW2ST_Service+0x110>)
 8002734:	461c      	mov	r4, r3
 8002736:	463b      	mov	r3, r7
 8002738:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800273a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	461a      	mov	r2, r3
 8002744:	0052      	lsls	r2, r2, #1
 8002746:	4413      	add	r3, r2
 8002748:	b2db      	uxtb	r3, r3
 800274a:	3301      	adds	r3, #1
 800274c:	b2db      	uxtb	r3, r3
 800274e:	4a2b      	ldr	r2, [pc, #172]	@ (80027fc <Add_SWServW2ST_Service+0x114>)
 8002750:	9200      	str	r2, [sp, #0]
 8002752:	2201      	movs	r2, #1
 8002754:	4928      	ldr	r1, [pc, #160]	@ (80027f8 <Add_SWServW2ST_Service+0x110>)
 8002756:	2002      	movs	r0, #2
 8002758:	f005 fc50 	bl	8007ffc <aci_gatt_add_serv>
 800275c:	4603      	mov	r3, r0
 800275e:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberOfRecords, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8002760:	7cfb      	ldrb	r3, [r7, #19]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d13f      	bne.n	80027e6 <Add_SWServW2ST_Service+0xfe>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 8002766:	231b      	movs	r3, #27
 8002768:	703b      	strb	r3, [r7, #0]
 800276a:	23c5      	movs	r3, #197	@ 0xc5
 800276c:	707b      	strb	r3, [r7, #1]
 800276e:	23d5      	movs	r3, #213	@ 0xd5
 8002770:	70bb      	strb	r3, [r7, #2]
 8002772:	23a5      	movs	r3, #165	@ 0xa5
 8002774:	70fb      	strb	r3, [r7, #3]
 8002776:	2302      	movs	r3, #2
 8002778:	713b      	strb	r3, [r7, #4]
 800277a:	2300      	movs	r3, #0
 800277c:	717b      	strb	r3, [r7, #5]
 800277e:	2336      	movs	r3, #54	@ 0x36
 8002780:	71bb      	strb	r3, [r7, #6]
 8002782:	23ac      	movs	r3, #172	@ 0xac
 8002784:	71fb      	strb	r3, [r7, #7]
 8002786:	23e1      	movs	r3, #225	@ 0xe1
 8002788:	723b      	strb	r3, [r7, #8]
 800278a:	2311      	movs	r3, #17
 800278c:	727b      	strb	r3, [r7, #9]
 800278e:	2301      	movs	r3, #1
 8002790:	72bb      	strb	r3, [r7, #10]
 8002792:	2300      	movs	r3, #0
 8002794:	72fb      	strb	r3, [r7, #11]
 8002796:	2300      	movs	r3, #0
 8002798:	733b      	strb	r3, [r7, #12]
 800279a:	2301      	movs	r3, #1
 800279c:	737b      	strb	r3, [r7, #13]
 800279e:	2300      	movs	r3, #0
 80027a0:	73bb      	strb	r3, [r7, #14]
 80027a2:	2300      	movs	r3, #0
 80027a4:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 80027a6:	4b16      	ldr	r3, [pc, #88]	@ (8002800 <Add_SWServW2ST_Service+0x118>)
 80027a8:	461c      	mov	r4, r3
 80027aa:	463b      	mov	r3, r7
 80027ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 80027b2:	4b12      	ldr	r3, [pc, #72]	@ (80027fc <Add_SWServW2ST_Service+0x114>)
 80027b4:	8818      	ldrh	r0, [r3, #0]
 80027b6:	4b13      	ldr	r3, [pc, #76]	@ (8002804 <Add_SWServW2ST_Service+0x11c>)
 80027b8:	9305      	str	r3, [sp, #20]
 80027ba:	2300      	movs	r3, #0
 80027bc:	9304      	str	r3, [sp, #16]
 80027be:	2310      	movs	r3, #16
 80027c0:	9303      	str	r3, [sp, #12]
 80027c2:	2304      	movs	r3, #4
 80027c4:	9302      	str	r3, [sp, #8]
 80027c6:	2300      	movs	r3, #0
 80027c8:	9301      	str	r3, [sp, #4]
 80027ca:	2310      	movs	r3, #16
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	2308      	movs	r3, #8
 80027d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002800 <Add_SWServW2ST_Service+0x118>)
 80027d2:	2102      	movs	r1, #2
 80027d4:	f005 fc9b 	bl	800810e <aci_gatt_add_char>
 80027d8:	4603      	mov	r3, r0
 80027da:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 80027dc:	7cfb      	ldrb	r3, [r7, #19]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d103      	bne.n	80027ea <Add_SWServW2ST_Service+0x102>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 80027e2:	2300      	movs	r3, #0
 80027e4:	e003      	b.n	80027ee <Add_SWServW2ST_Service+0x106>
    goto fail;
 80027e6:	bf00      	nop
 80027e8:	e000      	b.n	80027ec <Add_SWServW2ST_Service+0x104>
    goto fail;
 80027ea:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 80027ec:	2347      	movs	r3, #71	@ 0x47
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	371c      	adds	r7, #28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd90      	pop	{r4, r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000224 	.word	0x20000224
 80027fc:	2000021e 	.word	0x2000021e
 8002800:	20000234 	.word	0x20000234
 8002804:	20000220 	.word	0x20000220

08002808 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08c      	sub	sp, #48	@ 0x30
 800280c:	af02      	add	r7, sp, #8
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8002814:	f001 fcea 	bl	80041ec <HAL_GetTick>
 8002818:	4603      	mov	r3, r0
 800281a:	08db      	lsrs	r3, r3, #3
 800281c:	b2db      	uxtb	r3, r3
 800281e:	743b      	strb	r3, [r7, #16]
 8002820:	f001 fce4 	bl	80041ec <HAL_GetTick>
 8002824:	4603      	mov	r3, r0
 8002826:	0adb      	lsrs	r3, r3, #11
 8002828:	b2db      	uxtb	r3, r3
 800282a:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff+2,-x_axes->AXIS_Y);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	b2db      	uxtb	r3, r3
 8002832:	425b      	negs	r3, r3
 8002834:	b2db      	uxtb	r3, r3
 8002836:	74bb      	strb	r3, [r7, #18]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	425b      	negs	r3, r3
 800283e:	121b      	asrs	r3, r3, #8
 8002840:	b2db      	uxtb	r3, r3
 8002842:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4, x_axes->AXIS_X);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	753b      	strb	r3, [r7, #20]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	121b      	asrs	r3, r3, #8
 8002852:	b2db      	uxtb	r3, r3
 8002854:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6,-x_axes->AXIS_Z);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	b2db      	uxtb	r3, r3
 800285c:	425b      	negs	r3, r3
 800285e:	b2db      	uxtb	r3, r3
 8002860:	75bb      	strb	r3, [r7, #22]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	425b      	negs	r3, r3
 8002868:	121b      	asrs	r3, r3, #8
 800286a:	b2db      	uxtb	r3, r3
 800286c:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff+8,g_axes->AXIS_Y);
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	763b      	strb	r3, [r7, #24]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	121b      	asrs	r3, r3, #8
 800287c:	b2db      	uxtb	r3, r3
 800287e:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10,g_axes->AXIS_X);
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	76bb      	strb	r3, [r7, #26]
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	121b      	asrs	r3, r3, #8
 800288e:	b2db      	uxtb	r3, r3
 8002890:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	773b      	strb	r3, [r7, #28]
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	121b      	asrs	r3, r3, #8
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	77bb      	strb	r3, [r7, #30]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	121b      	asrs	r3, r3, #8
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	f887 3020 	strb.w	r3, [r7, #32]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	121b      	asrs	r3, r3, #8
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	121b      	asrs	r3, r3, #8
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 80028e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002914 <Acc_Update+0x10c>)
 80028e4:	8818      	ldrh	r0, [r3, #0]
 80028e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002918 <Acc_Update+0x110>)
 80028e8:	8819      	ldrh	r1, [r3, #0]
 80028ea:	f107 0310 	add.w	r3, r7, #16
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	2314      	movs	r3, #20
 80028f2:	2200      	movs	r2, #0
 80028f4:	f005 fcd6 	bl	80082a4 <aci_gatt_update_char_value>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 80028fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <Acc_Update+0x102>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8002906:	2347      	movs	r3, #71	@ 0x47
 8002908:	e000      	b.n	800290c <Acc_Update+0x104>
  }

  return BLE_STATUS_SUCCESS;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3728      	adds	r7, #40	@ 0x28
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000218 	.word	0x20000218
 8002918:	2000021c 	.word	0x2000021c

0800291c <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af02      	add	r7, sp, #8
 8002922:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8002924:	f001 fc62 	bl	80041ec <HAL_GetTick>
 8002928:	4603      	mov	r3, r0
 800292a:	08db      	lsrs	r3, r3, #3
 800292c:	b2db      	uxtb	r3, r3
 800292e:	733b      	strb	r3, [r7, #12]
 8002930:	f001 fc5c 	bl	80041ec <HAL_GetTick>
 8002934:	4603      	mov	r3, r0
 8002936:	0adb      	lsrs	r3, r3, #11
 8002938:	b2db      	uxtb	r3, r3
 800293a:	737b      	strb	r3, [r7, #13]

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	73bb      	strb	r3, [r7, #14]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	121b      	asrs	r3, r3, #8
 800294a:	b2db      	uxtb	r3, r3
 800294c:	73fb      	strb	r3, [r7, #15]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	b2db      	uxtb	r3, r3
 8002954:	743b      	strb	r3, [r7, #16]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	121b      	asrs	r3, r3, #8
 800295c:	b2db      	uxtb	r3, r3
 800295e:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	74bb      	strb	r3, [r7, #18]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	121b      	asrs	r3, r3, #8
 800296e:	b2db      	uxtb	r3, r3
 8002970:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif

  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 8002972:	4b0b      	ldr	r3, [pc, #44]	@ (80029a0 <Quat_Update+0x84>)
 8002974:	8818      	ldrh	r0, [r3, #0]
 8002976:	4b0b      	ldr	r3, [pc, #44]	@ (80029a4 <Quat_Update+0x88>)
 8002978:	8819      	ldrh	r1, [r3, #0]
 800297a:	f107 030c 	add.w	r3, r7, #12
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	2308      	movs	r3, #8
 8002982:	2200      	movs	r2, #0
 8002984:	f005 fc8e 	bl	80082a4 <aci_gatt_update_char_value>
 8002988:	4603      	mov	r3, r0
 800298a:	75fb      	strb	r3, [r7, #23]
				   0, 2+6*SEND_N_QUATERNIONS, buff);
  if (ret != BLE_STATUS_SUCCESS){
 800298c:	7dfb      	ldrb	r3, [r7, #23]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <Quat_Update+0x7a>
    PRINTF("Error while updating Sensor Fusion characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8002992:	2347      	movs	r3, #71	@ 0x47
 8002994:	e000      	b.n	8002998 <Quat_Update+0x7c>
  }

  return BLE_STATUS_SUCCESS;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	2000021e 	.word	0x2000021e
 80029a4:	20000220 	.word	0x20000220

080029a8 <Read_Request_CB>:
* Description    : Update the sensor values.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 80029a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029ac:	b08e      	sub	sp, #56	@ 0x38
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	4603      	mov	r3, r0
 80029b2:	84fb      	strh	r3, [r7, #38]	@ 0x26
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 80029b4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80029b6:	4b57      	ldr	r3, [pc, #348]	@ (8002b14 <Read_Request_CB+0x16c>)
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	3301      	adds	r3, #1
 80029bc:	429a      	cmp	r2, r3
 80029be:	d105      	bne.n	80029cc <Read_Request_CB+0x24>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 80029c0:	4a55      	ldr	r2, [pc, #340]	@ (8002b18 <Read_Request_CB+0x170>)
 80029c2:	4956      	ldr	r1, [pc, #344]	@ (8002b1c <Read_Request_CB+0x174>)
 80029c4:	4856      	ldr	r0, [pc, #344]	@ (8002b20 <Read_Request_CB+0x178>)
 80029c6:	f7ff ff1f 	bl	8002808 <Acc_Update>
 80029ca:	e091      	b.n	8002af0 <Read_Request_CB+0x148>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 80029cc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80029ce:	4b55      	ldr	r3, [pc, #340]	@ (8002b24 <Read_Request_CB+0x17c>)
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	3301      	adds	r3, #1
 80029d4:	429a      	cmp	r2, r3
 80029d6:	f040 808b 	bne.w	8002af0 <Read_Request_CB+0x148>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 80029da:	f006 fa69 	bl	8008eb0 <rand>
 80029de:	4603      	mov	r3, r0
 80029e0:	17da      	asrs	r2, r3, #31
 80029e2:	61bb      	str	r3, [r7, #24]
 80029e4:	61fa      	str	r2, [r7, #28]
 80029e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029ea:	f04f 0000 	mov.w	r0, #0
 80029ee:	f04f 0100 	mov.w	r1, #0
 80029f2:	0099      	lsls	r1, r3, #2
 80029f4:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80029f8:	0090      	lsls	r0, r2, #2
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	69b9      	ldr	r1, [r7, #24]
 8002a00:	1851      	adds	r1, r2, r1
 8002a02:	6139      	str	r1, [r7, #16]
 8002a04:	69f9      	ldr	r1, [r7, #28]
 8002a06:	eb43 0101 	adc.w	r1, r3, r1
 8002a0a:	6179      	str	r1, [r7, #20]
 8002a0c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a18:	f7fe f916 	bl	8000c48 <__aeabi_uldivmod>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4610      	mov	r0, r2
 8002a22:	4619      	mov	r1, r3
 8002a24:	f7fd fdb2 	bl	800058c <__aeabi_ul2d>
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	4b3e      	ldr	r3, [pc, #248]	@ (8002b28 <Read_Request_CB+0x180>)
 8002a2e:	f7fd fc2d 	bl	800028c <__adddf3>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4610      	mov	r0, r2
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f7fe f8b5 	bl	8000ba8 <__aeabi_d2f>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	637b      	str	r3, [r7, #52]	@ 0x34
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 8002a42:	f006 fa35 	bl	8008eb0 <rand>
 8002a46:	4603      	mov	r3, r0
 8002a48:	17da      	asrs	r2, r3, #31
 8002a4a:	4698      	mov	r8, r3
 8002a4c:	4691      	mov	r9, r2
 8002a4e:	4642      	mov	r2, r8
 8002a50:	464b      	mov	r3, r9
 8002a52:	1891      	adds	r1, r2, r2
 8002a54:	6039      	str	r1, [r7, #0]
 8002a56:	415b      	adcs	r3, r3
 8002a58:	607b      	str	r3, [r7, #4]
 8002a5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a5e:	eb12 0408 	adds.w	r4, r2, r8
 8002a62:	eb43 0509 	adc.w	r5, r3, r9
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	016b      	lsls	r3, r5, #5
 8002a70:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002a74:	0162      	lsls	r2, r4, #5
 8002a76:	eb14 0a02 	adds.w	sl, r4, r2
 8002a7a:	eb45 0b03 	adc.w	fp, r5, r3
 8002a7e:	eb1a 0308 	adds.w	r3, sl, r8
 8002a82:	60bb      	str	r3, [r7, #8]
 8002a84:	eb4b 0309 	adc.w	r3, fp, r9
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002a8e:	f04f 0300 	mov.w	r3, #0
 8002a92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a96:	f7fe f8d7 	bl	8000c48 <__aeabi_uldivmod>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	4610      	mov	r0, r2
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	f7fd fd73 	bl	800058c <__aeabi_ul2d>
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	4b20      	ldr	r3, [pc, #128]	@ (8002b2c <Read_Request_CB+0x184>)
 8002aac:	f7fd fbee 	bl	800028c <__adddf3>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	f7fe f876 	bl	8000ba8 <__aeabi_d2f>
 8002abc:	4603      	mov	r3, r0
 8002abe:	633b      	str	r3, [r7, #48]	@ 0x30
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8002ac0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002ac4:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002b30 <Read_Request_CB+0x188>
 8002ac8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002acc:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8002ad0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002ad4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002ad8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002adc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ae0:	ee17 3a90 	vmov	r3, s15
 8002ae4:	b21b      	sxth	r3, r3
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	ee16 0a90 	vmov	r0, s13
 8002aec:	f000 f824 	bl	8002b38 <BlueMS_Environmental_Update>
  }

  if(connection_handle !=0)
 8002af0:	4b10      	ldr	r3, [pc, #64]	@ (8002b34 <Read_Request_CB+0x18c>)
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d007      	beq.n	8002b08 <Read_Request_CB+0x160>
  {
    ret = aci_gatt_allow_read(connection_handle);
 8002af8:	4b0e      	ldr	r3, [pc, #56]	@ (8002b34 <Read_Request_CB+0x18c>)
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f005 fc61 	bl	80083c4 <aci_gatt_allow_read>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (ret != BLE_STATUS_SUCCESS)
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
    }
  }
}
 8002b08:	bf00      	nop
 8002b0a:	3738      	adds	r7, #56	@ 0x38
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b12:	bf00      	nop
 8002b14:	2000021c 	.word	0x2000021c
 8002b18:	20000264 	.word	0x20000264
 8002b1c:	20000258 	.word	0x20000258
 8002b20:	2000024c 	.word	0x2000024c
 8002b24:	2000021a 	.word	0x2000021a
 8002b28:	403b0000 	.word	0x403b0000
 8002b2c:	408f4000 	.word	0x408f4000
 8002b30:	42c80000 	.word	0x42c80000
 8002b34:	20000244 	.word	0x20000244

08002b38 <BlueMS_Environmental_Update>:

tBleStatus BlueMS_Environmental_Update(int32_t press, int16_t temp)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 8002b44:	f001 fb52 	bl	80041ec <HAL_GetTick>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	08db      	lsrs	r3, r3, #3
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	733b      	strb	r3, [r7, #12]
 8002b50:	f001 fb4c 	bl	80041ec <HAL_GetTick>
 8002b54:	4603      	mov	r3, r0
 8002b56:	0adb      	lsrs	r3, r3, #11
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2,press);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	73bb      	strb	r3, [r7, #14]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	121b      	asrs	r3, r3, #8
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	73fb      	strb	r3, [r7, #15]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	141b      	asrs	r3, r3, #16
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	743b      	strb	r3, [r7, #16]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	161b      	asrs	r3, r3, #24
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 8002b7a:	887b      	ldrh	r3, [r7, #2]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	74bb      	strb	r3, [r7, #18]
 8002b80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002b84:	121b      	asrs	r3, r3, #8
 8002b86:	b21b      	sxth	r3, r3
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bbc <BlueMS_Environmental_Update+0x84>)
 8002b8e:	8818      	ldrh	r0, [r3, #0]
 8002b90:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc0 <BlueMS_Environmental_Update+0x88>)
 8002b92:	8819      	ldrh	r1, [r3, #0]
 8002b94:	f107 030c 	add.w	r3, r7, #12
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	2308      	movs	r3, #8
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f005 fb81 	bl	80082a4 <aci_gatt_update_char_value>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 8002ba6:	7dfb      	ldrb	r3, [r7, #23]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <BlueMS_Environmental_Update+0x78>
    PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8002bac:	2347      	movs	r3, #71	@ 0x47
 8002bae:	e000      	b.n	8002bb2 <BlueMS_Environmental_Update+0x7a>
  }

  return BLE_STATUS_SUCCESS;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000218 	.word	0x20000218
 8002bc0:	2000021a 	.word	0x2000021a

08002bc4 <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b092      	sub	sp, #72	@ 0x48
 8002bc8:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 8002bca:	4a36      	ldr	r2, [pc, #216]	@ (8002ca4 <Set_DeviceConnectable+0xe0>)
 8002bcc:	f107 031c 	add.w	r3, r7, #28
 8002bd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bd4:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 8002bd8:	2302      	movs	r3, #2
 8002bda:	703b      	strb	r3, [r7, #0]
 8002bdc:	230a      	movs	r3, #10
 8002bde:	707b      	strb	r3, [r7, #1]
 8002be0:	2300      	movs	r3, #0
 8002be2:	70bb      	strb	r3, [r7, #2]
 8002be4:	2308      	movs	r3, #8
 8002be6:	70fb      	strb	r3, [r7, #3]
 8002be8:	2309      	movs	r3, #9
 8002bea:	713b      	strb	r3, [r7, #4]
 8002bec:	2342      	movs	r3, #66	@ 0x42
 8002bee:	717b      	strb	r3, [r7, #5]
 8002bf0:	236c      	movs	r3, #108	@ 0x6c
 8002bf2:	71bb      	strb	r3, [r7, #6]
 8002bf4:	2375      	movs	r3, #117	@ 0x75
 8002bf6:	71fb      	strb	r3, [r7, #7]
 8002bf8:	2365      	movs	r3, #101	@ 0x65
 8002bfa:	723b      	strb	r3, [r7, #8]
 8002bfc:	234e      	movs	r3, #78	@ 0x4e
 8002bfe:	727b      	strb	r3, [r7, #9]
 8002c00:	2352      	movs	r3, #82	@ 0x52
 8002c02:	72bb      	strb	r3, [r7, #10]
 8002c04:	2347      	movs	r3, #71	@ 0x47
 8002c06:	72fb      	strb	r3, [r7, #11]
 8002c08:	230d      	movs	r3, #13
 8002c0a:	733b      	strb	r3, [r7, #12]
 8002c0c:	23ff      	movs	r3, #255	@ 0xff
 8002c0e:	737b      	strb	r3, [r7, #13]
 8002c10:	2301      	movs	r3, #1
 8002c12:	73bb      	strb	r3, [r7, #14]
 8002c14:	2380      	movs	r3, #128	@ 0x80
 8002c16:	73fb      	strb	r3, [r7, #15]
 8002c18:	2300      	movs	r3, #0
 8002c1a:	743b      	strb	r3, [r7, #16]
 8002c1c:	23f4      	movs	r3, #244	@ 0xf4
 8002c1e:	747b      	strb	r3, [r7, #17]
 8002c20:	2300      	movs	r3, #0
 8002c22:	74bb      	strb	r3, [r7, #18]
 8002c24:	2300      	movs	r3, #0
 8002c26:	74fb      	strb	r3, [r7, #19]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 8002c28:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca8 <Set_DeviceConnectable+0xe4>)
 8002c2a:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 8002c2c:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 8002c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca8 <Set_DeviceConnectable+0xe4>)
 8002c30:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 8002c32:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 8002c34:	4b1c      	ldr	r3, [pc, #112]	@ (8002ca8 <Set_DeviceConnectable+0xe4>)
 8002c36:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 8002c38:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 8002c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca8 <Set_DeviceConnectable+0xe4>)
 8002c3c:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 8002c3e:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 8002c40:	4b19      	ldr	r3, [pc, #100]	@ (8002ca8 <Set_DeviceConnectable+0xe4>)
 8002c42:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 8002c44:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 8002c46:	4b18      	ldr	r3, [pc, #96]	@ (8002ca8 <Set_DeviceConnectable+0xe4>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 8002c4a:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 8002c4c:	7cbb      	ldrb	r3, [r7, #18]
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_resp_data(0, NULL);
 8002c56:	2100      	movs	r1, #0
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f005 fd16 	bl	800868a <hci_le_set_scan_resp_data>

  PRINTF("Set General Discoverable Mode.\n");

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 8002c5e:	2300      	movs	r3, #0
 8002c60:	9306      	str	r3, [sp, #24]
 8002c62:	2300      	movs	r3, #0
 8002c64:	9305      	str	r3, [sp, #20]
 8002c66:	2300      	movs	r3, #0
 8002c68:	9304      	str	r3, [sp, #16]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	9303      	str	r3, [sp, #12]
 8002c6e:	f107 031c 	add.w	r3, r7, #28
 8002c72:	9302      	str	r3, [sp, #8]
 8002c74:	2308      	movs	r3, #8
 8002c76:	9301      	str	r3, [sp, #4]
 8002c78:	2300      	movs	r3, #0
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	f44f 62f0 	mov.w	r2, #1920	@ 0x780
 8002c82:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8002c86:	2000      	movs	r0, #0
 8002c88:	f005 f803 	bl	8007c92 <aci_gap_set_discoverable>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 8002c92:	463b      	mov	r3, r7
 8002c94:	4619      	mov	r1, r3
 8002c96:	201a      	movs	r0, #26
 8002c98:	f005 f93c 	bl	8007f14 <aci_gap_update_adv_data>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 8002c9c:	bf00      	nop
 8002c9e:	3728      	adds	r7, #40	@ 0x28
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	0800bbd8 	.word	0x0800bbd8
 8002ca8:	2000020c 	.word	0x2000020c

08002cac <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	61fb      	str	r3, [r7, #28]
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type != HCI_EVENT_PKT)
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d139      	bne.n	8002d3a <user_notify+0x8e>
    return;

  switch(event_pckt->evt){
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2bff      	cmp	r3, #255	@ 0xff
 8002ccc:	d01f      	beq.n	8002d0e <user_notify+0x62>
 8002cce:	2bff      	cmp	r3, #255	@ 0xff
 8002cd0:	dc38      	bgt.n	8002d44 <user_notify+0x98>
 8002cd2:	2b05      	cmp	r3, #5
 8002cd4:	d002      	beq.n	8002cdc <user_notify+0x30>
 8002cd6:	2b3e      	cmp	r3, #62	@ 0x3e
 8002cd8:	d003      	beq.n	8002ce2 <user_notify+0x36>
 8002cda:	e033      	b.n	8002d44 <user_notify+0x98>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8002cdc:	f000 f836 	bl	8002d4c <GAP_DisconnectionComplete_CB>
    }
    break;
 8002ce0:	e030      	b.n	8002d44 <user_notify+0x98>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	3302      	adds	r3, #2
 8002ce6:	60fb      	str	r3, [r7, #12]

      switch(evt->subevent){
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d126      	bne.n	8002d3e <user_notify+0x92>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	60bb      	str	r3, [r7, #8]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	1d5a      	adds	r2, r3, #5
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	4619      	mov	r1, r3
 8002d04:	4610      	mov	r0, r2
 8002d06:	f000 f837 	bl	8002d78 <GAP_ConnectionComplete_CB>
        }
        break;
 8002d0a:	bf00      	nop
      }
    }
    break;
 8002d0c:	e017      	b.n	8002d3e <user_notify+0x92>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	3302      	adds	r3, #2
 8002d12:	617b      	str	r3, [r7, #20]
      switch(blue_evt->ecode){
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	f640 4314 	movw	r3, #3092	@ 0xc14
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d10e      	bne.n	8002d42 <user_notify+0x96>

      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	3302      	adds	r3, #2
 8002d28:	613b      	str	r3, [r7, #16]
          Read_Request_CB(pr->attr_handle);
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	885b      	ldrh	r3, [r3, #2]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff fe39 	bl	80029a8 <Read_Request_CB>
        }
        break;
 8002d36:	bf00      	nop
      }

    }
    break;
 8002d38:	e003      	b.n	8002d42 <user_notify+0x96>
    return;
 8002d3a:	bf00      	nop
 8002d3c:	e002      	b.n	8002d44 <user_notify+0x98>
    break;
 8002d3e:	bf00      	nop
 8002d40:	e000      	b.n	8002d44 <user_notify+0x98>
    break;
 8002d42:	bf00      	nop
  }
}
 8002d44:	3720      	adds	r7, #32
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  connected = FALSE;
 8002d50:	4b06      	ldr	r3, [pc, #24]	@ (8002d6c <GAP_DisconnectionComplete_CB+0x20>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8002d56:	4b06      	ldr	r3, [pc, #24]	@ (8002d70 <GAP_DisconnectionComplete_CB+0x24>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8002d5c:	4b05      	ldr	r3, [pc, #20]	@ (8002d74 <GAP_DisconnectionComplete_CB+0x28>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	701a      	strb	r2, [r3, #0]
}
 8002d62:	bf00      	nop
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	20000248 	.word	0x20000248
 8002d70:	20000001 	.word	0x20000001
 8002d74:	20000246 	.word	0x20000246

08002d78 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8002d84:	4b0a      	ldr	r3, [pc, #40]	@ (8002db0 <GAP_ConnectionComplete_CB+0x38>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8002d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002db4 <GAP_ConnectionComplete_CB+0x3c>)
 8002d8c:	887b      	ldrh	r3, [r7, #2]
 8002d8e:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
  for(uint32_t i = 5; i > 0; i--){
 8002d90:	2305      	movs	r3, #5
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	e002      	b.n	8002d9c <GAP_ConnectionComplete_CB+0x24>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f9      	bne.n	8002d96 <GAP_ConnectionComplete_CB+0x1e>
    PRINTF("%02X-", addr[i]);
  }
  PRINTF("%02X\n", addr[0]);
}
 8002da2:	bf00      	nop
 8002da4:	bf00      	nop
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	20000248 	.word	0x20000248
 8002db4:	20000244 	.word	0x20000244

08002db8 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8002e40 <HCI_TL_SPI_Init+0x88>)
 8002dc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dc4:	4a1e      	ldr	r2, [pc, #120]	@ (8002e40 <HCI_TL_SPI_Init+0x88>)
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dcc:	4b1c      	ldr	r3, [pc, #112]	@ (8002e40 <HCI_TL_SPI_Init+0x88>)
 8002dce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8002dd8:	2340      	movs	r3, #64	@ 0x40
 8002dda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ddc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002de0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8002de6:	f107 030c 	add.w	r3, r7, #12
 8002dea:	4619      	mov	r1, r3
 8002dec:	4815      	ldr	r0, [pc, #84]	@ (8002e44 <HCI_TL_SPI_Init+0x8c>)
 8002dee:	f001 fb9d 	bl	800452c <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8002df2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002df6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e00:	2300      	movs	r3, #0
 8002e02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8002e04:	f107 030c 	add.w	r3, r7, #12
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e0e:	f001 fb8d 	bl	800452c <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8002e12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e20:	2300      	movs	r3, #0
 8002e22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8002e24:	f107 030c 	add.w	r3, r7, #12
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4807      	ldr	r0, [pc, #28]	@ (8002e48 <HCI_TL_SPI_Init+0x90>)
 8002e2c:	f001 fb7e 	bl	800452c <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 8002e30:	f001 f882 	bl	8003f38 <BSP_SPI3_Init>
 8002e34:	4603      	mov	r3, r0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3720      	adds	r7, #32
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000
 8002e44:	48001000 	.word	0x48001000
 8002e48:	48000c00 	.word	0x48000c00

08002e4c <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8002e50:	2140      	movs	r1, #64	@ 0x40
 8002e52:	4808      	ldr	r0, [pc, #32]	@ (8002e74 <HCI_TL_SPI_DeInit+0x28>)
 8002e54:	f001 fd14 	bl	8004880 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8002e58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002e5c:	4806      	ldr	r0, [pc, #24]	@ (8002e78 <HCI_TL_SPI_DeInit+0x2c>)
 8002e5e:	f001 fd0f 	bl	8004880 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8002e62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e6a:	f001 fd09 	bl	8004880 <HAL_GPIO_DeInit>
  return 0;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	48001000 	.word	0x48001000
 8002e78:	48000c00 	.word	0x48000c00

08002e7c <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002e80:	2201      	movs	r2, #1
 8002e82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002e86:	480d      	ldr	r0, [pc, #52]	@ (8002ebc <HCI_TL_SPI_Reset+0x40>)
 8002e88:	f001 fe06 	bl	8004a98 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e96:	f001 fdff 	bl	8004a98 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8002e9a:	2005      	movs	r0, #5
 8002e9c:	f001 f9b2 	bl	8004204 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ea6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002eaa:	f001 fdf5 	bl	8004a98 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8002eae:	2005      	movs	r0, #5
 8002eb0:	f001 f9a8 	bl	8004204 <HAL_Delay>
  return 0;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	48000c00 	.word	0x48000c00

08002ec0 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8002ed0:	23ff      	movs	r3, #255	@ 0xff
 8002ed2:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8002ed4:	4a26      	ldr	r2, [pc, #152]	@ (8002f70 <HCI_TL_SPI_Receive+0xb0>)
 8002ed6:	f107 0314 	add.w	r3, r7, #20
 8002eda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ede:	6018      	str	r0, [r3, #0]
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002eea:	4822      	ldr	r0, [pc, #136]	@ (8002f74 <HCI_TL_SPI_Receive+0xb4>)
 8002eec:	f001 fdd4 	bl	8004a98 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8002ef0:	f107 010c 	add.w	r1, r7, #12
 8002ef4:	f107 0314 	add.w	r3, r7, #20
 8002ef8:	2205      	movs	r2, #5
 8002efa:	4618      	mov	r0, r3
 8002efc:	f001 f84c 	bl	8003f98 <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 8002f00:	7b3b      	ldrb	r3, [r7, #12]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d129      	bne.n	8002f5a <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8002f06:	7c3b      	ldrb	r3, [r7, #16]
 8002f08:	021b      	lsls	r3, r3, #8
 8002f0a:	b21a      	sxth	r2, r3
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	b21b      	sxth	r3, r3
 8002f10:	4313      	orrs	r3, r2
 8002f12:	b21b      	sxth	r3, r3
 8002f14:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8002f16:	8bfb      	ldrh	r3, [r7, #30]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d01e      	beq.n	8002f5a <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8002f1c:	8bfa      	ldrh	r2, [r7, #30]
 8002f1e:	887b      	ldrh	r3, [r7, #2]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d901      	bls.n	8002f28 <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 8002f24:	887b      	ldrh	r3, [r7, #2]
 8002f26:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8002f28:	2300      	movs	r3, #0
 8002f2a:	777b      	strb	r3, [r7, #29]
 8002f2c:	e010      	b.n	8002f50 <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8002f2e:	f107 011b 	add.w	r1, r7, #27
 8002f32:	f107 031c 	add.w	r3, r7, #28
 8002f36:	2201      	movs	r2, #1
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f001 f82d 	bl	8003f98 <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 8002f3e:	7f7b      	ldrb	r3, [r7, #29]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	4413      	add	r3, r2
 8002f44:	7efa      	ldrb	r2, [r7, #27]
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8002f4a:	7f7b      	ldrb	r3, [r7, #29]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	777b      	strb	r3, [r7, #29]
 8002f50:	7f7b      	ldrb	r3, [r7, #29]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	8bfa      	ldrh	r2, [r7, #30]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d8e9      	bhi.n	8002f2e <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002f60:	4804      	ldr	r0, [pc, #16]	@ (8002f74 <HCI_TL_SPI_Receive+0xb4>)
 8002f62:	f001 fd99 	bl	8004a98 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8002f66:	7f7b      	ldrb	r3, [r7, #29]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3720      	adds	r7, #32
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	0800bbe0 	.word	0x0800bbe0
 8002f74:	48000c00 	.word	0x48000c00

08002f78 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8002f84:	4a24      	ldr	r2, [pc, #144]	@ (8003018 <HCI_TL_SPI_Send+0xa0>)
 8002f86:	f107 0310 	add.w	r3, r7, #16
 8002f8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f8e:	6018      	str	r0, [r3, #0]
 8002f90:	3304      	adds	r3, #4
 8002f92:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8002f94:	f001 f92a 	bl	80041ec <HAL_GetTick>
 8002f98:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002fa4:	481d      	ldr	r0, [pc, #116]	@ (800301c <HCI_TL_SPI_Send+0xa4>)
 8002fa6:	f001 fd77 	bl	8004a98 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8002faa:	f107 0108 	add.w	r1, r7, #8
 8002fae:	f107 0310 	add.w	r3, r7, #16
 8002fb2:	2205      	movs	r2, #5
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 ffef 	bl	8003f98 <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 8002fba:	7a3b      	ldrb	r3, [r7, #8]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d10f      	bne.n	8002fe0 <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8002fc0:	7a7b      	ldrb	r3, [r7, #9]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	887b      	ldrh	r3, [r7, #2]
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d806      	bhi.n	8002fd8 <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 8002fca:	887b      	ldrh	r3, [r7, #2]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	4914      	ldr	r1, [pc, #80]	@ (8003020 <HCI_TL_SPI_Send+0xa8>)
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 ffe1 	bl	8003f98 <BSP_SPI3_SendRecv>
 8002fd6:	e006      	b.n	8002fe6 <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8002fd8:	f06f 0301 	mvn.w	r3, #1
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	e002      	b.n	8002fe6 <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8002fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe4:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002fec:	480b      	ldr	r0, [pc, #44]	@ (800301c <HCI_TL_SPI_Send+0xa4>)
 8002fee:	f001 fd53 	bl	8004a98 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8002ff2:	f001 f8fb 	bl	80041ec <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b0f      	cmp	r3, #15
 8002ffe:	d903      	bls.n	8003008 <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 8003000:	f06f 0302 	mvn.w	r3, #2
 8003004:	61fb      	str	r3, [r7, #28]
      break;
 8003006:	e002      	b.n	800300e <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	2b00      	cmp	r3, #0
 800300c:	dbc5      	blt.n	8002f9a <HCI_TL_SPI_Send+0x22>

  return result;
 800300e:	69fb      	ldr	r3, [r7, #28]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3720      	adds	r7, #32
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	0800bbe8 	.word	0x0800bbe8
 800301c:	48000c00 	.word	0x48000c00
 8003020:	20000284 	.word	0x20000284

08003024 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8003028:	2140      	movs	r1, #64	@ 0x40
 800302a:	4805      	ldr	r0, [pc, #20]	@ (8003040 <IsDataAvailable+0x1c>)
 800302c:	f001 fd1c 	bl	8004a68 <HAL_GPIO_ReadPin>
 8003030:	4603      	mov	r3, r0
 8003032:	2b01      	cmp	r3, #1
 8003034:	bf0c      	ite	eq
 8003036:	2301      	moveq	r3, #1
 8003038:	2300      	movne	r3, #0
 800303a:	b2db      	uxtb	r3, r3
}
 800303c:	4618      	mov	r0, r3
 800303e:	bd80      	pop	{r7, pc}
 8003040:	48001000 	.word	0x48001000

08003044 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800304a:	4b12      	ldr	r3, [pc, #72]	@ (8003094 <hci_tl_lowlevel_init+0x50>)
 800304c:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800304e:	4b12      	ldr	r3, [pc, #72]	@ (8003098 <hci_tl_lowlevel_init+0x54>)
 8003050:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8003052:	4b12      	ldr	r3, [pc, #72]	@ (800309c <hci_tl_lowlevel_init+0x58>)
 8003054:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8003056:	4b12      	ldr	r3, [pc, #72]	@ (80030a0 <hci_tl_lowlevel_init+0x5c>)
 8003058:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 800305a:	4b12      	ldr	r3, [pc, #72]	@ (80030a4 <hci_tl_lowlevel_init+0x60>)
 800305c:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 800305e:	4b12      	ldr	r3, [pc, #72]	@ (80030a8 <hci_tl_lowlevel_init+0x64>)
 8003060:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8003062:	1d3b      	adds	r3, r7, #4
 8003064:	4618      	mov	r0, r3
 8003066:	f005 fc2d 	bl	80088c4 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 800306a:	4910      	ldr	r1, [pc, #64]	@ (80030ac <hci_tl_lowlevel_init+0x68>)
 800306c:	4810      	ldr	r0, [pc, #64]	@ (80030b0 <hci_tl_lowlevel_init+0x6c>)
 800306e:	f001 fa18 	bl	80044a2 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8003072:	4a10      	ldr	r2, [pc, #64]	@ (80030b4 <hci_tl_lowlevel_init+0x70>)
 8003074:	2100      	movs	r1, #0
 8003076:	480e      	ldr	r0, [pc, #56]	@ (80030b0 <hci_tl_lowlevel_init+0x6c>)
 8003078:	f001 f9f9 	bl	800446e <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800307c:	2200      	movs	r2, #0
 800307e:	2100      	movs	r1, #0
 8003080:	2017      	movs	r0, #23
 8003082:	f001 f9be 	bl	8004402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003086:	2017      	movs	r0, #23
 8003088:	f001 f9d7 	bl	800443a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 800308c:	bf00      	nop
 800308e:	3720      	adds	r7, #32
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	08002db9 	.word	0x08002db9
 8003098:	08002e4d 	.word	0x08002e4d
 800309c:	08002f79 	.word	0x08002f79
 80030a0:	08002ec1 	.word	0x08002ec1
 80030a4:	08002e7d 	.word	0x08002e7d
 80030a8:	08003fd9 	.word	0x08003fd9
 80030ac:	16000006 	.word	0x16000006
 80030b0:	2000027c 	.word	0x2000027c
 80030b4:	080030b9 	.word	0x080030b9

080030b8 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80030bc:	e005      	b.n	80030ca <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 80030be:	2000      	movs	r0, #0
 80030c0:	f005 fd64 	bl	8008b8c <hci_notify_asynch_evt>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d105      	bne.n	80030d6 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 80030ca:	f7ff ffab 	bl	8003024 <IsDataAvailable>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1f4      	bne.n	80030be <hci_tl_lowlevel_isr+0x6>
 80030d4:	e000      	b.n	80030d8 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80030d6:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	0000      	movs	r0, r0
 80030dc:	0000      	movs	r0, r0
	...

080030e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030e0:	b5b0      	push	{r4, r5, r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint32_t numTicks = 0;
 80030e6:	2300      	movs	r3, #0
 80030e8:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030ea:	f001 f817 	bl	800411c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030ee:	f000 f887 	bl	8003200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030f2:	f000 f935 	bl	8003360 <MX_GPIO_Init>
  MX_TIM5_Init();
 80030f6:	f000 f8e5 	bl	80032c4 <MX_TIM5_Init>
  MX_BlueNRG_MS_Init();
 80030fa:	f7fd ff1d 	bl	8000f38 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_MS_Process();
 80030fe:	f7fd ffc7 	bl	8001090 <MX_BlueNRG_MS_Process>
    /* USER CODE BEGIN 3 */
	  //Set TRIG to LOW for few uSec
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8003102:	2200      	movs	r2, #0
 8003104:	2110      	movs	r1, #16
 8003106:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800310a:	f001 fcc5 	bl	8004a98 <HAL_GPIO_WritePin>
		usDelay(3);
 800310e:	2003      	movs	r0, #3
 8003110:	f000 fb30 	bl	8003774 <usDelay>

		//*** START Ultrasonic measure routine ***//
		//1. Output 10 usec TRIG
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8003114:	2201      	movs	r2, #1
 8003116:	2110      	movs	r1, #16
 8003118:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800311c:	f001 fcbc 	bl	8004a98 <HAL_GPIO_WritePin>
		usDelay(10);
 8003120:	200a      	movs	r0, #10
 8003122:	f000 fb27 	bl	8003774 <usDelay>
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8003126:	2200      	movs	r2, #0
 8003128:	2110      	movs	r1, #16
 800312a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800312e:	f001 fcb3 	bl	8004a98 <HAL_GPIO_WritePin>

		//2. Wait for ECHO pin rising edge
		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_RESET);
 8003132:	bf00      	nop
 8003134:	2104      	movs	r1, #4
 8003136:	482c      	ldr	r0, [pc, #176]	@ (80031e8 <main+0x108>)
 8003138:	f001 fc96 	bl	8004a68 <HAL_GPIO_ReadPin>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f8      	beq.n	8003134 <main+0x54>

		//3. Start measuring ECHO pulse width in usec
		numTicks = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	607b      	str	r3, [r7, #4]
		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 8003146:	e005      	b.n	8003154 <main+0x74>
		{
			numTicks++;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3301      	adds	r3, #1
 800314c:	607b      	str	r3, [r7, #4]
			usDelay(2); //2.8usec
 800314e:	2002      	movs	r0, #2
 8003150:	f000 fb10 	bl	8003774 <usDelay>
		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 8003154:	2104      	movs	r1, #4
 8003156:	4824      	ldr	r0, [pc, #144]	@ (80031e8 <main+0x108>)
 8003158:	f001 fc86 	bl	8004a68 <HAL_GPIO_ReadPin>
 800315c:	4603      	mov	r3, r0
 800315e:	2b01      	cmp	r3, #1
 8003160:	d0f2      	beq.n	8003148 <main+0x68>
		};

		//4. Estimate distance in cm

		distance = (numTicks + 0.0f)*2.8*speedOfSound;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	ee07 3a90 	vmov	s15, r3
 8003168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800316c:	ee17 0a90 	vmov	r0, s15
 8003170:	f7fd f9ea 	bl	8000548 <__aeabi_f2d>
 8003174:	a31a      	add	r3, pc, #104	@ (adr r3, 80031e0 <main+0x100>)
 8003176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317a:	f7fd fa3d 	bl	80005f8 <__aeabi_dmul>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4614      	mov	r4, r2
 8003184:	461d      	mov	r5, r3
 8003186:	4b19      	ldr	r3, [pc, #100]	@ (80031ec <main+0x10c>)
 8003188:	4618      	mov	r0, r3
 800318a:	f7fd f9dd 	bl	8000548 <__aeabi_f2d>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4620      	mov	r0, r4
 8003194:	4629      	mov	r1, r5
 8003196:	f7fd fa2f 	bl	80005f8 <__aeabi_dmul>
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	4610      	mov	r0, r2
 80031a0:	4619      	mov	r1, r3
 80031a2:	f7fd fd01 	bl	8000ba8 <__aeabi_d2f>
 80031a6:	4603      	mov	r3, r0
 80031a8:	4a11      	ldr	r2, [pc, #68]	@ (80031f0 <main+0x110>)
 80031aa:	6013      	str	r3, [r2, #0]

		//5. Print to UART terminal for debugging
		sprintf(uartBuf, "Distance (cm)  = %.1f\r\n", distance);
 80031ac:	4b10      	ldr	r3, [pc, #64]	@ (80031f0 <main+0x110>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fd f9c9 	bl	8000548 <__aeabi_f2d>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	490e      	ldr	r1, [pc, #56]	@ (80031f4 <main+0x114>)
 80031bc:	480e      	ldr	r0, [pc, #56]	@ (80031f8 <main+0x118>)
 80031be:	f006 fbcf 	bl	8009960 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)uartBuf, strlen(uartBuf), 100);
 80031c2:	480d      	ldr	r0, [pc, #52]	@ (80031f8 <main+0x118>)
 80031c4:	f7fd f854 	bl	8000270 <strlen>
 80031c8:	4603      	mov	r3, r0
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	2364      	movs	r3, #100	@ 0x64
 80031ce:	490a      	ldr	r1, [pc, #40]	@ (80031f8 <main+0x118>)
 80031d0:	480a      	ldr	r0, [pc, #40]	@ (80031fc <main+0x11c>)
 80031d2:	f003 ff6d 	bl	80070b0 <HAL_UART_Transmit>

		HAL_Delay(800);
 80031d6:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80031da:	f001 f813 	bl	8004204 <HAL_Delay>
  MX_BlueNRG_MS_Process();
 80031de:	e78e      	b.n	80030fe <main+0x1e>
 80031e0:	66666666 	.word	0x66666666
 80031e4:	40066666 	.word	0x40066666
 80031e8:	48000400 	.word	0x48000400
 80031ec:	3c8c7e28 	.word	0x3c8c7e28
 80031f0:	200003d0 	.word	0x200003d0
 80031f4:	0800bbf0 	.word	0x0800bbf0
 80031f8:	200003d4 	.word	0x200003d4
 80031fc:	2000043c 	.word	0x2000043c

08003200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b096      	sub	sp, #88	@ 0x58
 8003204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003206:	f107 0314 	add.w	r3, r7, #20
 800320a:	2244      	movs	r2, #68	@ 0x44
 800320c:	2100      	movs	r1, #0
 800320e:	4618      	mov	r0, r3
 8003210:	f006 fc09 	bl	8009a26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003214:	463b      	mov	r3, r7
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	605a      	str	r2, [r3, #4]
 800321c:	609a      	str	r2, [r3, #8]
 800321e:	60da      	str	r2, [r3, #12]
 8003220:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003222:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003226:	f001 fcab 	bl	8004b80 <HAL_PWREx_ControlVoltageScaling>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003230:	f000 fad2 	bl	80037d8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003234:	f001 fc86 	bl	8004b44 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003238:	4b21      	ldr	r3, [pc, #132]	@ (80032c0 <SystemClock_Config+0xc0>)
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800323e:	4a20      	ldr	r2, [pc, #128]	@ (80032c0 <SystemClock_Config+0xc0>)
 8003240:	f023 0318 	bic.w	r3, r3, #24
 8003244:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003248:	2314      	movs	r3, #20
 800324a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800324c:	2301      	movs	r3, #1
 800324e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003250:	2301      	movs	r3, #1
 8003252:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003254:	2300      	movs	r3, #0
 8003256:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003258:	2360      	movs	r3, #96	@ 0x60
 800325a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800325c:	2302      	movs	r3, #2
 800325e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003260:	2301      	movs	r3, #1
 8003262:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003264:	2301      	movs	r3, #1
 8003266:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003268:	2328      	movs	r3, #40	@ 0x28
 800326a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800326c:	2307      	movs	r3, #7
 800326e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003270:	2302      	movs	r3, #2
 8003272:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003274:	2302      	movs	r3, #2
 8003276:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003278:	f107 0314 	add.w	r3, r7, #20
 800327c:	4618      	mov	r0, r3
 800327e:	f001 fcd5 	bl	8004c2c <HAL_RCC_OscConfig>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003288:	f000 faa6 	bl	80037d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800328c:	230f      	movs	r3, #15
 800328e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003290:	2303      	movs	r3, #3
 8003292:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003294:	2300      	movs	r3, #0
 8003296:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800329c:	2300      	movs	r3, #0
 800329e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80032a0:	463b      	mov	r3, r7
 80032a2:	2104      	movs	r1, #4
 80032a4:	4618      	mov	r0, r3
 80032a6:	f002 f89d 	bl	80053e4 <HAL_RCC_ClockConfig>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80032b0:	f000 fa92 	bl	80037d8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80032b4:	f002 fda4 	bl	8005e00 <HAL_RCCEx_EnableMSIPLLMode>
}
 80032b8:	bf00      	nop
 80032ba:	3758      	adds	r7, #88	@ 0x58
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40021000 	.word	0x40021000

080032c4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032ca:	f107 0310 	add.w	r3, r7, #16
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	605a      	str	r2, [r3, #4]
 80032d4:	609a      	str	r2, [r3, #8]
 80032d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032d8:	1d3b      	adds	r3, r7, #4
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	605a      	str	r2, [r3, #4]
 80032e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80032e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003358 <MX_TIM5_Init+0x94>)
 80032e4:	4a1d      	ldr	r2, [pc, #116]	@ (800335c <MX_TIM5_Init+0x98>)
 80032e6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 80-1;
 80032e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003358 <MX_TIM5_Init+0x94>)
 80032ea:	224f      	movs	r2, #79	@ 0x4f
 80032ec:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003358 <MX_TIM5_Init+0x94>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80032f4:	4b18      	ldr	r3, [pc, #96]	@ (8003358 <MX_TIM5_Init+0x94>)
 80032f6:	f04f 32ff 	mov.w	r2, #4294967295
 80032fa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032fc:	4b16      	ldr	r3, [pc, #88]	@ (8003358 <MX_TIM5_Init+0x94>)
 80032fe:	2200      	movs	r2, #0
 8003300:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003302:	4b15      	ldr	r3, [pc, #84]	@ (8003358 <MX_TIM5_Init+0x94>)
 8003304:	2200      	movs	r2, #0
 8003306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003308:	4813      	ldr	r0, [pc, #76]	@ (8003358 <MX_TIM5_Init+0x94>)
 800330a:	f003 fb9d 	bl	8006a48 <HAL_TIM_Base_Init>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003314:	f000 fa60 	bl	80037d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003318:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800331c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800331e:	f107 0310 	add.w	r3, r7, #16
 8003322:	4619      	mov	r1, r3
 8003324:	480c      	ldr	r0, [pc, #48]	@ (8003358 <MX_TIM5_Init+0x94>)
 8003326:	f003 fbe6 	bl	8006af6 <HAL_TIM_ConfigClockSource>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003330:	f000 fa52 	bl	80037d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003334:	2300      	movs	r3, #0
 8003336:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003338:	2300      	movs	r3, #0
 800333a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800333c:	1d3b      	adds	r3, r7, #4
 800333e:	4619      	mov	r1, r3
 8003340:	4805      	ldr	r0, [pc, #20]	@ (8003358 <MX_TIM5_Init+0x94>)
 8003342:	f003 fdd5 	bl	8006ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800334c:	f000 fa44 	bl	80037d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003350:	bf00      	nop
 8003352:	3720      	adds	r7, #32
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	20000384 	.word	0x20000384
 800335c:	40000c00 	.word	0x40000c00

08003360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08a      	sub	sp, #40	@ 0x28
 8003364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003366:	f107 0314 	add.w	r3, r7, #20
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	605a      	str	r2, [r3, #4]
 8003370:	609a      	str	r2, [r3, #8]
 8003372:	60da      	str	r2, [r3, #12]
 8003374:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003376:	4bbc      	ldr	r3, [pc, #752]	@ (8003668 <MX_GPIO_Init+0x308>)
 8003378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800337a:	4abb      	ldr	r2, [pc, #748]	@ (8003668 <MX_GPIO_Init+0x308>)
 800337c:	f043 0310 	orr.w	r3, r3, #16
 8003380:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003382:	4bb9      	ldr	r3, [pc, #740]	@ (8003668 <MX_GPIO_Init+0x308>)
 8003384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800338e:	4bb6      	ldr	r3, [pc, #728]	@ (8003668 <MX_GPIO_Init+0x308>)
 8003390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003392:	4ab5      	ldr	r2, [pc, #724]	@ (8003668 <MX_GPIO_Init+0x308>)
 8003394:	f043 0304 	orr.w	r3, r3, #4
 8003398:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800339a:	4bb3      	ldr	r3, [pc, #716]	@ (8003668 <MX_GPIO_Init+0x308>)
 800339c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a6:	4bb0      	ldr	r3, [pc, #704]	@ (8003668 <MX_GPIO_Init+0x308>)
 80033a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033aa:	4aaf      	ldr	r2, [pc, #700]	@ (8003668 <MX_GPIO_Init+0x308>)
 80033ac:	f043 0301 	orr.w	r3, r3, #1
 80033b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033b2:	4bad      	ldr	r3, [pc, #692]	@ (8003668 <MX_GPIO_Init+0x308>)
 80033b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	60bb      	str	r3, [r7, #8]
 80033bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033be:	4baa      	ldr	r3, [pc, #680]	@ (8003668 <MX_GPIO_Init+0x308>)
 80033c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033c2:	4aa9      	ldr	r2, [pc, #676]	@ (8003668 <MX_GPIO_Init+0x308>)
 80033c4:	f043 0302 	orr.w	r3, r3, #2
 80033c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033ca:	4ba7      	ldr	r3, [pc, #668]	@ (8003668 <MX_GPIO_Init+0x308>)
 80033cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	607b      	str	r3, [r7, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033d6:	4ba4      	ldr	r3, [pc, #656]	@ (8003668 <MX_GPIO_Init+0x308>)
 80033d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033da:	4aa3      	ldr	r2, [pc, #652]	@ (8003668 <MX_GPIO_Init+0x308>)
 80033dc:	f043 0308 	orr.w	r3, r3, #8
 80033e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033e2:	4ba1      	ldr	r3, [pc, #644]	@ (8003668 <MX_GPIO_Init+0x308>)
 80033e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	603b      	str	r3, [r7, #0]
 80033ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80033ee:	2200      	movs	r2, #0
 80033f0:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80033f4:	489d      	ldr	r0, [pc, #628]	@ (800366c <MX_GPIO_Init+0x30c>)
 80033f6:	f001 fb4f 	bl	8004a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|TRIG_Pin|GPIO_PIN_5|SPBTLE_RF_RST_Pin
 80033fa:	2200      	movs	r2, #0
 80033fc:	f248 1134 	movw	r1, #33076	@ 0x8134
 8003400:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003404:	f001 fb48 	bl	8004a98 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);
 8003408:	2200      	movs	r2, #0
 800340a:	f24b 0110 	movw	r1, #45072	@ 0xb010
 800340e:	4898      	ldr	r0, [pc, #608]	@ (8003670 <MX_GPIO_Init+0x310>)
 8003410:	f001 fb42 	bl	8004a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8003414:	2200      	movs	r2, #0
 8003416:	f241 0181 	movw	r1, #4225	@ 0x1081
 800341a:	4896      	ldr	r0, [pc, #600]	@ (8003674 <MX_GPIO_Init+0x314>)
 800341c:	f001 fb3c 	bl	8004a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8003420:	2201      	movs	r2, #1
 8003422:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003426:	4893      	ldr	r0, [pc, #588]	@ (8003674 <MX_GPIO_Init+0x314>)
 8003428:	f001 fb36 	bl	8004a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800342c:	2200      	movs	r2, #0
 800342e:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8003432:	4891      	ldr	r0, [pc, #580]	@ (8003678 <MX_GPIO_Init+0x318>)
 8003434:	f001 fb30 	bl	8004a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8003438:	2201      	movs	r2, #1
 800343a:	2120      	movs	r1, #32
 800343c:	488c      	ldr	r0, [pc, #560]	@ (8003670 <MX_GPIO_Init+0x310>)
 800343e:	f001 fb2b 	bl	8004a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8003442:	2201      	movs	r2, #1
 8003444:	2101      	movs	r1, #1
 8003446:	4889      	ldr	r0, [pc, #548]	@ (800366c <MX_GPIO_Init+0x30c>)
 8003448:	f001 fb26 	bl	8004a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800344c:	f240 1315 	movw	r3, #277	@ 0x115
 8003450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003452:	2301      	movs	r3, #1
 8003454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003456:	2300      	movs	r3, #0
 8003458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800345a:	2300      	movs	r3, #0
 800345c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800345e:	f107 0314 	add.w	r3, r7, #20
 8003462:	4619      	mov	r1, r3
 8003464:	4881      	ldr	r0, [pc, #516]	@ (800366c <MX_GPIO_Init+0x30c>)
 8003466:	f001 f861 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800346a:	236a      	movs	r3, #106	@ 0x6a
 800346c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800346e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003474:	2300      	movs	r3, #0
 8003476:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003478:	f107 0314 	add.w	r3, r7, #20
 800347c:	4619      	mov	r1, r3
 800347e:	487b      	ldr	r0, [pc, #492]	@ (800366c <MX_GPIO_Init+0x30c>)
 8003480:	f001 f854 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8003484:	233f      	movs	r3, #63	@ 0x3f
 8003486:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003488:	230b      	movs	r3, #11
 800348a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348c:	2300      	movs	r3, #0
 800348e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003490:	f107 0314 	add.w	r3, r7, #20
 8003494:	4619      	mov	r1, r3
 8003496:	4878      	ldr	r0, [pc, #480]	@ (8003678 <MX_GPIO_Init+0x318>)
 8003498:	f001 f848 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800349c:	2303      	movs	r3, #3
 800349e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a0:	2302      	movs	r3, #2
 80034a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034a8:	2303      	movs	r3, #3
 80034aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80034ac:	2308      	movs	r3, #8
 80034ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b0:	f107 0314 	add.w	r3, r7, #20
 80034b4:	4619      	mov	r1, r3
 80034b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034ba:	f001 f837 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin TRIG_Pin PA5 SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|TRIG_Pin|GPIO_PIN_5|SPBTLE_RF_RST_Pin
 80034be:	f248 1334 	movw	r3, #33076	@ 0x8134
 80034c2:	617b      	str	r3, [r7, #20]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034c4:	2301      	movs	r3, #1
 80034c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c8:	2300      	movs	r3, #0
 80034ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034cc:	2300      	movs	r3, #0
 80034ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d0:	f107 0314 	add.w	r3, r7, #20
 80034d4:	4619      	mov	r1, r3
 80034d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034da:	f001 f827 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80034de:	2308      	movs	r3, #8
 80034e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e2:	2302      	movs	r3, #2
 80034e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ea:	2300      	movs	r3, #0
 80034ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034ee:	2301      	movs	r3, #1
 80034f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80034f2:	f107 0314 	add.w	r3, r7, #20
 80034f6:	4619      	mov	r1, r3
 80034f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034fc:	f001 f816 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8003500:	23c0      	movs	r3, #192	@ 0xc0
 8003502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003504:	2302      	movs	r3, #2
 8003506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003508:	2300      	movs	r3, #0
 800350a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800350c:	2303      	movs	r3, #3
 800350e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003510:	2305      	movs	r3, #5
 8003512:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003514:	f107 0314 	add.w	r3, r7, #20
 8003518:	4619      	mov	r1, r3
 800351a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800351e:	f001 f805 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8003522:	2301      	movs	r3, #1
 8003524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003526:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800352a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352c:	2300      	movs	r3, #0
 800352e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8003530:	f107 0314 	add.w	r3, r7, #20
 8003534:	4619      	mov	r1, r3
 8003536:	484e      	ldr	r0, [pc, #312]	@ (8003670 <MX_GPIO_Init+0x310>)
 8003538:	f000 fff8 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800353c:	2302      	movs	r3, #2
 800353e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003540:	230b      	movs	r3, #11
 8003542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003544:	2300      	movs	r3, #0
 8003546:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8003548:	f107 0314 	add.w	r3, r7, #20
 800354c:	4619      	mov	r1, r3
 800354e:	4848      	ldr	r0, [pc, #288]	@ (8003670 <MX_GPIO_Init+0x310>)
 8003550:	f000 ffec 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8003554:	2304      	movs	r3, #4
 8003556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003558:	2300      	movs	r3, #0
 800355a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355c:	2300      	movs	r3, #0
 800355e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8003560:	f107 0314 	add.w	r3, r7, #20
 8003564:	4619      	mov	r1, r3
 8003566:	4842      	ldr	r0, [pc, #264]	@ (8003670 <MX_GPIO_Init+0x310>)
 8003568:	f000 ffe0 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800356c:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8003570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003572:	2302      	movs	r3, #2
 8003574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003576:	2300      	movs	r3, #0
 8003578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357a:	2300      	movs	r3, #0
 800357c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800357e:	2306      	movs	r3, #6
 8003580:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003582:	f107 0314 	add.w	r3, r7, #20
 8003586:	4619      	mov	r1, r3
 8003588:	4838      	ldr	r0, [pc, #224]	@ (800366c <MX_GPIO_Init+0x30c>)
 800358a:	f000 ffcf 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800358e:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8003592:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003594:	2302      	movs	r3, #2
 8003596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003598:	2300      	movs	r3, #0
 800359a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800359c:	2303      	movs	r3, #3
 800359e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80035a0:	230a      	movs	r3, #10
 80035a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035a4:	f107 0314 	add.w	r3, r7, #20
 80035a8:	4619      	mov	r1, r3
 80035aa:	4830      	ldr	r0, [pc, #192]	@ (800366c <MX_GPIO_Init+0x30c>)
 80035ac:	f000 ffbe 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80035b0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80035b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035b6:	2312      	movs	r3, #18
 80035b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035ba:	2301      	movs	r3, #1
 80035bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035be:	2303      	movs	r3, #3
 80035c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80035c2:	2304      	movs	r3, #4
 80035c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c6:	f107 0314 	add.w	r3, r7, #20
 80035ca:	4619      	mov	r1, r3
 80035cc:	4828      	ldr	r0, [pc, #160]	@ (8003670 <MX_GPIO_Init+0x310>)
 80035ce:	f000 ffad 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pins : ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin ARD_D5_Pin
                           SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin|ARD_D5_Pin
 80035d2:	f24b 0330 	movw	r3, #45104	@ 0xb030
 80035d6:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035d8:	2301      	movs	r3, #1
 80035da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e0:	2300      	movs	r3, #0
 80035e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e4:	f107 0314 	add.w	r3, r7, #20
 80035e8:	4619      	mov	r1, r3
 80035ea:	4821      	ldr	r0, [pc, #132]	@ (8003670 <MX_GPIO_Init+0x310>)
 80035ec:	f000 ff9e 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80035f0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80035f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f6:	2302      	movs	r3, #2
 80035f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fa:	2300      	movs	r3, #0
 80035fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035fe:	2303      	movs	r3, #3
 8003600:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003602:	2307      	movs	r3, #7
 8003604:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003606:	f107 0314 	add.w	r3, r7, #20
 800360a:	4619      	mov	r1, r3
 800360c:	4819      	ldr	r0, [pc, #100]	@ (8003674 <MX_GPIO_Init+0x314>)
 800360e:	f000 ff8d 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8003612:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8003616:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003618:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800361c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361e:	2300      	movs	r3, #0
 8003620:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003622:	f107 0314 	add.w	r3, r7, #20
 8003626:	4619      	mov	r1, r3
 8003628:	4812      	ldr	r0, [pc, #72]	@ (8003674 <MX_GPIO_Init+0x314>)
 800362a:	f000 ff7f 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800362e:	f243 0381 	movw	r3, #12417	@ 0x3081
 8003632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003634:	2301      	movs	r3, #1
 8003636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003638:	2300      	movs	r3, #0
 800363a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800363c:	2300      	movs	r3, #0
 800363e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003640:	f107 0314 	add.w	r3, r7, #20
 8003644:	4619      	mov	r1, r3
 8003646:	480b      	ldr	r0, [pc, #44]	@ (8003674 <MX_GPIO_Init+0x314>)
 8003648:	f000 ff70 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800364c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8003650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003652:	2301      	movs	r3, #1
 8003654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800365a:	2300      	movs	r3, #0
 800365c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800365e:	f107 0314 	add.w	r3, r7, #20
 8003662:	4619      	mov	r1, r3
 8003664:	e00a      	b.n	800367c <MX_GPIO_Init+0x31c>
 8003666:	bf00      	nop
 8003668:	40021000 	.word	0x40021000
 800366c:	48001000 	.word	0x48001000
 8003670:	48000400 	.word	0x48000400
 8003674:	48000c00 	.word	0x48000c00
 8003678:	48000800 	.word	0x48000800
 800367c:	483a      	ldr	r0, [pc, #232]	@ (8003768 <MX_GPIO_Init+0x408>)
 800367e:	f000 ff55 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8003682:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003688:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800368c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368e:	2300      	movs	r3, #0
 8003690:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003692:	f107 0314 	add.w	r3, r7, #20
 8003696:	4619      	mov	r1, r3
 8003698:	4833      	ldr	r0, [pc, #204]	@ (8003768 <MX_GPIO_Init+0x408>)
 800369a:	f000 ff47 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800369e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80036a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036a4:	2300      	movs	r3, #0
 80036a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80036ac:	f107 0314 	add.w	r3, r7, #20
 80036b0:	4619      	mov	r1, r3
 80036b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036b6:	f000 ff39 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80036ba:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80036be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c0:	2302      	movs	r3, #2
 80036c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c4:	2300      	movs	r3, #0
 80036c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036c8:	2303      	movs	r3, #3
 80036ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80036cc:	230a      	movs	r3, #10
 80036ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d0:	f107 0314 	add.w	r3, r7, #20
 80036d4:	4619      	mov	r1, r3
 80036d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036da:	f000 ff27 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80036de:	2302      	movs	r3, #2
 80036e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e2:	2302      	movs	r3, #2
 80036e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ea:	2303      	movs	r3, #3
 80036ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80036ee:	2305      	movs	r3, #5
 80036f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80036f2:	f107 0314 	add.w	r3, r7, #20
 80036f6:	4619      	mov	r1, r3
 80036f8:	481c      	ldr	r0, [pc, #112]	@ (800376c <MX_GPIO_Init+0x40c>)
 80036fa:	f000 ff17 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80036fe:	2378      	movs	r3, #120	@ 0x78
 8003700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003702:	2302      	movs	r3, #2
 8003704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003706:	2300      	movs	r3, #0
 8003708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800370a:	2303      	movs	r3, #3
 800370c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800370e:	2307      	movs	r3, #7
 8003710:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003712:	f107 0314 	add.w	r3, r7, #20
 8003716:	4619      	mov	r1, r3
 8003718:	4814      	ldr	r0, [pc, #80]	@ (800376c <MX_GPIO_Init+0x40c>)
 800371a:	f000 ff07 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800371e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003724:	2312      	movs	r3, #18
 8003726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003728:	2300      	movs	r3, #0
 800372a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800372c:	2303      	movs	r3, #3
 800372e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003730:	2304      	movs	r3, #4
 8003732:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003734:	f107 0314 	add.w	r3, r7, #20
 8003738:	4619      	mov	r1, r3
 800373a:	480d      	ldr	r0, [pc, #52]	@ (8003770 <MX_GPIO_Init+0x410>)
 800373c:	f000 fef6 	bl	800452c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003740:	2200      	movs	r2, #0
 8003742:	2100      	movs	r1, #0
 8003744:	2017      	movs	r0, #23
 8003746:	f000 fe5c 	bl	8004402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800374a:	2017      	movs	r0, #23
 800374c:	f000 fe75 	bl	800443a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003750:	2200      	movs	r2, #0
 8003752:	2100      	movs	r1, #0
 8003754:	2028      	movs	r0, #40	@ 0x28
 8003756:	f000 fe54 	bl	8004402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800375a:	2028      	movs	r0, #40	@ 0x28
 800375c:	f000 fe6d 	bl	800443a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003760:	bf00      	nop
 8003762:	3728      	adds	r7, #40	@ 0x28
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	48000800 	.word	0x48000800
 800376c:	48000c00 	.word	0x48000c00
 8003770:	48000400 	.word	0x48000400

08003774 <usDelay>:

/* USER CODE BEGIN 4 */
void usDelay(uint32_t uSec)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d801      	bhi.n	8003786 <usDelay+0x12>
 8003782:	2302      	movs	r3, #2
 8003784:	607b      	str	r3, [r7, #4]
	usTIM->ARR = uSec - 1; 	/*sets the value in the auto-reload register*/
 8003786:	4a13      	ldr	r2, [pc, #76]	@ (80037d4 <usDelay+0x60>)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3b01      	subs	r3, #1
 800378c:	62d3      	str	r3, [r2, #44]	@ 0x2c
	usTIM->EGR = 1; 			/*Re-initialises the timer*/
 800378e:	4b11      	ldr	r3, [pc, #68]	@ (80037d4 <usDelay+0x60>)
 8003790:	2201      	movs	r2, #1
 8003792:	615a      	str	r2, [r3, #20]
	usTIM->SR &= ~1; 		//Resets the flag
 8003794:	4b0f      	ldr	r3, [pc, #60]	@ (80037d4 <usDelay+0x60>)
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	4a0e      	ldr	r2, [pc, #56]	@ (80037d4 <usDelay+0x60>)
 800379a:	f023 0301 	bic.w	r3, r3, #1
 800379e:	6113      	str	r3, [r2, #16]
	usTIM->CR1 |= 1; 		//Enables the counter
 80037a0:	4b0c      	ldr	r3, [pc, #48]	@ (80037d4 <usDelay+0x60>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a0b      	ldr	r2, [pc, #44]	@ (80037d4 <usDelay+0x60>)
 80037a6:	f043 0301 	orr.w	r3, r3, #1
 80037aa:	6013      	str	r3, [r2, #0]
	while((usTIM->SR&0x0001) != 1);
 80037ac:	bf00      	nop
 80037ae:	4b09      	ldr	r3, [pc, #36]	@ (80037d4 <usDelay+0x60>)
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d1f9      	bne.n	80037ae <usDelay+0x3a>
	usTIM->SR &= ~(0x0001);
 80037ba:	4b06      	ldr	r3, [pc, #24]	@ (80037d4 <usDelay+0x60>)
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	4a05      	ldr	r2, [pc, #20]	@ (80037d4 <usDelay+0x60>)
 80037c0:	f023 0301 	bic.w	r3, r3, #1
 80037c4:	6113      	str	r3, [r2, #16]
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40000c00 	.word	0x40000c00

080037d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037dc:	b672      	cpsid	i
}
 80037de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037e0:	bf00      	nop
 80037e2:	e7fd      	b.n	80037e0 <Error_Handler+0x8>

080037e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003828 <HAL_MspInit+0x44>)
 80037ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ee:	4a0e      	ldr	r2, [pc, #56]	@ (8003828 <HAL_MspInit+0x44>)
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80037f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003828 <HAL_MspInit+0x44>)
 80037f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	607b      	str	r3, [r7, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003802:	4b09      	ldr	r3, [pc, #36]	@ (8003828 <HAL_MspInit+0x44>)
 8003804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003806:	4a08      	ldr	r2, [pc, #32]	@ (8003828 <HAL_MspInit+0x44>)
 8003808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800380c:	6593      	str	r3, [r2, #88]	@ 0x58
 800380e:	4b06      	ldr	r3, [pc, #24]	@ (8003828 <HAL_MspInit+0x44>)
 8003810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40021000 	.word	0x40021000

0800382c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a0a      	ldr	r2, [pc, #40]	@ (8003864 <HAL_TIM_Base_MspInit+0x38>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d10b      	bne.n	8003856 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800383e:	4b0a      	ldr	r3, [pc, #40]	@ (8003868 <HAL_TIM_Base_MspInit+0x3c>)
 8003840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003842:	4a09      	ldr	r2, [pc, #36]	@ (8003868 <HAL_TIM_Base_MspInit+0x3c>)
 8003844:	f043 0308 	orr.w	r3, r3, #8
 8003848:	6593      	str	r3, [r2, #88]	@ 0x58
 800384a:	4b07      	ldr	r3, [pc, #28]	@ (8003868 <HAL_TIM_Base_MspInit+0x3c>)
 800384c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003856:	bf00      	nop
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	40000c00 	.word	0x40000c00
 8003868:	40021000 	.word	0x40021000

0800386c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003870:	bf00      	nop
 8003872:	e7fd      	b.n	8003870 <NMI_Handler+0x4>

08003874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003878:	bf00      	nop
 800387a:	e7fd      	b.n	8003878 <HardFault_Handler+0x4>

0800387c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003880:	bf00      	nop
 8003882:	e7fd      	b.n	8003880 <MemManage_Handler+0x4>

08003884 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003888:	bf00      	nop
 800388a:	e7fd      	b.n	8003888 <BusFault_Handler+0x4>

0800388c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003890:	bf00      	nop
 8003892:	e7fd      	b.n	8003890 <UsageFault_Handler+0x4>

08003894 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003898:	bf00      	nop
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038a2:	b480      	push	{r7}
 80038a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038a6:	bf00      	nop
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038b4:	bf00      	nop
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038c2:	f000 fc7f 	bl	80041c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038c6:	bf00      	nop
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80038d0:	2020      	movs	r0, #32
 80038d2:	f001 f913 	bl	8004afc <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 80038d6:	4806      	ldr	r0, [pc, #24]	@ (80038f0 <EXTI9_5_IRQHandler+0x24>)
 80038d8:	f000 fdf8 	bl	80044cc <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80038dc:	2080      	movs	r0, #128	@ 0x80
 80038de:	f001 f90d 	bl	8004afc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80038e2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80038e6:	f001 f909 	bl	8004afc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80038ea:	bf00      	nop
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	2000027c 	.word	0x2000027c

080038f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80038f8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80038fc:	f001 f8fe 	bl	8004afc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8003900:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003904:	f001 f8fa 	bl	8004afc <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8003908:	4806      	ldr	r0, [pc, #24]	@ (8003924 <EXTI15_10_IRQHandler+0x30>)
 800390a:	f000 fddf 	bl	80044cc <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800390e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003912:	f001 f8f3 	bl	8004afc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8003916:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800391a:	f001 f8ef 	bl	8004afc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800391e:	bf00      	nop
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	20000010 	.word	0x20000010

08003928 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return 1;
 800392c:	2301      	movs	r3, #1
}
 800392e:	4618      	mov	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <_kill>:

int _kill(int pid, int sig)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003942:	f006 f8c3 	bl	8009acc <__errno>
 8003946:	4603      	mov	r3, r0
 8003948:	2216      	movs	r2, #22
 800394a:	601a      	str	r2, [r3, #0]
  return -1;
 800394c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <_exit>:

void _exit (int status)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003960:	f04f 31ff 	mov.w	r1, #4294967295
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff ffe7 	bl	8003938 <_kill>
  while (1) {}    /* Make sure we hang here */
 800396a:	bf00      	nop
 800396c:	e7fd      	b.n	800396a <_exit+0x12>

0800396e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b086      	sub	sp, #24
 8003972:	af00      	add	r7, sp, #0
 8003974:	60f8      	str	r0, [r7, #12]
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800397a:	2300      	movs	r3, #0
 800397c:	617b      	str	r3, [r7, #20]
 800397e:	e00a      	b.n	8003996 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003980:	f3af 8000 	nop.w
 8003984:	4601      	mov	r1, r0
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	60ba      	str	r2, [r7, #8]
 800398c:	b2ca      	uxtb	r2, r1
 800398e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	3301      	adds	r3, #1
 8003994:	617b      	str	r3, [r7, #20]
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	429a      	cmp	r2, r3
 800399c:	dbf0      	blt.n	8003980 <_read+0x12>
  }

  return len;
 800399e:	687b      	ldr	r3, [r7, #4]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039b4:	2300      	movs	r3, #0
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	e009      	b.n	80039ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	60ba      	str	r2, [r7, #8]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fa3e 	bl	8003e44 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	3301      	adds	r3, #1
 80039cc:	617b      	str	r3, [r7, #20]
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	dbf1      	blt.n	80039ba <_write+0x12>
  }
  return len;
 80039d6:	687b      	ldr	r3, [r7, #4]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3718      	adds	r7, #24
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <_close>:

int _close(int file)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a08:	605a      	str	r2, [r3, #4]
  return 0;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <_isatty>:

int _isatty(int file)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a20:	2301      	movs	r3, #1
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b085      	sub	sp, #20
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	60f8      	str	r0, [r7, #12]
 8003a36:	60b9      	str	r1, [r7, #8]
 8003a38:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a50:	4a14      	ldr	r2, [pc, #80]	@ (8003aa4 <_sbrk+0x5c>)
 8003a52:	4b15      	ldr	r3, [pc, #84]	@ (8003aa8 <_sbrk+0x60>)
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a5c:	4b13      	ldr	r3, [pc, #76]	@ (8003aac <_sbrk+0x64>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d102      	bne.n	8003a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a64:	4b11      	ldr	r3, [pc, #68]	@ (8003aac <_sbrk+0x64>)
 8003a66:	4a12      	ldr	r2, [pc, #72]	@ (8003ab0 <_sbrk+0x68>)
 8003a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a6a:	4b10      	ldr	r3, [pc, #64]	@ (8003aac <_sbrk+0x64>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4413      	add	r3, r2
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d207      	bcs.n	8003a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a78:	f006 f828 	bl	8009acc <__errno>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	220c      	movs	r2, #12
 8003a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a82:	f04f 33ff 	mov.w	r3, #4294967295
 8003a86:	e009      	b.n	8003a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a88:	4b08      	ldr	r3, [pc, #32]	@ (8003aac <_sbrk+0x64>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a8e:	4b07      	ldr	r3, [pc, #28]	@ (8003aac <_sbrk+0x64>)
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4413      	add	r3, r2
 8003a96:	4a05      	ldr	r2, [pc, #20]	@ (8003aac <_sbrk+0x64>)
 8003a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3718      	adds	r7, #24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	20018000 	.word	0x20018000
 8003aa8:	00000400 	.word	0x00000400
 8003aac:	20000438 	.word	0x20000438
 8003ab0:	20000970 	.word	0x20000970

08003ab4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003ab8:	4b06      	ldr	r3, [pc, #24]	@ (8003ad4 <SystemInit+0x20>)
 8003aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003abe:	4a05      	ldr	r2, [pc, #20]	@ (8003ad4 <SystemInit+0x20>)
 8003ac0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ac4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003ac8:	bf00      	nop
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	e000ed00 	.word	0xe000ed00

08003ad8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003ad8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003b10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003adc:	f7ff ffea 	bl	8003ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ae0:	480c      	ldr	r0, [pc, #48]	@ (8003b14 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ae2:	490d      	ldr	r1, [pc, #52]	@ (8003b18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8003b1c <LoopForever+0xe>)
  movs r3, #0
 8003ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ae8:	e002      	b.n	8003af0 <LoopCopyDataInit>

08003aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003aee:	3304      	adds	r3, #4

08003af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003af4:	d3f9      	bcc.n	8003aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003af6:	4a0a      	ldr	r2, [pc, #40]	@ (8003b20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003af8:	4c0a      	ldr	r4, [pc, #40]	@ (8003b24 <LoopForever+0x16>)
  movs r3, #0
 8003afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003afc:	e001      	b.n	8003b02 <LoopFillZerobss>

08003afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b00:	3204      	adds	r2, #4

08003b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b04:	d3fb      	bcc.n	8003afe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b06:	f005 ffe7 	bl	8009ad8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b0a:	f7ff fae9 	bl	80030e0 <main>

08003b0e <LoopForever>:

LoopForever:
    b LoopForever
 8003b0e:	e7fe      	b.n	8003b0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003b10:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b18:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003b1c:	0800c03c 	.word	0x0800c03c
  ldr r2, =_sbss
 8003b20:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8003b24:	2000096c 	.word	0x2000096c

08003b28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b28:	e7fe      	b.n	8003b28 <ADC1_2_IRQHandler>
	...

08003b2c <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	4a04      	ldr	r2, [pc, #16]	@ (8003b4c <BSP_LED_Init+0x20>)
 8003b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b3e:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	0800bc50 	.word	0x0800bc50

08003b50 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	4603      	mov	r3, r0
 8003b58:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8003b5a:	79fb      	ldrb	r3, [r7, #7]
 8003b5c:	4a06      	ldr	r2, [pc, #24]	@ (8003b78 <BSP_LED_Toggle+0x28>)
 8003b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b62:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003b66:	4611      	mov	r1, r2
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 ffad 	bl	8004ac8 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	20000008 	.word	0x20000008

08003b7c <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b82:	4b1c      	ldr	r3, [pc, #112]	@ (8003bf4 <LED_USER_GPIO_Init+0x78>)
 8003b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b86:	4a1b      	ldr	r2, [pc, #108]	@ (8003bf4 <LED_USER_GPIO_Init+0x78>)
 8003b88:	f043 0302 	orr.w	r3, r3, #2
 8003b8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b8e:	4b19      	ldr	r3, [pc, #100]	@ (8003bf4 <LED_USER_GPIO_Init+0x78>)
 8003b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	60bb      	str	r3, [r7, #8]
 8003b98:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b9a:	f107 030c 	add.w	r3, r7, #12
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	605a      	str	r2, [r3, #4]
 8003ba4:	609a      	str	r2, [r3, #8]
 8003ba6:	60da      	str	r2, [r3, #12]
 8003ba8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003baa:	4b12      	ldr	r3, [pc, #72]	@ (8003bf4 <LED_USER_GPIO_Init+0x78>)
 8003bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bae:	4a11      	ldr	r2, [pc, #68]	@ (8003bf4 <LED_USER_GPIO_Init+0x78>)
 8003bb0:	f043 0302 	orr.w	r3, r3, #2
 8003bb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8003bf4 <LED_USER_GPIO_Init+0x78>)
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	607b      	str	r3, [r7, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003bc8:	480b      	ldr	r0, [pc, #44]	@ (8003bf8 <LED_USER_GPIO_Init+0x7c>)
 8003bca:	f000 ff65 	bl	8004a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8003bce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003bd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8003be0:	f107 030c 	add.w	r3, r7, #12
 8003be4:	4619      	mov	r1, r3
 8003be6:	4804      	ldr	r0, [pc, #16]	@ (8003bf8 <LED_USER_GPIO_Init+0x7c>)
 8003be8:	f000 fca0 	bl	800452c <HAL_GPIO_Init>

}
 8003bec:	bf00      	nop
 8003bee:	3720      	adds	r7, #32
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	48000400 	.word	0x48000400

08003bfc <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4603      	mov	r3, r0
 8003c04:	460a      	mov	r2, r1
 8003c06:	71fb      	strb	r3, [r7, #7]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8003c10:	79fb      	ldrb	r3, [r7, #7]
 8003c12:	4a1f      	ldr	r2, [pc, #124]	@ (8003c90 <BSP_PB_Init+0x94>)
 8003c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c18:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8003c1a:	79bb      	ldrb	r3, [r7, #6]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d132      	bne.n	8003c86 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8003c20:	79fb      	ldrb	r3, [r7, #7]
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	4a1b      	ldr	r2, [pc, #108]	@ (8003c94 <BSP_PB_Init+0x98>)
 8003c26:	441a      	add	r2, r3
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	491b      	ldr	r1, [pc, #108]	@ (8003c98 <BSP_PB_Init+0x9c>)
 8003c2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c30:	4619      	mov	r1, r3
 8003c32:	4610      	mov	r0, r2
 8003c34:	f000 fc35 	bl	80044a2 <HAL_EXTI_GetHandle>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003c3e:	f06f 0303 	mvn.w	r3, #3
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	e01f      	b.n	8003c86 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8003c46:	79fb      	ldrb	r3, [r7, #7]
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	4a12      	ldr	r2, [pc, #72]	@ (8003c94 <BSP_PB_Init+0x98>)
 8003c4c:	1898      	adds	r0, r3, r2
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	4a12      	ldr	r2, [pc, #72]	@ (8003c9c <BSP_PB_Init+0xa0>)
 8003c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c56:	461a      	mov	r2, r3
 8003c58:	2100      	movs	r1, #0
 8003c5a:	f000 fc08 	bl	800446e <HAL_EXTI_RegisterCallback>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003c64:	f06f 0303 	mvn.w	r3, #3
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	e00c      	b.n	8003c86 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8003c6c:	2028      	movs	r0, #40	@ 0x28
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
 8003c70:	4a0b      	ldr	r2, [pc, #44]	@ (8003ca0 <BSP_PB_Init+0xa4>)
 8003c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c76:	2200      	movs	r2, #0
 8003c78:	4619      	mov	r1, r3
 8003c7a:	f000 fbc2 	bl	8004402 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003c7e:	2328      	movs	r3, #40	@ 0x28
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 fbda 	bl	800443a <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8003c86:	68fb      	ldr	r3, [r7, #12]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	0800bc54 	.word	0x0800bc54
 8003c94:	20000010 	.word	0x20000010
 8003c98:	0800bc58 	.word	0x0800bc58
 8003c9c:	0800bc5c 	.word	0x0800bc5c
 8003ca0:	0800bc60 	.word	0x0800bc60

08003ca4 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	4603      	mov	r3, r0
 8003cac:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8003cae:	79fb      	ldrb	r3, [r7, #7]
 8003cb0:	4a09      	ldr	r2, [pc, #36]	@ (8003cd8 <BSP_PB_GetState+0x34>)
 8003cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cb6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003cba:	4611      	mov	r1, r2
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 fed3 	bl	8004a68 <HAL_GPIO_ReadPin>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	bf0c      	ite	eq
 8003cc8:	2301      	moveq	r3, #1
 8003cca:	2300      	movne	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	2000000c 	.word	0x2000000c

08003cdc <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	f7fe fc1f 	bl	8002524 <BSP_PB_Callback>
}
 8003ce6:	bf00      	nop
 8003ce8:	bd80      	pop	{r7, pc}
	...

08003cec <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b088      	sub	sp, #32
 8003cf0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cf2:	4b19      	ldr	r3, [pc, #100]	@ (8003d58 <BUTTON_USER_GPIO_Init+0x6c>)
 8003cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cf6:	4a18      	ldr	r2, [pc, #96]	@ (8003d58 <BUTTON_USER_GPIO_Init+0x6c>)
 8003cf8:	f043 0304 	orr.w	r3, r3, #4
 8003cfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cfe:	4b16      	ldr	r3, [pc, #88]	@ (8003d58 <BUTTON_USER_GPIO_Init+0x6c>)
 8003d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	60bb      	str	r3, [r7, #8]
 8003d08:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d0a:	f107 030c 	add.w	r3, r7, #12
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	605a      	str	r2, [r3, #4]
 8003d14:	609a      	str	r2, [r3, #8]
 8003d16:	60da      	str	r2, [r3, #12]
 8003d18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8003d58 <BUTTON_USER_GPIO_Init+0x6c>)
 8003d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8003d58 <BUTTON_USER_GPIO_Init+0x6c>)
 8003d20:	f043 0304 	orr.w	r3, r3, #4
 8003d24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d26:	4b0c      	ldr	r3, [pc, #48]	@ (8003d58 <BUTTON_USER_GPIO_Init+0x6c>)
 8003d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d2a:	f003 0304 	and.w	r3, r3, #4
 8003d2e:	607b      	str	r3, [r7, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8003d32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003d38:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003d3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8003d42:	f107 030c 	add.w	r3, r7, #12
 8003d46:	4619      	mov	r1, r3
 8003d48:	4804      	ldr	r0, [pc, #16]	@ (8003d5c <BUTTON_USER_GPIO_Init+0x70>)
 8003d4a:	f000 fbef 	bl	800452c <HAL_GPIO_Init>

}
 8003d4e:	bf00      	nop
 8003d50:	3720      	adds	r7, #32
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	48000800 	.word	0x48000800

08003d60 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	4603      	mov	r3, r0
 8003d68:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8003d6e:	79fb      	ldrb	r3, [r7, #7]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d903      	bls.n	8003d7c <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003d74:	f06f 0301 	mvn.w	r3, #1
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	e025      	b.n	8003dc8 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8003d7c:	79fb      	ldrb	r3, [r7, #7]
 8003d7e:	79fa      	ldrb	r2, [r7, #7]
 8003d80:	4914      	ldr	r1, [pc, #80]	@ (8003dd4 <BSP_COM_Init+0x74>)
 8003d82:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003d86:	4814      	ldr	r0, [pc, #80]	@ (8003dd8 <BSP_COM_Init+0x78>)
 8003d88:	4613      	mov	r3, r2
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	4413      	add	r3, r2
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	4403      	add	r3, r0
 8003d92:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 8003d94:	79fa      	ldrb	r2, [r7, #7]
 8003d96:	4613      	mov	r3, r2
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	4413      	add	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	4a0e      	ldr	r2, [pc, #56]	@ (8003dd8 <BSP_COM_Init+0x78>)
 8003da0:	4413      	add	r3, r2
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 f86a 	bl	8003e7c <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8003da8:	79fa      	ldrb	r2, [r7, #7]
 8003daa:	4613      	mov	r3, r2
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	4413      	add	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	4a09      	ldr	r2, [pc, #36]	@ (8003dd8 <BSP_COM_Init+0x78>)
 8003db4:	4413      	add	r3, r2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 f810 	bl	8003ddc <MX_USART1_UART_Init>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d002      	beq.n	8003dc8 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003dc2:	f06f 0303 	mvn.w	r3, #3
 8003dc6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20000018 	.word	0x20000018
 8003dd8:	2000043c 	.word	0x2000043c

08003ddc <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a15      	ldr	r2, [pc, #84]	@ (8003e40 <MX_USART1_UART_Init+0x64>)
 8003dec:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003df4:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	220c      	movs	r2, #12
 8003e0c:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f003 f8ea 	bl	8007000 <HAL_UART_Init>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <MX_USART1_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40013800 	.word	0x40013800

08003e44 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8003e4c:	4b09      	ldr	r3, [pc, #36]	@ (8003e74 <__io_putchar+0x30>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	461a      	mov	r2, r3
 8003e52:	4613      	mov	r3, r2
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	4413      	add	r3, r2
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	4a07      	ldr	r2, [pc, #28]	@ (8003e78 <__io_putchar+0x34>)
 8003e5c:	1898      	adds	r0, r3, r2
 8003e5e:	1d39      	adds	r1, r7, #4
 8003e60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e64:	2201      	movs	r2, #1
 8003e66:	f003 f923 	bl	80070b0 <HAL_UART_Transmit>
  return ch;
 8003e6a:	687b      	ldr	r3, [r7, #4]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	200004c4 	.word	0x200004c4
 8003e78:	2000043c 	.word	0x2000043c

08003e7c <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b0ac      	sub	sp, #176	@ 0xb0
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e84:	f107 0314 	add.w	r3, r7, #20
 8003e88:	2288      	movs	r2, #136	@ 0x88
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f005 fdca 	bl	8009a26 <memset>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003e92:	2301      	movs	r3, #1
 8003e94:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003e96:	2300      	movs	r3, #0
 8003e98:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8003e9a:	f107 0314 	add.w	r3, r7, #20
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f001 fcc4 	bl	800582c <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ea4:	4b22      	ldr	r3, [pc, #136]	@ (8003f30 <USART1_MspInit+0xb4>)
 8003ea6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ea8:	4a21      	ldr	r2, [pc, #132]	@ (8003f30 <USART1_MspInit+0xb4>)
 8003eaa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003eae:	6613      	str	r3, [r2, #96]	@ 0x60
 8003eb0:	4b1f      	ldr	r3, [pc, #124]	@ (8003f30 <USART1_MspInit+0xb4>)
 8003eb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eb8:	613b      	str	r3, [r7, #16]
 8003eba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ebc:	4b1c      	ldr	r3, [pc, #112]	@ (8003f30 <USART1_MspInit+0xb4>)
 8003ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8003f30 <USART1_MspInit+0xb4>)
 8003ec2:	f043 0302 	orr.w	r3, r3, #2
 8003ec6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ec8:	4b19      	ldr	r3, [pc, #100]	@ (8003f30 <USART1_MspInit+0xb4>)
 8003eca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8003ed4:	2340      	movs	r3, #64	@ 0x40
 8003ed6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eda:	2302      	movs	r3, #2
 8003edc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 8003eec:	2307      	movs	r3, #7
 8003eee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8003ef2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	480e      	ldr	r0, [pc, #56]	@ (8003f34 <USART1_MspInit+0xb8>)
 8003efa:	f000 fb17 	bl	800452c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 8003efe:	2380      	movs	r3, #128	@ 0x80
 8003f00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f04:	2302      	movs	r3, #2
 8003f06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f10:	2303      	movs	r3, #3
 8003f12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 8003f16:	2307      	movs	r3, #7
 8003f18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8003f1c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003f20:	4619      	mov	r1, r3
 8003f22:	4804      	ldr	r0, [pc, #16]	@ (8003f34 <USART1_MspInit+0xb8>)
 8003f24:	f000 fb02 	bl	800452c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 8003f28:	bf00      	nop
 8003f2a:	37b0      	adds	r7, #176	@ 0xb0
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40021000 	.word	0x40021000
 8003f34:	48000400 	.word	0x48000400

08003f38 <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 8003f42:	4b12      	ldr	r3, [pc, #72]	@ (8003f8c <BSP_SPI3_Init+0x54>)
 8003f44:	4a12      	ldr	r2, [pc, #72]	@ (8003f90 <BSP_SPI3_Init+0x58>)
 8003f46:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 8003f48:	4b12      	ldr	r3, [pc, #72]	@ (8003f94 <BSP_SPI3_Init+0x5c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	4911      	ldr	r1, [pc, #68]	@ (8003f94 <BSP_SPI3_Init+0x5c>)
 8003f50:	600a      	str	r2, [r1, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d114      	bne.n	8003f80 <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 8003f56:	480d      	ldr	r0, [pc, #52]	@ (8003f8c <BSP_SPI3_Init+0x54>)
 8003f58:	f002 fc03 	bl	8006762 <HAL_SPI_GetState>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10e      	bne.n	8003f80 <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 8003f62:	480a      	ldr	r0, [pc, #40]	@ (8003f8c <BSP_SPI3_Init+0x54>)
 8003f64:	f000 f882 	bl	800406c <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d108      	bne.n	8003f80 <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 8003f6e:	4807      	ldr	r0, [pc, #28]	@ (8003f8c <BSP_SPI3_Init+0x54>)
 8003f70:	f000 f83a 	bl	8003fe8 <MX_SPI3_Init>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8003f7a:	f06f 0307 	mvn.w	r3, #7
 8003f7e:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8003f80:	687b      	ldr	r3, [r7, #4]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	200004c8 	.word	0x200004c8
 8003f90:	40003c00 	.word	0x40003c00
 8003f94:	2000052c 	.word	0x2000052c

08003f98 <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b088      	sub	sp, #32
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 8003faa:	88fb      	ldrh	r3, [r7, #6]
 8003fac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003fb0:	9200      	str	r2, [sp, #0]
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	68f9      	ldr	r1, [r7, #12]
 8003fb6:	4807      	ldr	r0, [pc, #28]	@ (8003fd4 <BSP_SPI3_SendRecv+0x3c>)
 8003fb8:	f002 f9b1 	bl	800631e <HAL_SPI_TransmitReceive>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8003fc2:	f06f 0305 	mvn.w	r3, #5
 8003fc6:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8003fc8:	697b      	ldr	r3, [r7, #20]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	200004c8 	.word	0x200004c8

08003fd8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003fdc:	f000 f906 	bl	80041ec <HAL_GetTick>
 8003fe0:	4603      	mov	r3, r0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	bd80      	pop	{r7, pc}
	...

08003fe8 <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8004068 <MX_SPI3_Init+0x80>)
 8003ff8:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004000:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800400e:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004022:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2218      	movs	r2, #24
 8004028:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2207      	movs	r2, #7
 8004040:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2208      	movs	r2, #8
 800404c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f002 f8b8 	bl	80061c4 <HAL_SPI_Init>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800405e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40003c00 	.word	0x40003c00

0800406c <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b08a      	sub	sp, #40	@ 0x28
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004074:	4b27      	ldr	r3, [pc, #156]	@ (8004114 <SPI3_MspInit+0xa8>)
 8004076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004078:	4a26      	ldr	r2, [pc, #152]	@ (8004114 <SPI3_MspInit+0xa8>)
 800407a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800407e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004080:	4b24      	ldr	r3, [pc, #144]	@ (8004114 <SPI3_MspInit+0xa8>)
 8004082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004084:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004088:	613b      	str	r3, [r7, #16]
 800408a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800408c:	4b21      	ldr	r3, [pc, #132]	@ (8004114 <SPI3_MspInit+0xa8>)
 800408e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004090:	4a20      	ldr	r2, [pc, #128]	@ (8004114 <SPI3_MspInit+0xa8>)
 8004092:	f043 0304 	orr.w	r3, r3, #4
 8004096:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004098:	4b1e      	ldr	r3, [pc, #120]	@ (8004114 <SPI3_MspInit+0xa8>)
 800409a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 80040a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040aa:	2302      	movs	r3, #2
 80040ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ae:	2300      	movs	r3, #0
 80040b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040b2:	2303      	movs	r3, #3
 80040b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 80040b6:	2306      	movs	r3, #6
 80040b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 80040ba:	f107 0314 	add.w	r3, r7, #20
 80040be:	4619      	mov	r1, r3
 80040c0:	4815      	ldr	r0, [pc, #84]	@ (8004118 <SPI3_MspInit+0xac>)
 80040c2:	f000 fa33 	bl	800452c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 80040c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80040ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040cc:	2302      	movs	r3, #2
 80040ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d0:	2300      	movs	r3, #0
 80040d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d4:	2303      	movs	r3, #3
 80040d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 80040d8:	2306      	movs	r3, #6
 80040da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 80040dc:	f107 0314 	add.w	r3, r7, #20
 80040e0:	4619      	mov	r1, r3
 80040e2:	480d      	ldr	r0, [pc, #52]	@ (8004118 <SPI3_MspInit+0xac>)
 80040e4:	f000 fa22 	bl	800452c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 80040e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ee:	2302      	movs	r3, #2
 80040f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040f6:	2303      	movs	r3, #3
 80040f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 80040fa:	2306      	movs	r3, #6
 80040fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80040fe:	f107 0314 	add.w	r3, r7, #20
 8004102:	4619      	mov	r1, r3
 8004104:	4804      	ldr	r0, [pc, #16]	@ (8004118 <SPI3_MspInit+0xac>)
 8004106:	f000 fa11 	bl	800452c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 800410a:	bf00      	nop
 800410c:	3728      	adds	r7, #40	@ 0x28
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40021000 	.word	0x40021000
 8004118:	48000800 	.word	0x48000800

0800411c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004126:	2003      	movs	r0, #3
 8004128:	f000 f960 	bl	80043ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800412c:	2000      	movs	r0, #0
 800412e:	f000 f80d 	bl	800414c <HAL_InitTick>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	71fb      	strb	r3, [r7, #7]
 800413c:	e001      	b.n	8004142 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800413e:	f7ff fb51 	bl	80037e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004142:	79fb      	ldrb	r3, [r7, #7]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004154:	2300      	movs	r3, #0
 8004156:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004158:	4b17      	ldr	r3, [pc, #92]	@ (80041b8 <HAL_InitTick+0x6c>)
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d023      	beq.n	80041a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004160:	4b16      	ldr	r3, [pc, #88]	@ (80041bc <HAL_InitTick+0x70>)
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	4b14      	ldr	r3, [pc, #80]	@ (80041b8 <HAL_InitTick+0x6c>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	4619      	mov	r1, r3
 800416a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800416e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004172:	fbb2 f3f3 	udiv	r3, r2, r3
 8004176:	4618      	mov	r0, r3
 8004178:	f000 f96d 	bl	8004456 <HAL_SYSTICK_Config>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10f      	bne.n	80041a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b0f      	cmp	r3, #15
 8004186:	d809      	bhi.n	800419c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004188:	2200      	movs	r2, #0
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	f04f 30ff 	mov.w	r0, #4294967295
 8004190:	f000 f937 	bl	8004402 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004194:	4a0a      	ldr	r2, [pc, #40]	@ (80041c0 <HAL_InitTick+0x74>)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	e007      	b.n	80041ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
 80041a0:	e004      	b.n	80041ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	73fb      	strb	r3, [r7, #15]
 80041a6:	e001      	b.n	80041ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20000020 	.word	0x20000020
 80041bc:	20000004 	.word	0x20000004
 80041c0:	2000001c 	.word	0x2000001c

080041c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80041c8:	4b06      	ldr	r3, [pc, #24]	@ (80041e4 <HAL_IncTick+0x20>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	461a      	mov	r2, r3
 80041ce:	4b06      	ldr	r3, [pc, #24]	@ (80041e8 <HAL_IncTick+0x24>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4413      	add	r3, r2
 80041d4:	4a04      	ldr	r2, [pc, #16]	@ (80041e8 <HAL_IncTick+0x24>)
 80041d6:	6013      	str	r3, [r2, #0]
}
 80041d8:	bf00      	nop
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	20000020 	.word	0x20000020
 80041e8:	20000530 	.word	0x20000530

080041ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  return uwTick;
 80041f0:	4b03      	ldr	r3, [pc, #12]	@ (8004200 <HAL_GetTick+0x14>)
 80041f2:	681b      	ldr	r3, [r3, #0]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	20000530 	.word	0x20000530

08004204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800420c:	f7ff ffee 	bl	80041ec <HAL_GetTick>
 8004210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421c:	d005      	beq.n	800422a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800421e:	4b0a      	ldr	r3, [pc, #40]	@ (8004248 <HAL_Delay+0x44>)
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4413      	add	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800422a:	bf00      	nop
 800422c:	f7ff ffde 	bl	80041ec <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	429a      	cmp	r2, r3
 800423a:	d8f7      	bhi.n	800422c <HAL_Delay+0x28>
  {
  }
}
 800423c:	bf00      	nop
 800423e:	bf00      	nop
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20000020 	.word	0x20000020

0800424c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800425c:	4b0c      	ldr	r3, [pc, #48]	@ (8004290 <__NVIC_SetPriorityGrouping+0x44>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004268:	4013      	ands	r3, r2
 800426a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004274:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800427c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800427e:	4a04      	ldr	r2, [pc, #16]	@ (8004290 <__NVIC_SetPriorityGrouping+0x44>)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	60d3      	str	r3, [r2, #12]
}
 8004284:	bf00      	nop
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	e000ed00 	.word	0xe000ed00

08004294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004298:	4b04      	ldr	r3, [pc, #16]	@ (80042ac <__NVIC_GetPriorityGrouping+0x18>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	0a1b      	lsrs	r3, r3, #8
 800429e:	f003 0307 	and.w	r3, r3, #7
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	e000ed00 	.word	0xe000ed00

080042b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	4603      	mov	r3, r0
 80042b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	db0b      	blt.n	80042da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042c2:	79fb      	ldrb	r3, [r7, #7]
 80042c4:	f003 021f 	and.w	r2, r3, #31
 80042c8:	4907      	ldr	r1, [pc, #28]	@ (80042e8 <__NVIC_EnableIRQ+0x38>)
 80042ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	2001      	movs	r0, #1
 80042d2:	fa00 f202 	lsl.w	r2, r0, r2
 80042d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	e000e100 	.word	0xe000e100

080042ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	4603      	mov	r3, r0
 80042f4:	6039      	str	r1, [r7, #0]
 80042f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	db0a      	blt.n	8004316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	b2da      	uxtb	r2, r3
 8004304:	490c      	ldr	r1, [pc, #48]	@ (8004338 <__NVIC_SetPriority+0x4c>)
 8004306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430a:	0112      	lsls	r2, r2, #4
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	440b      	add	r3, r1
 8004310:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004314:	e00a      	b.n	800432c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	b2da      	uxtb	r2, r3
 800431a:	4908      	ldr	r1, [pc, #32]	@ (800433c <__NVIC_SetPriority+0x50>)
 800431c:	79fb      	ldrb	r3, [r7, #7]
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	3b04      	subs	r3, #4
 8004324:	0112      	lsls	r2, r2, #4
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	440b      	add	r3, r1
 800432a:	761a      	strb	r2, [r3, #24]
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr
 8004338:	e000e100 	.word	0xe000e100
 800433c:	e000ed00 	.word	0xe000ed00

08004340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004340:	b480      	push	{r7}
 8004342:	b089      	sub	sp, #36	@ 0x24
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	f1c3 0307 	rsb	r3, r3, #7
 800435a:	2b04      	cmp	r3, #4
 800435c:	bf28      	it	cs
 800435e:	2304      	movcs	r3, #4
 8004360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	3304      	adds	r3, #4
 8004366:	2b06      	cmp	r3, #6
 8004368:	d902      	bls.n	8004370 <NVIC_EncodePriority+0x30>
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	3b03      	subs	r3, #3
 800436e:	e000      	b.n	8004372 <NVIC_EncodePriority+0x32>
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004374:	f04f 32ff 	mov.w	r2, #4294967295
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	43da      	mvns	r2, r3
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	401a      	ands	r2, r3
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004388:	f04f 31ff 	mov.w	r1, #4294967295
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	fa01 f303 	lsl.w	r3, r1, r3
 8004392:	43d9      	mvns	r1, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004398:	4313      	orrs	r3, r2
         );
}
 800439a:	4618      	mov	r0, r3
 800439c:	3724      	adds	r7, #36	@ 0x24
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
	...

080043a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043b8:	d301      	bcc.n	80043be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043ba:	2301      	movs	r3, #1
 80043bc:	e00f      	b.n	80043de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043be:	4a0a      	ldr	r2, [pc, #40]	@ (80043e8 <SysTick_Config+0x40>)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043c6:	210f      	movs	r1, #15
 80043c8:	f04f 30ff 	mov.w	r0, #4294967295
 80043cc:	f7ff ff8e 	bl	80042ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043d0:	4b05      	ldr	r3, [pc, #20]	@ (80043e8 <SysTick_Config+0x40>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043d6:	4b04      	ldr	r3, [pc, #16]	@ (80043e8 <SysTick_Config+0x40>)
 80043d8:	2207      	movs	r2, #7
 80043da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	e000e010 	.word	0xe000e010

080043ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7ff ff29 	bl	800424c <__NVIC_SetPriorityGrouping>
}
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b086      	sub	sp, #24
 8004406:	af00      	add	r7, sp, #0
 8004408:	4603      	mov	r3, r0
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	607a      	str	r2, [r7, #4]
 800440e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004414:	f7ff ff3e 	bl	8004294 <__NVIC_GetPriorityGrouping>
 8004418:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	68b9      	ldr	r1, [r7, #8]
 800441e:	6978      	ldr	r0, [r7, #20]
 8004420:	f7ff ff8e 	bl	8004340 <NVIC_EncodePriority>
 8004424:	4602      	mov	r2, r0
 8004426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800442a:	4611      	mov	r1, r2
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff ff5d 	bl	80042ec <__NVIC_SetPriority>
}
 8004432:	bf00      	nop
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b082      	sub	sp, #8
 800443e:	af00      	add	r7, sp, #0
 8004440:	4603      	mov	r3, r0
 8004442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff ff31 	bl	80042b0 <__NVIC_EnableIRQ>
}
 800444e:	bf00      	nop
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b082      	sub	sp, #8
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7ff ffa2 	bl	80043a8 <SysTick_Config>
 8004464:	4603      	mov	r3, r0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800446e:	b480      	push	{r7}
 8004470:	b087      	sub	sp, #28
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	460b      	mov	r3, r1
 8004478:	607a      	str	r2, [r7, #4]
 800447a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800447c:	2300      	movs	r3, #0
 800447e:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8004480:	7afb      	ldrb	r3, [r7, #11]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d103      	bne.n	800448e <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	605a      	str	r2, [r3, #4]
      break;
 800448c:	e002      	b.n	8004494 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	75fb      	strb	r3, [r7, #23]
      break;
 8004492:	bf00      	nop
  }

  return status;
 8004494:	7dfb      	ldrb	r3, [r7, #23]
}
 8004496:	4618      	mov	r0, r3
 8004498:	371c      	adds	r7, #28
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e003      	b.n	80044be <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80044bc:	2300      	movs	r3, #0
  }
}
 80044be:	4618      	mov	r0, r3
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
	...

080044cc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	0c1b      	lsrs	r3, r3, #16
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 031f 	and.w	r3, r3, #31
 80044e8:	2201      	movs	r2, #1
 80044ea:	fa02 f303 	lsl.w	r3, r2, r3
 80044ee:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004528 <HAL_EXTI_IRQHandler+0x5c>)
 80044f6:	4413      	add	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4013      	ands	r3, r2
 8004502:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d009      	beq.n	800451e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	4798      	blx	r3
    }
  }
}
 800451e:	bf00      	nop
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	40010414 	.word	0x40010414

0800452c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004536:	2300      	movs	r3, #0
 8004538:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800453a:	e17f      	b.n	800483c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	2101      	movs	r1, #1
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	fa01 f303 	lsl.w	r3, r1, r3
 8004548:	4013      	ands	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 8171 	beq.w	8004836 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f003 0303 	and.w	r3, r3, #3
 800455c:	2b01      	cmp	r3, #1
 800455e:	d005      	beq.n	800456c <HAL_GPIO_Init+0x40>
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f003 0303 	and.w	r3, r3, #3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d130      	bne.n	80045ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	2203      	movs	r2, #3
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	43db      	mvns	r3, r3
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4013      	ands	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	68da      	ldr	r2, [r3, #12]
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4313      	orrs	r3, r2
 8004594:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045a2:	2201      	movs	r2, #1
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	43db      	mvns	r3, r3
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	4013      	ands	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	091b      	lsrs	r3, r3, #4
 80045b8:	f003 0201 	and.w	r2, r3, #1
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	d118      	bne.n	800460c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80045e0:	2201      	movs	r2, #1
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	43db      	mvns	r3, r3
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4013      	ands	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	08db      	lsrs	r3, r3, #3
 80045f6:	f003 0201 	and.w	r2, r3, #1
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	4313      	orrs	r3, r2
 8004604:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	2b03      	cmp	r3, #3
 8004616:	d017      	beq.n	8004648 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	2203      	movs	r2, #3
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	43db      	mvns	r3, r3
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	4013      	ands	r3, r2
 800462e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	4313      	orrs	r3, r2
 8004640:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f003 0303 	and.w	r3, r3, #3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d123      	bne.n	800469c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	08da      	lsrs	r2, r3, #3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3208      	adds	r2, #8
 800465c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004660:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	220f      	movs	r2, #15
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	43db      	mvns	r3, r3
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4013      	ands	r3, r2
 8004676:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f003 0307 	and.w	r3, r3, #7
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	4313      	orrs	r3, r2
 800468c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	08da      	lsrs	r2, r3, #3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	3208      	adds	r2, #8
 8004696:	6939      	ldr	r1, [r7, #16]
 8004698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	2203      	movs	r2, #3
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	43db      	mvns	r3, r3
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	4013      	ands	r3, r2
 80046b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f003 0203 	and.w	r2, r3, #3
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 80ac 	beq.w	8004836 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046de:	4b5f      	ldr	r3, [pc, #380]	@ (800485c <HAL_GPIO_Init+0x330>)
 80046e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046e2:	4a5e      	ldr	r2, [pc, #376]	@ (800485c <HAL_GPIO_Init+0x330>)
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80046ea:	4b5c      	ldr	r3, [pc, #368]	@ (800485c <HAL_GPIO_Init+0x330>)
 80046ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	60bb      	str	r3, [r7, #8]
 80046f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80046f6:	4a5a      	ldr	r2, [pc, #360]	@ (8004860 <HAL_GPIO_Init+0x334>)
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	089b      	lsrs	r3, r3, #2
 80046fc:	3302      	adds	r3, #2
 80046fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004702:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	f003 0303 	and.w	r3, r3, #3
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	220f      	movs	r2, #15
 800470e:	fa02 f303 	lsl.w	r3, r2, r3
 8004712:	43db      	mvns	r3, r3
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	4013      	ands	r3, r2
 8004718:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004720:	d025      	beq.n	800476e <HAL_GPIO_Init+0x242>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a4f      	ldr	r2, [pc, #316]	@ (8004864 <HAL_GPIO_Init+0x338>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d01f      	beq.n	800476a <HAL_GPIO_Init+0x23e>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a4e      	ldr	r2, [pc, #312]	@ (8004868 <HAL_GPIO_Init+0x33c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d019      	beq.n	8004766 <HAL_GPIO_Init+0x23a>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a4d      	ldr	r2, [pc, #308]	@ (800486c <HAL_GPIO_Init+0x340>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d013      	beq.n	8004762 <HAL_GPIO_Init+0x236>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a4c      	ldr	r2, [pc, #304]	@ (8004870 <HAL_GPIO_Init+0x344>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d00d      	beq.n	800475e <HAL_GPIO_Init+0x232>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a4b      	ldr	r2, [pc, #300]	@ (8004874 <HAL_GPIO_Init+0x348>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d007      	beq.n	800475a <HAL_GPIO_Init+0x22e>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a4a      	ldr	r2, [pc, #296]	@ (8004878 <HAL_GPIO_Init+0x34c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d101      	bne.n	8004756 <HAL_GPIO_Init+0x22a>
 8004752:	2306      	movs	r3, #6
 8004754:	e00c      	b.n	8004770 <HAL_GPIO_Init+0x244>
 8004756:	2307      	movs	r3, #7
 8004758:	e00a      	b.n	8004770 <HAL_GPIO_Init+0x244>
 800475a:	2305      	movs	r3, #5
 800475c:	e008      	b.n	8004770 <HAL_GPIO_Init+0x244>
 800475e:	2304      	movs	r3, #4
 8004760:	e006      	b.n	8004770 <HAL_GPIO_Init+0x244>
 8004762:	2303      	movs	r3, #3
 8004764:	e004      	b.n	8004770 <HAL_GPIO_Init+0x244>
 8004766:	2302      	movs	r3, #2
 8004768:	e002      	b.n	8004770 <HAL_GPIO_Init+0x244>
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <HAL_GPIO_Init+0x244>
 800476e:	2300      	movs	r3, #0
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	f002 0203 	and.w	r2, r2, #3
 8004776:	0092      	lsls	r2, r2, #2
 8004778:	4093      	lsls	r3, r2
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004780:	4937      	ldr	r1, [pc, #220]	@ (8004860 <HAL_GPIO_Init+0x334>)
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	089b      	lsrs	r3, r3, #2
 8004786:	3302      	adds	r3, #2
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800478e:	4b3b      	ldr	r3, [pc, #236]	@ (800487c <HAL_GPIO_Init+0x350>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	43db      	mvns	r3, r3
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4013      	ands	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047b2:	4a32      	ldr	r2, [pc, #200]	@ (800487c <HAL_GPIO_Init+0x350>)
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80047b8:	4b30      	ldr	r3, [pc, #192]	@ (800487c <HAL_GPIO_Init+0x350>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	43db      	mvns	r3, r3
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	4013      	ands	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d003      	beq.n	80047dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4313      	orrs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047dc:	4a27      	ldr	r2, [pc, #156]	@ (800487c <HAL_GPIO_Init+0x350>)
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80047e2:	4b26      	ldr	r3, [pc, #152]	@ (800487c <HAL_GPIO_Init+0x350>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	43db      	mvns	r3, r3
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	4013      	ands	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4313      	orrs	r3, r2
 8004804:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004806:	4a1d      	ldr	r2, [pc, #116]	@ (800487c <HAL_GPIO_Init+0x350>)
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800480c:	4b1b      	ldr	r3, [pc, #108]	@ (800487c <HAL_GPIO_Init+0x350>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	43db      	mvns	r3, r3
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	4013      	ands	r3, r2
 800481a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d003      	beq.n	8004830 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	4313      	orrs	r3, r2
 800482e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004830:	4a12      	ldr	r2, [pc, #72]	@ (800487c <HAL_GPIO_Init+0x350>)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	3301      	adds	r3, #1
 800483a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	fa22 f303 	lsr.w	r3, r2, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	f47f ae78 	bne.w	800453c <HAL_GPIO_Init+0x10>
  }
}
 800484c:	bf00      	nop
 800484e:	bf00      	nop
 8004850:	371c      	adds	r7, #28
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	40021000 	.word	0x40021000
 8004860:	40010000 	.word	0x40010000
 8004864:	48000400 	.word	0x48000400
 8004868:	48000800 	.word	0x48000800
 800486c:	48000c00 	.word	0x48000c00
 8004870:	48001000 	.word	0x48001000
 8004874:	48001400 	.word	0x48001400
 8004878:	48001800 	.word	0x48001800
 800487c:	40010400 	.word	0x40010400

08004880 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800488a:	2300      	movs	r3, #0
 800488c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800488e:	e0cd      	b.n	8004a2c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004890:	2201      	movs	r2, #1
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	4013      	ands	r3, r2
 800489c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 80c0 	beq.w	8004a26 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80048a6:	4a68      	ldr	r2, [pc, #416]	@ (8004a48 <HAL_GPIO_DeInit+0x1c8>)
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	089b      	lsrs	r3, r3, #2
 80048ac:	3302      	adds	r3, #2
 80048ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048b2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f003 0303 	and.w	r3, r3, #3
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	220f      	movs	r2, #15
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	4013      	ands	r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80048ce:	d025      	beq.n	800491c <HAL_GPIO_DeInit+0x9c>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a5e      	ldr	r2, [pc, #376]	@ (8004a4c <HAL_GPIO_DeInit+0x1cc>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d01f      	beq.n	8004918 <HAL_GPIO_DeInit+0x98>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a5d      	ldr	r2, [pc, #372]	@ (8004a50 <HAL_GPIO_DeInit+0x1d0>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d019      	beq.n	8004914 <HAL_GPIO_DeInit+0x94>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a5c      	ldr	r2, [pc, #368]	@ (8004a54 <HAL_GPIO_DeInit+0x1d4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d013      	beq.n	8004910 <HAL_GPIO_DeInit+0x90>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a5b      	ldr	r2, [pc, #364]	@ (8004a58 <HAL_GPIO_DeInit+0x1d8>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d00d      	beq.n	800490c <HAL_GPIO_DeInit+0x8c>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a5a      	ldr	r2, [pc, #360]	@ (8004a5c <HAL_GPIO_DeInit+0x1dc>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d007      	beq.n	8004908 <HAL_GPIO_DeInit+0x88>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a59      	ldr	r2, [pc, #356]	@ (8004a60 <HAL_GPIO_DeInit+0x1e0>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d101      	bne.n	8004904 <HAL_GPIO_DeInit+0x84>
 8004900:	2306      	movs	r3, #6
 8004902:	e00c      	b.n	800491e <HAL_GPIO_DeInit+0x9e>
 8004904:	2307      	movs	r3, #7
 8004906:	e00a      	b.n	800491e <HAL_GPIO_DeInit+0x9e>
 8004908:	2305      	movs	r3, #5
 800490a:	e008      	b.n	800491e <HAL_GPIO_DeInit+0x9e>
 800490c:	2304      	movs	r3, #4
 800490e:	e006      	b.n	800491e <HAL_GPIO_DeInit+0x9e>
 8004910:	2303      	movs	r3, #3
 8004912:	e004      	b.n	800491e <HAL_GPIO_DeInit+0x9e>
 8004914:	2302      	movs	r3, #2
 8004916:	e002      	b.n	800491e <HAL_GPIO_DeInit+0x9e>
 8004918:	2301      	movs	r3, #1
 800491a:	e000      	b.n	800491e <HAL_GPIO_DeInit+0x9e>
 800491c:	2300      	movs	r3, #0
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	f002 0203 	and.w	r2, r2, #3
 8004924:	0092      	lsls	r2, r2, #2
 8004926:	4093      	lsls	r3, r2
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	429a      	cmp	r2, r3
 800492c:	d132      	bne.n	8004994 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800492e:	4b4d      	ldr	r3, [pc, #308]	@ (8004a64 <HAL_GPIO_DeInit+0x1e4>)
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	43db      	mvns	r3, r3
 8004936:	494b      	ldr	r1, [pc, #300]	@ (8004a64 <HAL_GPIO_DeInit+0x1e4>)
 8004938:	4013      	ands	r3, r2
 800493a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800493c:	4b49      	ldr	r3, [pc, #292]	@ (8004a64 <HAL_GPIO_DeInit+0x1e4>)
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	43db      	mvns	r3, r3
 8004944:	4947      	ldr	r1, [pc, #284]	@ (8004a64 <HAL_GPIO_DeInit+0x1e4>)
 8004946:	4013      	ands	r3, r2
 8004948:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800494a:	4b46      	ldr	r3, [pc, #280]	@ (8004a64 <HAL_GPIO_DeInit+0x1e4>)
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	43db      	mvns	r3, r3
 8004952:	4944      	ldr	r1, [pc, #272]	@ (8004a64 <HAL_GPIO_DeInit+0x1e4>)
 8004954:	4013      	ands	r3, r2
 8004956:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004958:	4b42      	ldr	r3, [pc, #264]	@ (8004a64 <HAL_GPIO_DeInit+0x1e4>)
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	43db      	mvns	r3, r3
 8004960:	4940      	ldr	r1, [pc, #256]	@ (8004a64 <HAL_GPIO_DeInit+0x1e4>)
 8004962:	4013      	ands	r3, r2
 8004964:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f003 0303 	and.w	r3, r3, #3
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	220f      	movs	r2, #15
 8004970:	fa02 f303 	lsl.w	r3, r2, r3
 8004974:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004976:	4a34      	ldr	r2, [pc, #208]	@ (8004a48 <HAL_GPIO_DeInit+0x1c8>)
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	089b      	lsrs	r3, r3, #2
 800497c:	3302      	adds	r3, #2
 800497e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	43da      	mvns	r2, r3
 8004986:	4830      	ldr	r0, [pc, #192]	@ (8004a48 <HAL_GPIO_DeInit+0x1c8>)
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	089b      	lsrs	r3, r3, #2
 800498c:	400a      	ands	r2, r1
 800498e:	3302      	adds	r3, #2
 8004990:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	2103      	movs	r1, #3
 800499e:	fa01 f303 	lsl.w	r3, r1, r3
 80049a2:	431a      	orrs	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	08da      	lsrs	r2, r3, #3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3208      	adds	r2, #8
 80049b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f003 0307 	and.w	r3, r3, #7
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	220f      	movs	r2, #15
 80049be:	fa02 f303 	lsl.w	r3, r2, r3
 80049c2:	43db      	mvns	r3, r3
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	08d2      	lsrs	r2, r2, #3
 80049c8:	4019      	ands	r1, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	3208      	adds	r2, #8
 80049ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689a      	ldr	r2, [r3, #8]
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	2103      	movs	r1, #3
 80049dc:	fa01 f303 	lsl.w	r3, r1, r3
 80049e0:	43db      	mvns	r3, r3
 80049e2:	401a      	ands	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	2101      	movs	r1, #1
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	fa01 f303 	lsl.w	r3, r1, r3
 80049f4:	43db      	mvns	r3, r3
 80049f6:	401a      	ands	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68da      	ldr	r2, [r3, #12]
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	2103      	movs	r1, #3
 8004a06:	fa01 f303 	lsl.w	r3, r1, r3
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	401a      	ands	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a16:	2101      	movs	r1, #1
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1e:	43db      	mvns	r3, r3
 8004a20:	401a      	ands	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	fa22 f303 	lsr.w	r3, r2, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f47f af2b 	bne.w	8004890 <HAL_GPIO_DeInit+0x10>
  }
}
 8004a3a:	bf00      	nop
 8004a3c:	bf00      	nop
 8004a3e:	371c      	adds	r7, #28
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	40010000 	.word	0x40010000
 8004a4c:	48000400 	.word	0x48000400
 8004a50:	48000800 	.word	0x48000800
 8004a54:	48000c00 	.word	0x48000c00
 8004a58:	48001000 	.word	0x48001000
 8004a5c:	48001400 	.word	0x48001400
 8004a60:	48001800 	.word	0x48001800
 8004a64:	40010400 	.word	0x40010400

08004a68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	460b      	mov	r3, r1
 8004a72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	887b      	ldrh	r3, [r7, #2]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d002      	beq.n	8004a86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a80:	2301      	movs	r3, #1
 8004a82:	73fb      	strb	r3, [r7, #15]
 8004a84:	e001      	b.n	8004a8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a86:	2300      	movs	r3, #0
 8004a88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	807b      	strh	r3, [r7, #2]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004aa8:	787b      	ldrb	r3, [r7, #1]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004aae:	887a      	ldrh	r2, [r7, #2]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ab4:	e002      	b.n	8004abc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ab6:	887a      	ldrh	r2, [r7, #2]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ada:	887a      	ldrh	r2, [r7, #2]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4013      	ands	r3, r2
 8004ae0:	041a      	lsls	r2, r3, #16
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	43d9      	mvns	r1, r3
 8004ae6:	887b      	ldrh	r3, [r7, #2]
 8004ae8:	400b      	ands	r3, r1
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	619a      	str	r2, [r3, #24]
}
 8004af0:	bf00      	nop
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	4603      	mov	r3, r0
 8004b04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b06:	4b08      	ldr	r3, [pc, #32]	@ (8004b28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b08:	695a      	ldr	r2, [r3, #20]
 8004b0a:	88fb      	ldrh	r3, [r7, #6]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d006      	beq.n	8004b20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b12:	4a05      	ldr	r2, [pc, #20]	@ (8004b28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b14:	88fb      	ldrh	r3, [r7, #6]
 8004b16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b18:	88fb      	ldrh	r3, [r7, #6]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 f806 	bl	8004b2c <HAL_GPIO_EXTI_Callback>
  }
}
 8004b20:	bf00      	nop
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	40010400 	.word	0x40010400

08004b2c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	4603      	mov	r3, r0
 8004b34:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
	...

08004b44 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b48:	4b05      	ldr	r3, [pc, #20]	@ (8004b60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a04      	ldr	r2, [pc, #16]	@ (8004b60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b52:	6013      	str	r3, [r2, #0]
}
 8004b54:	bf00      	nop
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	40007000 	.word	0x40007000

08004b64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004b68:	4b04      	ldr	r3, [pc, #16]	@ (8004b7c <HAL_PWREx_GetVoltageRange+0x18>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	40007000 	.word	0x40007000

08004b80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b8e:	d130      	bne.n	8004bf2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b90:	4b23      	ldr	r3, [pc, #140]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004b98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b9c:	d038      	beq.n	8004c10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b9e:	4b20      	ldr	r3, [pc, #128]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ba6:	4a1e      	ldr	r2, [pc, #120]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ba8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004bac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004bae:	4b1d      	ldr	r3, [pc, #116]	@ (8004c24 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2232      	movs	r2, #50	@ 0x32
 8004bb4:	fb02 f303 	mul.w	r3, r2, r3
 8004bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8004c28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004bba:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbe:	0c9b      	lsrs	r3, r3, #18
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bc4:	e002      	b.n	8004bcc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bcc:	4b14      	ldr	r3, [pc, #80]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bd8:	d102      	bne.n	8004be0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1f2      	bne.n	8004bc6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004be0:	4b0f      	ldr	r3, [pc, #60]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004be8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bec:	d110      	bne.n	8004c10 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e00f      	b.n	8004c12 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bfe:	d007      	beq.n	8004c10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c00:	4b07      	ldr	r3, [pc, #28]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c08:	4a05      	ldr	r2, [pc, #20]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c0e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	40007000 	.word	0x40007000
 8004c24:	20000004 	.word	0x20000004
 8004c28:	431bde83 	.word	0x431bde83

08004c2c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b088      	sub	sp, #32
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e3ca      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c3e:	4b97      	ldr	r3, [pc, #604]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 030c 	and.w	r3, r3, #12
 8004c46:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c48:	4b94      	ldr	r3, [pc, #592]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f003 0303 	and.w	r3, r3, #3
 8004c50:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0310 	and.w	r3, r3, #16
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 80e4 	beq.w	8004e28 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d007      	beq.n	8004c76 <HAL_RCC_OscConfig+0x4a>
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	2b0c      	cmp	r3, #12
 8004c6a:	f040 808b 	bne.w	8004d84 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	f040 8087 	bne.w	8004d84 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c76:	4b89      	ldr	r3, [pc, #548]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d005      	beq.n	8004c8e <HAL_RCC_OscConfig+0x62>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e3a2      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1a      	ldr	r2, [r3, #32]
 8004c92:	4b82      	ldr	r3, [pc, #520]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0308 	and.w	r3, r3, #8
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d004      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x7c>
 8004c9e:	4b7f      	ldr	r3, [pc, #508]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ca6:	e005      	b.n	8004cb4 <HAL_RCC_OscConfig+0x88>
 8004ca8:	4b7c      	ldr	r3, [pc, #496]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cae:	091b      	lsrs	r3, r3, #4
 8004cb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d223      	bcs.n	8004d00 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 fd55 	bl	800576c <RCC_SetFlashLatencyFromMSIRange>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e383      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ccc:	4b73      	ldr	r3, [pc, #460]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a72      	ldr	r2, [pc, #456]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004cd2:	f043 0308 	orr.w	r3, r3, #8
 8004cd6:	6013      	str	r3, [r2, #0]
 8004cd8:	4b70      	ldr	r3, [pc, #448]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	496d      	ldr	r1, [pc, #436]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cea:	4b6c      	ldr	r3, [pc, #432]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	021b      	lsls	r3, r3, #8
 8004cf8:	4968      	ldr	r1, [pc, #416]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	604b      	str	r3, [r1, #4]
 8004cfe:	e025      	b.n	8004d4c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d00:	4b66      	ldr	r3, [pc, #408]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a65      	ldr	r2, [pc, #404]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004d06:	f043 0308 	orr.w	r3, r3, #8
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	4b63      	ldr	r3, [pc, #396]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	4960      	ldr	r1, [pc, #384]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d1e:	4b5f      	ldr	r3, [pc, #380]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	021b      	lsls	r3, r3, #8
 8004d2c:	495b      	ldr	r1, [pc, #364]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d109      	bne.n	8004d4c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 fd15 	bl	800576c <RCC_SetFlashLatencyFromMSIRange>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e343      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d4c:	f000 fc4a 	bl	80055e4 <HAL_RCC_GetSysClockFreq>
 8004d50:	4602      	mov	r2, r0
 8004d52:	4b52      	ldr	r3, [pc, #328]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	091b      	lsrs	r3, r3, #4
 8004d58:	f003 030f 	and.w	r3, r3, #15
 8004d5c:	4950      	ldr	r1, [pc, #320]	@ (8004ea0 <HAL_RCC_OscConfig+0x274>)
 8004d5e:	5ccb      	ldrb	r3, [r1, r3]
 8004d60:	f003 031f 	and.w	r3, r3, #31
 8004d64:	fa22 f303 	lsr.w	r3, r2, r3
 8004d68:	4a4e      	ldr	r2, [pc, #312]	@ (8004ea4 <HAL_RCC_OscConfig+0x278>)
 8004d6a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004d6c:	4b4e      	ldr	r3, [pc, #312]	@ (8004ea8 <HAL_RCC_OscConfig+0x27c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7ff f9eb 	bl	800414c <HAL_InitTick>
 8004d76:	4603      	mov	r3, r0
 8004d78:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004d7a:	7bfb      	ldrb	r3, [r7, #15]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d052      	beq.n	8004e26 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
 8004d82:	e327      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d032      	beq.n	8004df2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d8c:	4b43      	ldr	r3, [pc, #268]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a42      	ldr	r2, [pc, #264]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004d92:	f043 0301 	orr.w	r3, r3, #1
 8004d96:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d98:	f7ff fa28 	bl	80041ec <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004da0:	f7ff fa24 	bl	80041ec <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e310      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004db2:	4b3a      	ldr	r3, [pc, #232]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f0      	beq.n	8004da0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004dbe:	4b37      	ldr	r3, [pc, #220]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a36      	ldr	r2, [pc, #216]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004dc4:	f043 0308 	orr.w	r3, r3, #8
 8004dc8:	6013      	str	r3, [r2, #0]
 8004dca:	4b34      	ldr	r3, [pc, #208]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	4931      	ldr	r1, [pc, #196]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ddc:	4b2f      	ldr	r3, [pc, #188]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	021b      	lsls	r3, r3, #8
 8004dea:	492c      	ldr	r1, [pc, #176]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	604b      	str	r3, [r1, #4]
 8004df0:	e01a      	b.n	8004e28 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004df2:	4b2a      	ldr	r3, [pc, #168]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a29      	ldr	r2, [pc, #164]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004df8:	f023 0301 	bic.w	r3, r3, #1
 8004dfc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004dfe:	f7ff f9f5 	bl	80041ec <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e06:	f7ff f9f1 	bl	80041ec <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e2dd      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004e18:	4b20      	ldr	r3, [pc, #128]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1f0      	bne.n	8004e06 <HAL_RCC_OscConfig+0x1da>
 8004e24:	e000      	b.n	8004e28 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e26:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d074      	beq.n	8004f1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	2b08      	cmp	r3, #8
 8004e38:	d005      	beq.n	8004e46 <HAL_RCC_OscConfig+0x21a>
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	2b0c      	cmp	r3, #12
 8004e3e:	d10e      	bne.n	8004e5e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d10b      	bne.n	8004e5e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e46:	4b15      	ldr	r3, [pc, #84]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d064      	beq.n	8004f1c <HAL_RCC_OscConfig+0x2f0>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d160      	bne.n	8004f1c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e2ba      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e66:	d106      	bne.n	8004e76 <HAL_RCC_OscConfig+0x24a>
 8004e68:	4b0c      	ldr	r3, [pc, #48]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a0b      	ldr	r2, [pc, #44]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004e6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e72:	6013      	str	r3, [r2, #0]
 8004e74:	e026      	b.n	8004ec4 <HAL_RCC_OscConfig+0x298>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e7e:	d115      	bne.n	8004eac <HAL_RCC_OscConfig+0x280>
 8004e80:	4b06      	ldr	r3, [pc, #24]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a05      	ldr	r2, [pc, #20]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004e86:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	4b03      	ldr	r3, [pc, #12]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a02      	ldr	r2, [pc, #8]	@ (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004e92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e96:	6013      	str	r3, [r2, #0]
 8004e98:	e014      	b.n	8004ec4 <HAL_RCC_OscConfig+0x298>
 8004e9a:	bf00      	nop
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	0800bc08 	.word	0x0800bc08
 8004ea4:	20000004 	.word	0x20000004
 8004ea8:	2000001c 	.word	0x2000001c
 8004eac:	4ba0      	ldr	r3, [pc, #640]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a9f      	ldr	r2, [pc, #636]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 8004eb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	4b9d      	ldr	r3, [pc, #628]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a9c      	ldr	r2, [pc, #624]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 8004ebe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ec2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d013      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ecc:	f7ff f98e 	bl	80041ec <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ed2:	e008      	b.n	8004ee6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ed4:	f7ff f98a 	bl	80041ec <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b64      	cmp	r3, #100	@ 0x64
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e276      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ee6:	4b92      	ldr	r3, [pc, #584]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0f0      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x2a8>
 8004ef2:	e014      	b.n	8004f1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef4:	f7ff f97a 	bl	80041ec <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004efc:	f7ff f976 	bl	80041ec <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b64      	cmp	r3, #100	@ 0x64
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e262      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f0e:	4b88      	ldr	r3, [pc, #544]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1f0      	bne.n	8004efc <HAL_RCC_OscConfig+0x2d0>
 8004f1a:	e000      	b.n	8004f1e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d060      	beq.n	8004fec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	2b04      	cmp	r3, #4
 8004f2e:	d005      	beq.n	8004f3c <HAL_RCC_OscConfig+0x310>
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	2b0c      	cmp	r3, #12
 8004f34:	d119      	bne.n	8004f6a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d116      	bne.n	8004f6a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f3c:	4b7c      	ldr	r3, [pc, #496]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d005      	beq.n	8004f54 <HAL_RCC_OscConfig+0x328>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e23f      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f54:	4b76      	ldr	r3, [pc, #472]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	061b      	lsls	r3, r3, #24
 8004f62:	4973      	ldr	r1, [pc, #460]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f68:	e040      	b.n	8004fec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d023      	beq.n	8004fba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f72:	4b6f      	ldr	r3, [pc, #444]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a6e      	ldr	r2, [pc, #440]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 8004f78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f7e:	f7ff f935 	bl	80041ec <HAL_GetTick>
 8004f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f84:	e008      	b.n	8004f98 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f86:	f7ff f931 	bl	80041ec <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d901      	bls.n	8004f98 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e21d      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f98:	4b65      	ldr	r3, [pc, #404]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0f0      	beq.n	8004f86 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fa4:	4b62      	ldr	r3, [pc, #392]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	061b      	lsls	r3, r3, #24
 8004fb2:	495f      	ldr	r1, [pc, #380]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	604b      	str	r3, [r1, #4]
 8004fb8:	e018      	b.n	8004fec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fba:	4b5d      	ldr	r3, [pc, #372]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a5c      	ldr	r2, [pc, #368]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 8004fc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc6:	f7ff f911 	bl	80041ec <HAL_GetTick>
 8004fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fcc:	e008      	b.n	8004fe0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fce:	f7ff f90d 	bl	80041ec <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e1f9      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fe0:	4b53      	ldr	r3, [pc, #332]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1f0      	bne.n	8004fce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d03c      	beq.n	8005072 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d01c      	beq.n	800503a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005000:	4b4b      	ldr	r3, [pc, #300]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 8005002:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005006:	4a4a      	ldr	r2, [pc, #296]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 8005008:	f043 0301 	orr.w	r3, r3, #1
 800500c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005010:	f7ff f8ec 	bl	80041ec <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005018:	f7ff f8e8 	bl	80041ec <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e1d4      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800502a:	4b41      	ldr	r3, [pc, #260]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 800502c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0ef      	beq.n	8005018 <HAL_RCC_OscConfig+0x3ec>
 8005038:	e01b      	b.n	8005072 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800503a:	4b3d      	ldr	r3, [pc, #244]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 800503c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005040:	4a3b      	ldr	r2, [pc, #236]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 8005042:	f023 0301 	bic.w	r3, r3, #1
 8005046:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800504a:	f7ff f8cf 	bl	80041ec <HAL_GetTick>
 800504e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005050:	e008      	b.n	8005064 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005052:	f7ff f8cb 	bl	80041ec <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d901      	bls.n	8005064 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e1b7      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005064:	4b32      	ldr	r3, [pc, #200]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 8005066:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1ef      	bne.n	8005052 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0304 	and.w	r3, r3, #4
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 80a6 	beq.w	80051cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005080:	2300      	movs	r3, #0
 8005082:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005084:	4b2a      	ldr	r3, [pc, #168]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 8005086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005088:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10d      	bne.n	80050ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005090:	4b27      	ldr	r3, [pc, #156]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 8005092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005094:	4a26      	ldr	r2, [pc, #152]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 8005096:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800509a:	6593      	str	r3, [r2, #88]	@ 0x58
 800509c:	4b24      	ldr	r3, [pc, #144]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 800509e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050a4:	60bb      	str	r3, [r7, #8]
 80050a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050a8:	2301      	movs	r3, #1
 80050aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050ac:	4b21      	ldr	r3, [pc, #132]	@ (8005134 <HAL_RCC_OscConfig+0x508>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d118      	bne.n	80050ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050b8:	4b1e      	ldr	r3, [pc, #120]	@ (8005134 <HAL_RCC_OscConfig+0x508>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005134 <HAL_RCC_OscConfig+0x508>)
 80050be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050c4:	f7ff f892 	bl	80041ec <HAL_GetTick>
 80050c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050ca:	e008      	b.n	80050de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050cc:	f7ff f88e 	bl	80041ec <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e17a      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050de:	4b15      	ldr	r3, [pc, #84]	@ (8005134 <HAL_RCC_OscConfig+0x508>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0f0      	beq.n	80050cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d108      	bne.n	8005104 <HAL_RCC_OscConfig+0x4d8>
 80050f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 80050f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050f8:	4a0d      	ldr	r2, [pc, #52]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 80050fa:	f043 0301 	orr.w	r3, r3, #1
 80050fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005102:	e029      	b.n	8005158 <HAL_RCC_OscConfig+0x52c>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	2b05      	cmp	r3, #5
 800510a:	d115      	bne.n	8005138 <HAL_RCC_OscConfig+0x50c>
 800510c:	4b08      	ldr	r3, [pc, #32]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 800510e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005112:	4a07      	ldr	r2, [pc, #28]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 8005114:	f043 0304 	orr.w	r3, r3, #4
 8005118:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800511c:	4b04      	ldr	r3, [pc, #16]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 800511e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005122:	4a03      	ldr	r2, [pc, #12]	@ (8005130 <HAL_RCC_OscConfig+0x504>)
 8005124:	f043 0301 	orr.w	r3, r3, #1
 8005128:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800512c:	e014      	b.n	8005158 <HAL_RCC_OscConfig+0x52c>
 800512e:	bf00      	nop
 8005130:	40021000 	.word	0x40021000
 8005134:	40007000 	.word	0x40007000
 8005138:	4b9c      	ldr	r3, [pc, #624]	@ (80053ac <HAL_RCC_OscConfig+0x780>)
 800513a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800513e:	4a9b      	ldr	r2, [pc, #620]	@ (80053ac <HAL_RCC_OscConfig+0x780>)
 8005140:	f023 0301 	bic.w	r3, r3, #1
 8005144:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005148:	4b98      	ldr	r3, [pc, #608]	@ (80053ac <HAL_RCC_OscConfig+0x780>)
 800514a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800514e:	4a97      	ldr	r2, [pc, #604]	@ (80053ac <HAL_RCC_OscConfig+0x780>)
 8005150:	f023 0304 	bic.w	r3, r3, #4
 8005154:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d016      	beq.n	800518e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005160:	f7ff f844 	bl	80041ec <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005166:	e00a      	b.n	800517e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005168:	f7ff f840 	bl	80041ec <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005176:	4293      	cmp	r3, r2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e12a      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800517e:	4b8b      	ldr	r3, [pc, #556]	@ (80053ac <HAL_RCC_OscConfig+0x780>)
 8005180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0ed      	beq.n	8005168 <HAL_RCC_OscConfig+0x53c>
 800518c:	e015      	b.n	80051ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800518e:	f7ff f82d 	bl	80041ec <HAL_GetTick>
 8005192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005194:	e00a      	b.n	80051ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005196:	f7ff f829 	bl	80041ec <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e113      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051ac:	4b7f      	ldr	r3, [pc, #508]	@ (80053ac <HAL_RCC_OscConfig+0x780>)
 80051ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1ed      	bne.n	8005196 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051ba:	7ffb      	ldrb	r3, [r7, #31]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d105      	bne.n	80051cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051c0:	4b7a      	ldr	r3, [pc, #488]	@ (80053ac <HAL_RCC_OscConfig+0x780>)
 80051c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051c4:	4a79      	ldr	r2, [pc, #484]	@ (80053ac <HAL_RCC_OscConfig+0x780>)
 80051c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051ca:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 80fe 	beq.w	80053d2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051da:	2b02      	cmp	r3, #2
 80051dc:	f040 80d0 	bne.w	8005380 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80051e0:	4b72      	ldr	r3, [pc, #456]	@ (80053ac <HAL_RCC_OscConfig+0x780>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f003 0203 	and.w	r2, r3, #3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d130      	bne.n	8005256 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051fe:	3b01      	subs	r3, #1
 8005200:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005202:	429a      	cmp	r2, r3
 8005204:	d127      	bne.n	8005256 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005210:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005212:	429a      	cmp	r2, r3
 8005214:	d11f      	bne.n	8005256 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005220:	2a07      	cmp	r2, #7
 8005222:	bf14      	ite	ne
 8005224:	2201      	movne	r2, #1
 8005226:	2200      	moveq	r2, #0
 8005228:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800522a:	4293      	cmp	r3, r2
 800522c:	d113      	bne.n	8005256 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005238:	085b      	lsrs	r3, r3, #1
 800523a:	3b01      	subs	r3, #1
 800523c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800523e:	429a      	cmp	r2, r3
 8005240:	d109      	bne.n	8005256 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524c:	085b      	lsrs	r3, r3, #1
 800524e:	3b01      	subs	r3, #1
 8005250:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005252:	429a      	cmp	r2, r3
 8005254:	d06e      	beq.n	8005334 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	2b0c      	cmp	r3, #12
 800525a:	d069      	beq.n	8005330 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800525c:	4b53      	ldr	r3, [pc, #332]	@ (80053ac <HAL_RCC_OscConfig+0x780>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d105      	bne.n	8005274 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005268:	4b50      	ldr	r3, [pc, #320]	@ (80053ac <HAL_RCC_OscConfig+0x780>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e0ad      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005278:	4b4c      	ldr	r3, [pc, #304]	@ (80053ac <HAL_RCC_OscConfig+0x780>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a4b      	ldr	r2, [pc, #300]	@ (80053ac <HAL_RCC_OscConfig+0x780>)
 800527e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005282:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005284:	f7fe ffb2 	bl	80041ec <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800528c:	f7fe ffae 	bl	80041ec <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e09a      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800529e:	4b43      	ldr	r3, [pc, #268]	@ (80053ac <HAL_RCC_OscConfig+0x780>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1f0      	bne.n	800528c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052aa:	4b40      	ldr	r3, [pc, #256]	@ (80053ac <HAL_RCC_OscConfig+0x780>)
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	4b40      	ldr	r3, [pc, #256]	@ (80053b0 <HAL_RCC_OscConfig+0x784>)
 80052b0:	4013      	ands	r3, r2
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80052ba:	3a01      	subs	r2, #1
 80052bc:	0112      	lsls	r2, r2, #4
 80052be:	4311      	orrs	r1, r2
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80052c4:	0212      	lsls	r2, r2, #8
 80052c6:	4311      	orrs	r1, r2
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80052cc:	0852      	lsrs	r2, r2, #1
 80052ce:	3a01      	subs	r2, #1
 80052d0:	0552      	lsls	r2, r2, #21
 80052d2:	4311      	orrs	r1, r2
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80052d8:	0852      	lsrs	r2, r2, #1
 80052da:	3a01      	subs	r2, #1
 80052dc:	0652      	lsls	r2, r2, #25
 80052de:	4311      	orrs	r1, r2
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80052e4:	0912      	lsrs	r2, r2, #4
 80052e6:	0452      	lsls	r2, r2, #17
 80052e8:	430a      	orrs	r2, r1
 80052ea:	4930      	ldr	r1, [pc, #192]	@ (80053ac <HAL_RCC_OscConfig+0x780>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80052f0:	4b2e      	ldr	r3, [pc, #184]	@ (80053ac <HAL_RCC_OscConfig+0x780>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a2d      	ldr	r2, [pc, #180]	@ (80053ac <HAL_RCC_OscConfig+0x780>)
 80052f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052fc:	4b2b      	ldr	r3, [pc, #172]	@ (80053ac <HAL_RCC_OscConfig+0x780>)
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	4a2a      	ldr	r2, [pc, #168]	@ (80053ac <HAL_RCC_OscConfig+0x780>)
 8005302:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005306:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005308:	f7fe ff70 	bl	80041ec <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005310:	f7fe ff6c 	bl	80041ec <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e058      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005322:	4b22      	ldr	r3, [pc, #136]	@ (80053ac <HAL_RCC_OscConfig+0x780>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0f0      	beq.n	8005310 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800532e:	e050      	b.n	80053d2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e04f      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005334:	4b1d      	ldr	r3, [pc, #116]	@ (80053ac <HAL_RCC_OscConfig+0x780>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d148      	bne.n	80053d2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005340:	4b1a      	ldr	r3, [pc, #104]	@ (80053ac <HAL_RCC_OscConfig+0x780>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a19      	ldr	r2, [pc, #100]	@ (80053ac <HAL_RCC_OscConfig+0x780>)
 8005346:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800534a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800534c:	4b17      	ldr	r3, [pc, #92]	@ (80053ac <HAL_RCC_OscConfig+0x780>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	4a16      	ldr	r2, [pc, #88]	@ (80053ac <HAL_RCC_OscConfig+0x780>)
 8005352:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005356:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005358:	f7fe ff48 	bl	80041ec <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005360:	f7fe ff44 	bl	80041ec <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b02      	cmp	r3, #2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e030      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005372:	4b0e      	ldr	r3, [pc, #56]	@ (80053ac <HAL_RCC_OscConfig+0x780>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0f0      	beq.n	8005360 <HAL_RCC_OscConfig+0x734>
 800537e:	e028      	b.n	80053d2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	2b0c      	cmp	r3, #12
 8005384:	d023      	beq.n	80053ce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005386:	4b09      	ldr	r3, [pc, #36]	@ (80053ac <HAL_RCC_OscConfig+0x780>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a08      	ldr	r2, [pc, #32]	@ (80053ac <HAL_RCC_OscConfig+0x780>)
 800538c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005392:	f7fe ff2b 	bl	80041ec <HAL_GetTick>
 8005396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005398:	e00c      	b.n	80053b4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800539a:	f7fe ff27 	bl	80041ec <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d905      	bls.n	80053b4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e013      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
 80053ac:	40021000 	.word	0x40021000
 80053b0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053b4:	4b09      	ldr	r3, [pc, #36]	@ (80053dc <HAL_RCC_OscConfig+0x7b0>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1ec      	bne.n	800539a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80053c0:	4b06      	ldr	r3, [pc, #24]	@ (80053dc <HAL_RCC_OscConfig+0x7b0>)
 80053c2:	68da      	ldr	r2, [r3, #12]
 80053c4:	4905      	ldr	r1, [pc, #20]	@ (80053dc <HAL_RCC_OscConfig+0x7b0>)
 80053c6:	4b06      	ldr	r3, [pc, #24]	@ (80053e0 <HAL_RCC_OscConfig+0x7b4>)
 80053c8:	4013      	ands	r3, r2
 80053ca:	60cb      	str	r3, [r1, #12]
 80053cc:	e001      	b.n	80053d2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3720      	adds	r7, #32
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40021000 	.word	0x40021000
 80053e0:	feeefffc 	.word	0xfeeefffc

080053e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e0e7      	b.n	80055c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053f8:	4b75      	ldr	r3, [pc, #468]	@ (80055d0 <HAL_RCC_ClockConfig+0x1ec>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	429a      	cmp	r2, r3
 8005404:	d910      	bls.n	8005428 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005406:	4b72      	ldr	r3, [pc, #456]	@ (80055d0 <HAL_RCC_ClockConfig+0x1ec>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f023 0207 	bic.w	r2, r3, #7
 800540e:	4970      	ldr	r1, [pc, #448]	@ (80055d0 <HAL_RCC_ClockConfig+0x1ec>)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	4313      	orrs	r3, r2
 8005414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005416:	4b6e      	ldr	r3, [pc, #440]	@ (80055d0 <HAL_RCC_ClockConfig+0x1ec>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	429a      	cmp	r2, r3
 8005422:	d001      	beq.n	8005428 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e0cf      	b.n	80055c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d010      	beq.n	8005456 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	4b66      	ldr	r3, [pc, #408]	@ (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005440:	429a      	cmp	r2, r3
 8005442:	d908      	bls.n	8005456 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005444:	4b63      	ldr	r3, [pc, #396]	@ (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	4960      	ldr	r1, [pc, #384]	@ (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005452:	4313      	orrs	r3, r2
 8005454:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d04c      	beq.n	80054fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	2b03      	cmp	r3, #3
 8005468:	d107      	bne.n	800547a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800546a:	4b5a      	ldr	r3, [pc, #360]	@ (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d121      	bne.n	80054ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e0a6      	b.n	80055c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	2b02      	cmp	r3, #2
 8005480:	d107      	bne.n	8005492 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005482:	4b54      	ldr	r3, [pc, #336]	@ (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d115      	bne.n	80054ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e09a      	b.n	80055c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d107      	bne.n	80054aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800549a:	4b4e      	ldr	r3, [pc, #312]	@ (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d109      	bne.n	80054ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e08e      	b.n	80055c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054aa:	4b4a      	ldr	r3, [pc, #296]	@ (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e086      	b.n	80055c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054ba:	4b46      	ldr	r3, [pc, #280]	@ (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f023 0203 	bic.w	r2, r3, #3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	4943      	ldr	r1, [pc, #268]	@ (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054cc:	f7fe fe8e 	bl	80041ec <HAL_GetTick>
 80054d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054d2:	e00a      	b.n	80054ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054d4:	f7fe fe8a 	bl	80041ec <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e06e      	b.n	80055c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ea:	4b3a      	ldr	r3, [pc, #232]	@ (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f003 020c 	and.w	r2, r3, #12
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d1eb      	bne.n	80054d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d010      	beq.n	800552a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	4b31      	ldr	r3, [pc, #196]	@ (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005514:	429a      	cmp	r2, r3
 8005516:	d208      	bcs.n	800552a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005518:	4b2e      	ldr	r3, [pc, #184]	@ (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	492b      	ldr	r1, [pc, #172]	@ (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005526:	4313      	orrs	r3, r2
 8005528:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800552a:	4b29      	ldr	r3, [pc, #164]	@ (80055d0 <HAL_RCC_ClockConfig+0x1ec>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0307 	and.w	r3, r3, #7
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	429a      	cmp	r2, r3
 8005536:	d210      	bcs.n	800555a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005538:	4b25      	ldr	r3, [pc, #148]	@ (80055d0 <HAL_RCC_ClockConfig+0x1ec>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f023 0207 	bic.w	r2, r3, #7
 8005540:	4923      	ldr	r1, [pc, #140]	@ (80055d0 <HAL_RCC_ClockConfig+0x1ec>)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	4313      	orrs	r3, r2
 8005546:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005548:	4b21      	ldr	r3, [pc, #132]	@ (80055d0 <HAL_RCC_ClockConfig+0x1ec>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d001      	beq.n	800555a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e036      	b.n	80055c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b00      	cmp	r3, #0
 8005564:	d008      	beq.n	8005578 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005566:	4b1b      	ldr	r3, [pc, #108]	@ (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	4918      	ldr	r1, [pc, #96]	@ (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005574:	4313      	orrs	r3, r2
 8005576:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0308 	and.w	r3, r3, #8
 8005580:	2b00      	cmp	r3, #0
 8005582:	d009      	beq.n	8005598 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005584:	4b13      	ldr	r3, [pc, #76]	@ (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	00db      	lsls	r3, r3, #3
 8005592:	4910      	ldr	r1, [pc, #64]	@ (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005594:	4313      	orrs	r3, r2
 8005596:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005598:	f000 f824 	bl	80055e4 <HAL_RCC_GetSysClockFreq>
 800559c:	4602      	mov	r2, r0
 800559e:	4b0d      	ldr	r3, [pc, #52]	@ (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	091b      	lsrs	r3, r3, #4
 80055a4:	f003 030f 	and.w	r3, r3, #15
 80055a8:	490b      	ldr	r1, [pc, #44]	@ (80055d8 <HAL_RCC_ClockConfig+0x1f4>)
 80055aa:	5ccb      	ldrb	r3, [r1, r3]
 80055ac:	f003 031f 	and.w	r3, r3, #31
 80055b0:	fa22 f303 	lsr.w	r3, r2, r3
 80055b4:	4a09      	ldr	r2, [pc, #36]	@ (80055dc <HAL_RCC_ClockConfig+0x1f8>)
 80055b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80055b8:	4b09      	ldr	r3, [pc, #36]	@ (80055e0 <HAL_RCC_ClockConfig+0x1fc>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fe fdc5 	bl	800414c <HAL_InitTick>
 80055c2:	4603      	mov	r3, r0
 80055c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80055c6:	7afb      	ldrb	r3, [r7, #11]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	40022000 	.word	0x40022000
 80055d4:	40021000 	.word	0x40021000
 80055d8:	0800bc08 	.word	0x0800bc08
 80055dc:	20000004 	.word	0x20000004
 80055e0:	2000001c 	.word	0x2000001c

080055e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b089      	sub	sp, #36	@ 0x24
 80055e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80055ea:	2300      	movs	r3, #0
 80055ec:	61fb      	str	r3, [r7, #28]
 80055ee:	2300      	movs	r3, #0
 80055f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055f2:	4b3e      	ldr	r3, [pc, #248]	@ (80056ec <HAL_RCC_GetSysClockFreq+0x108>)
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 030c 	and.w	r3, r3, #12
 80055fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055fc:	4b3b      	ldr	r3, [pc, #236]	@ (80056ec <HAL_RCC_GetSysClockFreq+0x108>)
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f003 0303 	and.w	r3, r3, #3
 8005604:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d005      	beq.n	8005618 <HAL_RCC_GetSysClockFreq+0x34>
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	2b0c      	cmp	r3, #12
 8005610:	d121      	bne.n	8005656 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d11e      	bne.n	8005656 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005618:	4b34      	ldr	r3, [pc, #208]	@ (80056ec <HAL_RCC_GetSysClockFreq+0x108>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0308 	and.w	r3, r3, #8
 8005620:	2b00      	cmp	r3, #0
 8005622:	d107      	bne.n	8005634 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005624:	4b31      	ldr	r3, [pc, #196]	@ (80056ec <HAL_RCC_GetSysClockFreq+0x108>)
 8005626:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800562a:	0a1b      	lsrs	r3, r3, #8
 800562c:	f003 030f 	and.w	r3, r3, #15
 8005630:	61fb      	str	r3, [r7, #28]
 8005632:	e005      	b.n	8005640 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005634:	4b2d      	ldr	r3, [pc, #180]	@ (80056ec <HAL_RCC_GetSysClockFreq+0x108>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	091b      	lsrs	r3, r3, #4
 800563a:	f003 030f 	and.w	r3, r3, #15
 800563e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005640:	4a2b      	ldr	r2, [pc, #172]	@ (80056f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005648:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10d      	bne.n	800566c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005654:	e00a      	b.n	800566c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	2b04      	cmp	r3, #4
 800565a:	d102      	bne.n	8005662 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800565c:	4b25      	ldr	r3, [pc, #148]	@ (80056f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800565e:	61bb      	str	r3, [r7, #24]
 8005660:	e004      	b.n	800566c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	2b08      	cmp	r3, #8
 8005666:	d101      	bne.n	800566c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005668:	4b23      	ldr	r3, [pc, #140]	@ (80056f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800566a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	2b0c      	cmp	r3, #12
 8005670:	d134      	bne.n	80056dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005672:	4b1e      	ldr	r3, [pc, #120]	@ (80056ec <HAL_RCC_GetSysClockFreq+0x108>)
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2b02      	cmp	r3, #2
 8005680:	d003      	beq.n	800568a <HAL_RCC_GetSysClockFreq+0xa6>
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2b03      	cmp	r3, #3
 8005686:	d003      	beq.n	8005690 <HAL_RCC_GetSysClockFreq+0xac>
 8005688:	e005      	b.n	8005696 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800568a:	4b1a      	ldr	r3, [pc, #104]	@ (80056f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800568c:	617b      	str	r3, [r7, #20]
      break;
 800568e:	e005      	b.n	800569c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005690:	4b19      	ldr	r3, [pc, #100]	@ (80056f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005692:	617b      	str	r3, [r7, #20]
      break;
 8005694:	e002      	b.n	800569c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	617b      	str	r3, [r7, #20]
      break;
 800569a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800569c:	4b13      	ldr	r3, [pc, #76]	@ (80056ec <HAL_RCC_GetSysClockFreq+0x108>)
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	091b      	lsrs	r3, r3, #4
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	3301      	adds	r3, #1
 80056a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80056aa:	4b10      	ldr	r3, [pc, #64]	@ (80056ec <HAL_RCC_GetSysClockFreq+0x108>)
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	0a1b      	lsrs	r3, r3, #8
 80056b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	fb03 f202 	mul.w	r2, r3, r2
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056c2:	4b0a      	ldr	r3, [pc, #40]	@ (80056ec <HAL_RCC_GetSysClockFreq+0x108>)
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	0e5b      	lsrs	r3, r3, #25
 80056c8:	f003 0303 	and.w	r3, r3, #3
 80056cc:	3301      	adds	r3, #1
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80056dc:	69bb      	ldr	r3, [r7, #24]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3724      	adds	r7, #36	@ 0x24
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	40021000 	.word	0x40021000
 80056f0:	0800bc20 	.word	0x0800bc20
 80056f4:	00f42400 	.word	0x00f42400
 80056f8:	007a1200 	.word	0x007a1200

080056fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056fc:	b480      	push	{r7}
 80056fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005700:	4b03      	ldr	r3, [pc, #12]	@ (8005710 <HAL_RCC_GetHCLKFreq+0x14>)
 8005702:	681b      	ldr	r3, [r3, #0]
}
 8005704:	4618      	mov	r0, r3
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	20000004 	.word	0x20000004

08005714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005718:	f7ff fff0 	bl	80056fc <HAL_RCC_GetHCLKFreq>
 800571c:	4602      	mov	r2, r0
 800571e:	4b06      	ldr	r3, [pc, #24]	@ (8005738 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	0a1b      	lsrs	r3, r3, #8
 8005724:	f003 0307 	and.w	r3, r3, #7
 8005728:	4904      	ldr	r1, [pc, #16]	@ (800573c <HAL_RCC_GetPCLK1Freq+0x28>)
 800572a:	5ccb      	ldrb	r3, [r1, r3]
 800572c:	f003 031f 	and.w	r3, r3, #31
 8005730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005734:	4618      	mov	r0, r3
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40021000 	.word	0x40021000
 800573c:	0800bc18 	.word	0x0800bc18

08005740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005744:	f7ff ffda 	bl	80056fc <HAL_RCC_GetHCLKFreq>
 8005748:	4602      	mov	r2, r0
 800574a:	4b06      	ldr	r3, [pc, #24]	@ (8005764 <HAL_RCC_GetPCLK2Freq+0x24>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	0adb      	lsrs	r3, r3, #11
 8005750:	f003 0307 	and.w	r3, r3, #7
 8005754:	4904      	ldr	r1, [pc, #16]	@ (8005768 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005756:	5ccb      	ldrb	r3, [r1, r3]
 8005758:	f003 031f 	and.w	r3, r3, #31
 800575c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005760:	4618      	mov	r0, r3
 8005762:	bd80      	pop	{r7, pc}
 8005764:	40021000 	.word	0x40021000
 8005768:	0800bc18 	.word	0x0800bc18

0800576c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005774:	2300      	movs	r3, #0
 8005776:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005778:	4b2a      	ldr	r3, [pc, #168]	@ (8005824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800577a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800577c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005784:	f7ff f9ee 	bl	8004b64 <HAL_PWREx_GetVoltageRange>
 8005788:	6178      	str	r0, [r7, #20]
 800578a:	e014      	b.n	80057b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800578c:	4b25      	ldr	r3, [pc, #148]	@ (8005824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800578e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005790:	4a24      	ldr	r2, [pc, #144]	@ (8005824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005792:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005796:	6593      	str	r3, [r2, #88]	@ 0x58
 8005798:	4b22      	ldr	r3, [pc, #136]	@ (8005824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800579a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800579c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057a0:	60fb      	str	r3, [r7, #12]
 80057a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80057a4:	f7ff f9de 	bl	8004b64 <HAL_PWREx_GetVoltageRange>
 80057a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80057aa:	4b1e      	ldr	r3, [pc, #120]	@ (8005824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ae:	4a1d      	ldr	r2, [pc, #116]	@ (8005824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057bc:	d10b      	bne.n	80057d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b80      	cmp	r3, #128	@ 0x80
 80057c2:	d919      	bls.n	80057f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2ba0      	cmp	r3, #160	@ 0xa0
 80057c8:	d902      	bls.n	80057d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80057ca:	2302      	movs	r3, #2
 80057cc:	613b      	str	r3, [r7, #16]
 80057ce:	e013      	b.n	80057f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80057d0:	2301      	movs	r3, #1
 80057d2:	613b      	str	r3, [r7, #16]
 80057d4:	e010      	b.n	80057f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b80      	cmp	r3, #128	@ 0x80
 80057da:	d902      	bls.n	80057e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80057dc:	2303      	movs	r3, #3
 80057de:	613b      	str	r3, [r7, #16]
 80057e0:	e00a      	b.n	80057f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b80      	cmp	r3, #128	@ 0x80
 80057e6:	d102      	bne.n	80057ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80057e8:	2302      	movs	r3, #2
 80057ea:	613b      	str	r3, [r7, #16]
 80057ec:	e004      	b.n	80057f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2b70      	cmp	r3, #112	@ 0x70
 80057f2:	d101      	bne.n	80057f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80057f4:	2301      	movs	r3, #1
 80057f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80057f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005828 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f023 0207 	bic.w	r2, r3, #7
 8005800:	4909      	ldr	r1, [pc, #36]	@ (8005828 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005808:	4b07      	ldr	r3, [pc, #28]	@ (8005828 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	429a      	cmp	r2, r3
 8005814:	d001      	beq.n	800581a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e000      	b.n	800581c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3718      	adds	r7, #24
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	40021000 	.word	0x40021000
 8005828:	40022000 	.word	0x40022000

0800582c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005834:	2300      	movs	r3, #0
 8005836:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005838:	2300      	movs	r3, #0
 800583a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005844:	2b00      	cmp	r3, #0
 8005846:	d041      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800584c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005850:	d02a      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005852:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005856:	d824      	bhi.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005858:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800585c:	d008      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800585e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005862:	d81e      	bhi.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00a      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005868:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800586c:	d010      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800586e:	e018      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005870:	4b86      	ldr	r3, [pc, #536]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	4a85      	ldr	r2, [pc, #532]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005876:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800587a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800587c:	e015      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	3304      	adds	r3, #4
 8005882:	2100      	movs	r1, #0
 8005884:	4618      	mov	r0, r3
 8005886:	f000 facb 	bl	8005e20 <RCCEx_PLLSAI1_Config>
 800588a:	4603      	mov	r3, r0
 800588c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800588e:	e00c      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	3320      	adds	r3, #32
 8005894:	2100      	movs	r1, #0
 8005896:	4618      	mov	r0, r3
 8005898:	f000 fbb6 	bl	8006008 <RCCEx_PLLSAI2_Config>
 800589c:	4603      	mov	r3, r0
 800589e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80058a0:	e003      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	74fb      	strb	r3, [r7, #19]
      break;
 80058a6:	e000      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80058a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058aa:	7cfb      	ldrb	r3, [r7, #19]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10b      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058b0:	4b76      	ldr	r3, [pc, #472]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058be:	4973      	ldr	r1, [pc, #460]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80058c6:	e001      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c8:	7cfb      	ldrb	r3, [r7, #19]
 80058ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d041      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80058e0:	d02a      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80058e2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80058e6:	d824      	bhi.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80058e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058ec:	d008      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80058ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058f2:	d81e      	bhi.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00a      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80058f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058fc:	d010      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80058fe:	e018      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005900:	4b62      	ldr	r3, [pc, #392]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	4a61      	ldr	r2, [pc, #388]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005906:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800590a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800590c:	e015      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	3304      	adds	r3, #4
 8005912:	2100      	movs	r1, #0
 8005914:	4618      	mov	r0, r3
 8005916:	f000 fa83 	bl	8005e20 <RCCEx_PLLSAI1_Config>
 800591a:	4603      	mov	r3, r0
 800591c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800591e:	e00c      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	3320      	adds	r3, #32
 8005924:	2100      	movs	r1, #0
 8005926:	4618      	mov	r0, r3
 8005928:	f000 fb6e 	bl	8006008 <RCCEx_PLLSAI2_Config>
 800592c:	4603      	mov	r3, r0
 800592e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005930:	e003      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	74fb      	strb	r3, [r7, #19]
      break;
 8005936:	e000      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005938:	bf00      	nop
    }

    if(ret == HAL_OK)
 800593a:	7cfb      	ldrb	r3, [r7, #19]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10b      	bne.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005940:	4b52      	ldr	r3, [pc, #328]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005946:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800594e:	494f      	ldr	r1, [pc, #316]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005950:	4313      	orrs	r3, r2
 8005952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005956:	e001      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005958:	7cfb      	ldrb	r3, [r7, #19]
 800595a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 80a0 	beq.w	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800596a:	2300      	movs	r3, #0
 800596c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800596e:	4b47      	ldr	r3, [pc, #284]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800597a:	2301      	movs	r3, #1
 800597c:	e000      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800597e:	2300      	movs	r3, #0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00d      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005984:	4b41      	ldr	r3, [pc, #260]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005988:	4a40      	ldr	r2, [pc, #256]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800598a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800598e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005990:	4b3e      	ldr	r3, [pc, #248]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005994:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005998:	60bb      	str	r3, [r7, #8]
 800599a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800599c:	2301      	movs	r3, #1
 800599e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059a0:	4b3b      	ldr	r3, [pc, #236]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a3a      	ldr	r2, [pc, #232]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80059a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059ac:	f7fe fc1e 	bl	80041ec <HAL_GetTick>
 80059b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80059b2:	e009      	b.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059b4:	f7fe fc1a 	bl	80041ec <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d902      	bls.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	74fb      	strb	r3, [r7, #19]
        break;
 80059c6:	e005      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80059c8:	4b31      	ldr	r3, [pc, #196]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d0ef      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80059d4:	7cfb      	ldrb	r3, [r7, #19]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d15c      	bne.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80059da:	4b2c      	ldr	r3, [pc, #176]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d01f      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d019      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80059f8:	4b24      	ldr	r3, [pc, #144]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a04:	4b21      	ldr	r3, [pc, #132]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a0a:	4a20      	ldr	r2, [pc, #128]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a14:	4b1d      	ldr	r3, [pc, #116]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a24:	4a19      	ldr	r2, [pc, #100]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d016      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a36:	f7fe fbd9 	bl	80041ec <HAL_GetTick>
 8005a3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a3c:	e00b      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a3e:	f7fe fbd5 	bl	80041ec <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d902      	bls.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	74fb      	strb	r3, [r7, #19]
            break;
 8005a54:	e006      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a56:	4b0d      	ldr	r3, [pc, #52]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d0ec      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005a64:	7cfb      	ldrb	r3, [r7, #19]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10c      	bne.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a6a:	4b08      	ldr	r3, [pc, #32]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a7a:	4904      	ldr	r1, [pc, #16]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005a82:	e009      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a84:	7cfb      	ldrb	r3, [r7, #19]
 8005a86:	74bb      	strb	r3, [r7, #18]
 8005a88:	e006      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005a8a:	bf00      	nop
 8005a8c:	40021000 	.word	0x40021000
 8005a90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a94:	7cfb      	ldrb	r3, [r7, #19]
 8005a96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a98:	7c7b      	ldrb	r3, [r7, #17]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d105      	bne.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a9e:	4b9e      	ldr	r3, [pc, #632]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aa2:	4a9d      	ldr	r2, [pc, #628]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aa4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005aa8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ab6:	4b98      	ldr	r3, [pc, #608]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005abc:	f023 0203 	bic.w	r2, r3, #3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac4:	4994      	ldr	r1, [pc, #592]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00a      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ad8:	4b8f      	ldr	r3, [pc, #572]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ade:	f023 020c 	bic.w	r2, r3, #12
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ae6:	498c      	ldr	r1, [pc, #560]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0304 	and.w	r3, r3, #4
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00a      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005afa:	4b87      	ldr	r3, [pc, #540]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b00:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b08:	4983      	ldr	r1, [pc, #524]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0308 	and.w	r3, r3, #8
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00a      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b1c:	4b7e      	ldr	r3, [pc, #504]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b22:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b2a:	497b      	ldr	r1, [pc, #492]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0310 	and.w	r3, r3, #16
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00a      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b3e:	4b76      	ldr	r3, [pc, #472]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b4c:	4972      	ldr	r1, [pc, #456]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0320 	and.w	r3, r3, #32
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00a      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b60:	4b6d      	ldr	r3, [pc, #436]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b66:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b6e:	496a      	ldr	r1, [pc, #424]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00a      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b82:	4b65      	ldr	r3, [pc, #404]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b88:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b90:	4961      	ldr	r1, [pc, #388]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00a      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ba4:	4b5c      	ldr	r3, [pc, #368]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005baa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bb2:	4959      	ldr	r1, [pc, #356]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00a      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005bc6:	4b54      	ldr	r3, [pc, #336]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bcc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bd4:	4950      	ldr	r1, [pc, #320]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00a      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005be8:	4b4b      	ldr	r3, [pc, #300]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf6:	4948      	ldr	r1, [pc, #288]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00a      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c0a:	4b43      	ldr	r3, [pc, #268]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c10:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c18:	493f      	ldr	r1, [pc, #252]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d028      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c2c:	4b3a      	ldr	r3, [pc, #232]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c32:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c3a:	4937      	ldr	r1, [pc, #220]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c4a:	d106      	bne.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c4c:	4b32      	ldr	r3, [pc, #200]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	4a31      	ldr	r2, [pc, #196]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c56:	60d3      	str	r3, [r2, #12]
 8005c58:	e011      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c5e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c62:	d10c      	bne.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3304      	adds	r3, #4
 8005c68:	2101      	movs	r1, #1
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 f8d8 	bl	8005e20 <RCCEx_PLLSAI1_Config>
 8005c70:	4603      	mov	r3, r0
 8005c72:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005c74:	7cfb      	ldrb	r3, [r7, #19]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005c7a:	7cfb      	ldrb	r3, [r7, #19]
 8005c7c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d028      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c8a:	4b23      	ldr	r3, [pc, #140]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c90:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c98:	491f      	ldr	r1, [pc, #124]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ca4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ca8:	d106      	bne.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005caa:	4b1b      	ldr	r3, [pc, #108]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	4a1a      	ldr	r2, [pc, #104]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cb0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cb4:	60d3      	str	r3, [r2, #12]
 8005cb6:	e011      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cbc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005cc0:	d10c      	bne.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	3304      	adds	r3, #4
 8005cc6:	2101      	movs	r1, #1
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 f8a9 	bl	8005e20 <RCCEx_PLLSAI1_Config>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cd2:	7cfb      	ldrb	r3, [r7, #19]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005cd8:	7cfb      	ldrb	r3, [r7, #19]
 8005cda:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d02b      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cf6:	4908      	ldr	r1, [pc, #32]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d06:	d109      	bne.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d08:	4b03      	ldr	r3, [pc, #12]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	4a02      	ldr	r2, [pc, #8]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d12:	60d3      	str	r3, [r2, #12]
 8005d14:	e014      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005d16:	bf00      	nop
 8005d18:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d24:	d10c      	bne.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	3304      	adds	r3, #4
 8005d2a:	2101      	movs	r1, #1
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 f877 	bl	8005e20 <RCCEx_PLLSAI1_Config>
 8005d32:	4603      	mov	r3, r0
 8005d34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d36:	7cfb      	ldrb	r3, [r7, #19]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005d3c:	7cfb      	ldrb	r3, [r7, #19]
 8005d3e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d02f      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d4c:	4b2b      	ldr	r3, [pc, #172]	@ (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d52:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d5a:	4928      	ldr	r1, [pc, #160]	@ (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d6a:	d10d      	bne.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	2102      	movs	r1, #2
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 f854 	bl	8005e20 <RCCEx_PLLSAI1_Config>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d7c:	7cfb      	ldrb	r3, [r7, #19]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d014      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005d82:	7cfb      	ldrb	r3, [r7, #19]
 8005d84:	74bb      	strb	r3, [r7, #18]
 8005d86:	e011      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d90:	d10c      	bne.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	3320      	adds	r3, #32
 8005d96:	2102      	movs	r1, #2
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f000 f935 	bl	8006008 <RCCEx_PLLSAI2_Config>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005da2:	7cfb      	ldrb	r3, [r7, #19]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d001      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005da8:	7cfb      	ldrb	r3, [r7, #19]
 8005daa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00a      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005db8:	4b10      	ldr	r3, [pc, #64]	@ (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dbe:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005dc6:	490d      	ldr	r1, [pc, #52]	@ (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00b      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005dda:	4b08      	ldr	r3, [pc, #32]	@ (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005de0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dea:	4904      	ldr	r1, [pc, #16]	@ (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005df2:	7cbb      	ldrb	r3, [r7, #18]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3718      	adds	r7, #24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	40021000 	.word	0x40021000

08005e00 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005e04:	4b05      	ldr	r3, [pc, #20]	@ (8005e1c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a04      	ldr	r2, [pc, #16]	@ (8005e1c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005e0a:	f043 0304 	orr.w	r3, r3, #4
 8005e0e:	6013      	str	r3, [r2, #0]
}
 8005e10:	bf00      	nop
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	40021000 	.word	0x40021000

08005e20 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e2e:	4b75      	ldr	r3, [pc, #468]	@ (8006004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	f003 0303 	and.w	r3, r3, #3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d018      	beq.n	8005e6c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005e3a:	4b72      	ldr	r3, [pc, #456]	@ (8006004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f003 0203 	and.w	r2, r3, #3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d10d      	bne.n	8005e66 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
       ||
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d009      	beq.n	8005e66 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005e52:	4b6c      	ldr	r3, [pc, #432]	@ (8006004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	091b      	lsrs	r3, r3, #4
 8005e58:	f003 0307 	and.w	r3, r3, #7
 8005e5c:	1c5a      	adds	r2, r3, #1
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
       ||
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d047      	beq.n	8005ef6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	73fb      	strb	r3, [r7, #15]
 8005e6a:	e044      	b.n	8005ef6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2b03      	cmp	r3, #3
 8005e72:	d018      	beq.n	8005ea6 <RCCEx_PLLSAI1_Config+0x86>
 8005e74:	2b03      	cmp	r3, #3
 8005e76:	d825      	bhi.n	8005ec4 <RCCEx_PLLSAI1_Config+0xa4>
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d002      	beq.n	8005e82 <RCCEx_PLLSAI1_Config+0x62>
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d009      	beq.n	8005e94 <RCCEx_PLLSAI1_Config+0x74>
 8005e80:	e020      	b.n	8005ec4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e82:	4b60      	ldr	r3, [pc, #384]	@ (8006004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d11d      	bne.n	8005eca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e92:	e01a      	b.n	8005eca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005e94:	4b5b      	ldr	r3, [pc, #364]	@ (8006004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d116      	bne.n	8005ece <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ea4:	e013      	b.n	8005ece <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ea6:	4b57      	ldr	r3, [pc, #348]	@ (8006004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10f      	bne.n	8005ed2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005eb2:	4b54      	ldr	r3, [pc, #336]	@ (8006004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d109      	bne.n	8005ed2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ec2:	e006      	b.n	8005ed2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ec8:	e004      	b.n	8005ed4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005eca:	bf00      	nop
 8005ecc:	e002      	b.n	8005ed4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005ece:	bf00      	nop
 8005ed0:	e000      	b.n	8005ed4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005ed2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ed4:	7bfb      	ldrb	r3, [r7, #15]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10d      	bne.n	8005ef6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005eda:	4b4a      	ldr	r3, [pc, #296]	@ (8006004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6819      	ldr	r1, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	3b01      	subs	r3, #1
 8005eec:	011b      	lsls	r3, r3, #4
 8005eee:	430b      	orrs	r3, r1
 8005ef0:	4944      	ldr	r1, [pc, #272]	@ (8006004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005ef6:	7bfb      	ldrb	r3, [r7, #15]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d17d      	bne.n	8005ff8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005efc:	4b41      	ldr	r3, [pc, #260]	@ (8006004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a40      	ldr	r2, [pc, #256]	@ (8006004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f02:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f08:	f7fe f970 	bl	80041ec <HAL_GetTick>
 8005f0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f0e:	e009      	b.n	8005f24 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f10:	f7fe f96c 	bl	80041ec <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d902      	bls.n	8005f24 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	73fb      	strb	r3, [r7, #15]
        break;
 8005f22:	e005      	b.n	8005f30 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f24:	4b37      	ldr	r3, [pc, #220]	@ (8006004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1ef      	bne.n	8005f10 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d160      	bne.n	8005ff8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d111      	bne.n	8005f60 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f3c:	4b31      	ldr	r3, [pc, #196]	@ (8006004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005f44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	6892      	ldr	r2, [r2, #8]
 8005f4c:	0211      	lsls	r1, r2, #8
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	68d2      	ldr	r2, [r2, #12]
 8005f52:	0912      	lsrs	r2, r2, #4
 8005f54:	0452      	lsls	r2, r2, #17
 8005f56:	430a      	orrs	r2, r1
 8005f58:	492a      	ldr	r1, [pc, #168]	@ (8006004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	610b      	str	r3, [r1, #16]
 8005f5e:	e027      	b.n	8005fb0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d112      	bne.n	8005f8c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f66:	4b27      	ldr	r3, [pc, #156]	@ (8006004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005f6e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	6892      	ldr	r2, [r2, #8]
 8005f76:	0211      	lsls	r1, r2, #8
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	6912      	ldr	r2, [r2, #16]
 8005f7c:	0852      	lsrs	r2, r2, #1
 8005f7e:	3a01      	subs	r2, #1
 8005f80:	0552      	lsls	r2, r2, #21
 8005f82:	430a      	orrs	r2, r1
 8005f84:	491f      	ldr	r1, [pc, #124]	@ (8006004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	610b      	str	r3, [r1, #16]
 8005f8a:	e011      	b.n	8005fb0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8006004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005f94:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	6892      	ldr	r2, [r2, #8]
 8005f9c:	0211      	lsls	r1, r2, #8
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	6952      	ldr	r2, [r2, #20]
 8005fa2:	0852      	lsrs	r2, r2, #1
 8005fa4:	3a01      	subs	r2, #1
 8005fa6:	0652      	lsls	r2, r2, #25
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	4916      	ldr	r1, [pc, #88]	@ (8006004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005fb0:	4b14      	ldr	r3, [pc, #80]	@ (8006004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a13      	ldr	r2, [pc, #76]	@ (8006004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fb6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005fba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fbc:	f7fe f916 	bl	80041ec <HAL_GetTick>
 8005fc0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005fc2:	e009      	b.n	8005fd8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fc4:	f7fe f912 	bl	80041ec <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d902      	bls.n	8005fd8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	73fb      	strb	r3, [r7, #15]
          break;
 8005fd6:	e005      	b.n	8005fe4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8006004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d0ef      	beq.n	8005fc4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d106      	bne.n	8005ff8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005fea:	4b06      	ldr	r3, [pc, #24]	@ (8006004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fec:	691a      	ldr	r2, [r3, #16]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	4904      	ldr	r1, [pc, #16]	@ (8006004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	40021000 	.word	0x40021000

08006008 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006016:	4b6a      	ldr	r3, [pc, #424]	@ (80061c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	f003 0303 	and.w	r3, r3, #3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d018      	beq.n	8006054 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006022:	4b67      	ldr	r3, [pc, #412]	@ (80061c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	f003 0203 	and.w	r2, r3, #3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	429a      	cmp	r2, r3
 8006030:	d10d      	bne.n	800604e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
       ||
 8006036:	2b00      	cmp	r3, #0
 8006038:	d009      	beq.n	800604e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800603a:	4b61      	ldr	r3, [pc, #388]	@ (80061c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	091b      	lsrs	r3, r3, #4
 8006040:	f003 0307 	and.w	r3, r3, #7
 8006044:	1c5a      	adds	r2, r3, #1
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
       ||
 800604a:	429a      	cmp	r2, r3
 800604c:	d047      	beq.n	80060de <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	73fb      	strb	r3, [r7, #15]
 8006052:	e044      	b.n	80060de <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b03      	cmp	r3, #3
 800605a:	d018      	beq.n	800608e <RCCEx_PLLSAI2_Config+0x86>
 800605c:	2b03      	cmp	r3, #3
 800605e:	d825      	bhi.n	80060ac <RCCEx_PLLSAI2_Config+0xa4>
 8006060:	2b01      	cmp	r3, #1
 8006062:	d002      	beq.n	800606a <RCCEx_PLLSAI2_Config+0x62>
 8006064:	2b02      	cmp	r3, #2
 8006066:	d009      	beq.n	800607c <RCCEx_PLLSAI2_Config+0x74>
 8006068:	e020      	b.n	80060ac <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800606a:	4b55      	ldr	r3, [pc, #340]	@ (80061c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0302 	and.w	r3, r3, #2
 8006072:	2b00      	cmp	r3, #0
 8006074:	d11d      	bne.n	80060b2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800607a:	e01a      	b.n	80060b2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800607c:	4b50      	ldr	r3, [pc, #320]	@ (80061c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006084:	2b00      	cmp	r3, #0
 8006086:	d116      	bne.n	80060b6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800608c:	e013      	b.n	80060b6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800608e:	4b4c      	ldr	r3, [pc, #304]	@ (80061c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10f      	bne.n	80060ba <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800609a:	4b49      	ldr	r3, [pc, #292]	@ (80061c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d109      	bne.n	80060ba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80060aa:	e006      	b.n	80060ba <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	73fb      	strb	r3, [r7, #15]
      break;
 80060b0:	e004      	b.n	80060bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80060b2:	bf00      	nop
 80060b4:	e002      	b.n	80060bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80060b6:	bf00      	nop
 80060b8:	e000      	b.n	80060bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80060ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10d      	bne.n	80060de <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80060c2:	4b3f      	ldr	r3, [pc, #252]	@ (80061c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6819      	ldr	r1, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	3b01      	subs	r3, #1
 80060d4:	011b      	lsls	r3, r3, #4
 80060d6:	430b      	orrs	r3, r1
 80060d8:	4939      	ldr	r1, [pc, #228]	@ (80061c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80060de:	7bfb      	ldrb	r3, [r7, #15]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d167      	bne.n	80061b4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80060e4:	4b36      	ldr	r3, [pc, #216]	@ (80061c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a35      	ldr	r2, [pc, #212]	@ (80061c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060f0:	f7fe f87c 	bl	80041ec <HAL_GetTick>
 80060f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80060f6:	e009      	b.n	800610c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80060f8:	f7fe f878 	bl	80041ec <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	2b02      	cmp	r3, #2
 8006104:	d902      	bls.n	800610c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	73fb      	strb	r3, [r7, #15]
        break;
 800610a:	e005      	b.n	8006118 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800610c:	4b2c      	ldr	r3, [pc, #176]	@ (80061c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1ef      	bne.n	80060f8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006118:	7bfb      	ldrb	r3, [r7, #15]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d14a      	bne.n	80061b4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d111      	bne.n	8006148 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006124:	4b26      	ldr	r3, [pc, #152]	@ (80061c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800612c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	6892      	ldr	r2, [r2, #8]
 8006134:	0211      	lsls	r1, r2, #8
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	68d2      	ldr	r2, [r2, #12]
 800613a:	0912      	lsrs	r2, r2, #4
 800613c:	0452      	lsls	r2, r2, #17
 800613e:	430a      	orrs	r2, r1
 8006140:	491f      	ldr	r1, [pc, #124]	@ (80061c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006142:	4313      	orrs	r3, r2
 8006144:	614b      	str	r3, [r1, #20]
 8006146:	e011      	b.n	800616c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006148:	4b1d      	ldr	r3, [pc, #116]	@ (80061c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006150:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	6892      	ldr	r2, [r2, #8]
 8006158:	0211      	lsls	r1, r2, #8
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	6912      	ldr	r2, [r2, #16]
 800615e:	0852      	lsrs	r2, r2, #1
 8006160:	3a01      	subs	r2, #1
 8006162:	0652      	lsls	r2, r2, #25
 8006164:	430a      	orrs	r2, r1
 8006166:	4916      	ldr	r1, [pc, #88]	@ (80061c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006168:	4313      	orrs	r3, r2
 800616a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800616c:	4b14      	ldr	r3, [pc, #80]	@ (80061c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a13      	ldr	r2, [pc, #76]	@ (80061c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006172:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006176:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006178:	f7fe f838 	bl	80041ec <HAL_GetTick>
 800617c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800617e:	e009      	b.n	8006194 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006180:	f7fe f834 	bl	80041ec <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b02      	cmp	r3, #2
 800618c:	d902      	bls.n	8006194 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	73fb      	strb	r3, [r7, #15]
          break;
 8006192:	e005      	b.n	80061a0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006194:	4b0a      	ldr	r3, [pc, #40]	@ (80061c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0ef      	beq.n	8006180 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d106      	bne.n	80061b4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80061a6:	4b06      	ldr	r3, [pc, #24]	@ (80061c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061a8:	695a      	ldr	r2, [r3, #20]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	4904      	ldr	r1, [pc, #16]	@ (80061c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	40021000 	.word	0x40021000

080061c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e095      	b.n	8006302 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d108      	bne.n	80061f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061e6:	d009      	beq.n	80061fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	61da      	str	r2, [r3, #28]
 80061ee:	e005      	b.n	80061fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d106      	bne.n	800621c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f877 	bl	800630a <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2202      	movs	r2, #2
 8006220:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006232:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800623c:	d902      	bls.n	8006244 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800623e:	2300      	movs	r3, #0
 8006240:	60fb      	str	r3, [r7, #12]
 8006242:	e002      	b.n	800624a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006244:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006248:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006252:	d007      	beq.n	8006264 <HAL_SPI_Init+0xa0>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800625c:	d002      	beq.n	8006264 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006274:	431a      	orrs	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	431a      	orrs	r2, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	431a      	orrs	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006292:	431a      	orrs	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	69db      	ldr	r3, [r3, #28]
 8006298:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800629c:	431a      	orrs	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062a6:	ea42 0103 	orr.w	r1, r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ae:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	0c1b      	lsrs	r3, r3, #16
 80062c0:	f003 0204 	and.w	r2, r3, #4
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c8:	f003 0310 	and.w	r3, r3, #16
 80062cc:	431a      	orrs	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062d2:	f003 0308 	and.w	r3, r3, #8
 80062d6:	431a      	orrs	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80062e0:	ea42 0103 	orr.w	r1, r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	430a      	orrs	r2, r1
 80062f0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800630a:	b480      	push	{r7}
 800630c:	b083      	sub	sp, #12
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006312:	bf00      	nop
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b08a      	sub	sp, #40	@ 0x28
 8006322:	af00      	add	r7, sp, #0
 8006324:	60f8      	str	r0, [r7, #12]
 8006326:	60b9      	str	r1, [r7, #8]
 8006328:	607a      	str	r2, [r7, #4]
 800632a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800632c:	2301      	movs	r3, #1
 800632e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006330:	2300      	movs	r3, #0
 8006332:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800633c:	2b01      	cmp	r3, #1
 800633e:	d101      	bne.n	8006344 <HAL_SPI_TransmitReceive+0x26>
 8006340:	2302      	movs	r3, #2
 8006342:	e20a      	b.n	800675a <HAL_SPI_TransmitReceive+0x43c>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800634c:	f7fd ff4e 	bl	80041ec <HAL_GetTick>
 8006350:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006358:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006360:	887b      	ldrh	r3, [r7, #2]
 8006362:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006364:	887b      	ldrh	r3, [r7, #2]
 8006366:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006368:	7efb      	ldrb	r3, [r7, #27]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d00e      	beq.n	800638c <HAL_SPI_TransmitReceive+0x6e>
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006374:	d106      	bne.n	8006384 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d102      	bne.n	8006384 <HAL_SPI_TransmitReceive+0x66>
 800637e:	7efb      	ldrb	r3, [r7, #27]
 8006380:	2b04      	cmp	r3, #4
 8006382:	d003      	beq.n	800638c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006384:	2302      	movs	r3, #2
 8006386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800638a:	e1e0      	b.n	800674e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d005      	beq.n	800639e <HAL_SPI_TransmitReceive+0x80>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <HAL_SPI_TransmitReceive+0x80>
 8006398:	887b      	ldrh	r3, [r7, #2]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d103      	bne.n	80063a6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80063a4:	e1d3      	b.n	800674e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b04      	cmp	r3, #4
 80063b0:	d003      	beq.n	80063ba <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2205      	movs	r2, #5
 80063b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	887a      	ldrh	r2, [r7, #2]
 80063ca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	887a      	ldrh	r2, [r7, #2]
 80063d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	887a      	ldrh	r2, [r7, #2]
 80063e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	887a      	ldrh	r2, [r7, #2]
 80063e6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80063fc:	d802      	bhi.n	8006404 <HAL_SPI_TransmitReceive+0xe6>
 80063fe:	8a3b      	ldrh	r3, [r7, #16]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d908      	bls.n	8006416 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006412:	605a      	str	r2, [r3, #4]
 8006414:	e007      	b.n	8006426 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006424:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006430:	2b40      	cmp	r3, #64	@ 0x40
 8006432:	d007      	beq.n	8006444 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006442:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800644c:	f240 8081 	bls.w	8006552 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <HAL_SPI_TransmitReceive+0x140>
 8006458:	8a7b      	ldrh	r3, [r7, #18]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d16d      	bne.n	800653a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006462:	881a      	ldrh	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800646e:	1c9a      	adds	r2, r3, #2
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006478:	b29b      	uxth	r3, r3
 800647a:	3b01      	subs	r3, #1
 800647c:	b29a      	uxth	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006482:	e05a      	b.n	800653a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b02      	cmp	r3, #2
 8006490:	d11b      	bne.n	80064ca <HAL_SPI_TransmitReceive+0x1ac>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006496:	b29b      	uxth	r3, r3
 8006498:	2b00      	cmp	r3, #0
 800649a:	d016      	beq.n	80064ca <HAL_SPI_TransmitReceive+0x1ac>
 800649c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d113      	bne.n	80064ca <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a6:	881a      	ldrh	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b2:	1c9a      	adds	r2, r3, #2
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064bc:	b29b      	uxth	r3, r3
 80064be:	3b01      	subs	r3, #1
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064c6:	2300      	movs	r3, #0
 80064c8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d11c      	bne.n	8006512 <HAL_SPI_TransmitReceive+0x1f4>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80064de:	b29b      	uxth	r3, r3
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d016      	beq.n	8006512 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68da      	ldr	r2, [r3, #12]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ee:	b292      	uxth	r2, r2
 80064f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f6:	1c9a      	adds	r2, r3, #2
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006502:	b29b      	uxth	r3, r3
 8006504:	3b01      	subs	r3, #1
 8006506:	b29a      	uxth	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800650e:	2301      	movs	r3, #1
 8006510:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006512:	f7fd fe6b 	bl	80041ec <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800651e:	429a      	cmp	r2, r3
 8006520:	d80b      	bhi.n	800653a <HAL_SPI_TransmitReceive+0x21c>
 8006522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006528:	d007      	beq.n	800653a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006538:	e109      	b.n	800674e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800653e:	b29b      	uxth	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	d19f      	bne.n	8006484 <HAL_SPI_TransmitReceive+0x166>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800654a:	b29b      	uxth	r3, r3
 800654c:	2b00      	cmp	r3, #0
 800654e:	d199      	bne.n	8006484 <HAL_SPI_TransmitReceive+0x166>
 8006550:	e0e3      	b.n	800671a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <HAL_SPI_TransmitReceive+0x244>
 800655a:	8a7b      	ldrh	r3, [r7, #18]
 800655c:	2b01      	cmp	r3, #1
 800655e:	f040 80cf 	bne.w	8006700 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006566:	b29b      	uxth	r3, r3
 8006568:	2b01      	cmp	r3, #1
 800656a:	d912      	bls.n	8006592 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006570:	881a      	ldrh	r2, [r3, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800657c:	1c9a      	adds	r2, r3, #2
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006586:	b29b      	uxth	r3, r3
 8006588:	3b02      	subs	r3, #2
 800658a:	b29a      	uxth	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006590:	e0b6      	b.n	8006700 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	330c      	adds	r3, #12
 800659c:	7812      	ldrb	r2, [r2, #0]
 800659e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a4:	1c5a      	adds	r2, r3, #1
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	3b01      	subs	r3, #1
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065b8:	e0a2      	b.n	8006700 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f003 0302 	and.w	r3, r3, #2
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d134      	bne.n	8006632 <HAL_SPI_TransmitReceive+0x314>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d02f      	beq.n	8006632 <HAL_SPI_TransmitReceive+0x314>
 80065d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d12c      	bne.n	8006632 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065dc:	b29b      	uxth	r3, r3
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d912      	bls.n	8006608 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e6:	881a      	ldrh	r2, [r3, #0]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f2:	1c9a      	adds	r2, r3, #2
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	3b02      	subs	r3, #2
 8006600:	b29a      	uxth	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006606:	e012      	b.n	800662e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	330c      	adds	r3, #12
 8006612:	7812      	ldrb	r2, [r2, #0]
 8006614:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800661a:	1c5a      	adds	r2, r3, #1
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006624:	b29b      	uxth	r3, r3
 8006626:	3b01      	subs	r3, #1
 8006628:	b29a      	uxth	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b01      	cmp	r3, #1
 800663e:	d148      	bne.n	80066d2 <HAL_SPI_TransmitReceive+0x3b4>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006646:	b29b      	uxth	r3, r3
 8006648:	2b00      	cmp	r3, #0
 800664a:	d042      	beq.n	80066d2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006652:	b29b      	uxth	r3, r3
 8006654:	2b01      	cmp	r3, #1
 8006656:	d923      	bls.n	80066a0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68da      	ldr	r2, [r3, #12]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006662:	b292      	uxth	r2, r2
 8006664:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666a:	1c9a      	adds	r2, r3, #2
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006676:	b29b      	uxth	r3, r3
 8006678:	3b02      	subs	r3, #2
 800667a:	b29a      	uxth	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006688:	b29b      	uxth	r3, r3
 800668a:	2b01      	cmp	r3, #1
 800668c:	d81f      	bhi.n	80066ce <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800669c:	605a      	str	r2, [r3, #4]
 800669e:	e016      	b.n	80066ce <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f103 020c 	add.w	r2, r3, #12
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ac:	7812      	ldrb	r2, [r2, #0]
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b6:	1c5a      	adds	r2, r3, #1
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	3b01      	subs	r3, #1
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066ce:	2301      	movs	r3, #1
 80066d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80066d2:	f7fd fd8b 	bl	80041ec <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066de:	429a      	cmp	r2, r3
 80066e0:	d803      	bhi.n	80066ea <HAL_SPI_TransmitReceive+0x3cc>
 80066e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e8:	d102      	bne.n	80066f0 <HAL_SPI_TransmitReceive+0x3d2>
 80066ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d107      	bne.n	8006700 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80066fe:	e026      	b.n	800674e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006704:	b29b      	uxth	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	f47f af57 	bne.w	80065ba <HAL_SPI_TransmitReceive+0x29c>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006712:	b29b      	uxth	r3, r3
 8006714:	2b00      	cmp	r3, #0
 8006716:	f47f af50 	bne.w	80065ba <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800671a:	69fa      	ldr	r2, [r7, #28]
 800671c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f000 f94c 	bl	80069bc <SPI_EndRxTxTransaction>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d005      	beq.n	8006736 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2220      	movs	r2, #32
 8006734:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006744:	e003      	b.n	800674e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006756:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800675a:	4618      	mov	r0, r3
 800675c:	3728      	adds	r7, #40	@ 0x28
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006770:	b2db      	uxtb	r3, r3
}
 8006772:	4618      	mov	r0, r3
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
	...

08006780 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b088      	sub	sp, #32
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	603b      	str	r3, [r7, #0]
 800678c:	4613      	mov	r3, r2
 800678e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006790:	f7fd fd2c 	bl	80041ec <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006798:	1a9b      	subs	r3, r3, r2
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	4413      	add	r3, r2
 800679e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80067a0:	f7fd fd24 	bl	80041ec <HAL_GetTick>
 80067a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80067a6:	4b39      	ldr	r3, [pc, #228]	@ (800688c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	015b      	lsls	r3, r3, #5
 80067ac:	0d1b      	lsrs	r3, r3, #20
 80067ae:	69fa      	ldr	r2, [r7, #28]
 80067b0:	fb02 f303 	mul.w	r3, r2, r3
 80067b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067b6:	e054      	b.n	8006862 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067be:	d050      	beq.n	8006862 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067c0:	f7fd fd14 	bl	80041ec <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	69fa      	ldr	r2, [r7, #28]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d902      	bls.n	80067d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d13d      	bne.n	8006852 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80067e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067ee:	d111      	bne.n	8006814 <SPI_WaitFlagStateUntilTimeout+0x94>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067f8:	d004      	beq.n	8006804 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006802:	d107      	bne.n	8006814 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006812:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006818:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800681c:	d10f      	bne.n	800683e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800683c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e017      	b.n	8006882 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	3b01      	subs	r3, #1
 8006860:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	4013      	ands	r3, r2
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	429a      	cmp	r2, r3
 8006870:	bf0c      	ite	eq
 8006872:	2301      	moveq	r3, #1
 8006874:	2300      	movne	r3, #0
 8006876:	b2db      	uxtb	r3, r3
 8006878:	461a      	mov	r2, r3
 800687a:	79fb      	ldrb	r3, [r7, #7]
 800687c:	429a      	cmp	r2, r3
 800687e:	d19b      	bne.n	80067b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3720      	adds	r7, #32
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	20000004 	.word	0x20000004

08006890 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b08a      	sub	sp, #40	@ 0x28
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
 800689c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800689e:	2300      	movs	r3, #0
 80068a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80068a2:	f7fd fca3 	bl	80041ec <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068aa:	1a9b      	subs	r3, r3, r2
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	4413      	add	r3, r2
 80068b0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80068b2:	f7fd fc9b 	bl	80041ec <HAL_GetTick>
 80068b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	330c      	adds	r3, #12
 80068be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80068c0:	4b3d      	ldr	r3, [pc, #244]	@ (80069b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	4613      	mov	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	00da      	lsls	r2, r3, #3
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	0d1b      	lsrs	r3, r3, #20
 80068d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068d2:	fb02 f303 	mul.w	r3, r2, r3
 80068d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80068d8:	e060      	b.n	800699c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80068e0:	d107      	bne.n	80068f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d104      	bne.n	80068f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80068f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f8:	d050      	beq.n	800699c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068fa:	f7fd fc77 	bl	80041ec <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	6a3b      	ldr	r3, [r7, #32]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006906:	429a      	cmp	r2, r3
 8006908:	d902      	bls.n	8006910 <SPI_WaitFifoStateUntilTimeout+0x80>
 800690a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690c:	2b00      	cmp	r3, #0
 800690e:	d13d      	bne.n	800698c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800691e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006928:	d111      	bne.n	800694e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006932:	d004      	beq.n	800693e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800693c:	d107      	bne.n	800694e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800694c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006952:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006956:	d10f      	bne.n	8006978 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006966:	601a      	str	r2, [r3, #0]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006976:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e010      	b.n	80069ae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006992:	2300      	movs	r3, #0
 8006994:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	3b01      	subs	r3, #1
 800699a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689a      	ldr	r2, [r3, #8]
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	4013      	ands	r3, r2
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d196      	bne.n	80068da <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3728      	adds	r7, #40	@ 0x28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	20000004 	.word	0x20000004

080069bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af02      	add	r7, sp, #8
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f7ff ff5b 	bl	8006890 <SPI_WaitFifoStateUntilTimeout>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d007      	beq.n	80069f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069e4:	f043 0220 	orr.w	r2, r3, #32
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e027      	b.n	8006a40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	2200      	movs	r2, #0
 80069f8:	2180      	movs	r1, #128	@ 0x80
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f7ff fec0 	bl	8006780 <SPI_WaitFlagStateUntilTimeout>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d007      	beq.n	8006a16 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a0a:	f043 0220 	orr.w	r2, r3, #32
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e014      	b.n	8006a40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f7ff ff34 	bl	8006890 <SPI_WaitFifoStateUntilTimeout>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d007      	beq.n	8006a3e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a32:	f043 0220 	orr.w	r2, r3, #32
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e000      	b.n	8006a40 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e049      	b.n	8006aee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d106      	bne.n	8006a74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7fc fedc 	bl	800382c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2202      	movs	r2, #2
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	3304      	adds	r3, #4
 8006a84:	4619      	mov	r1, r3
 8006a86:	4610      	mov	r0, r2
 8006a88:	f000 f8fe 	bl	8006c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b084      	sub	sp, #16
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
 8006afe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d101      	bne.n	8006b12 <HAL_TIM_ConfigClockSource+0x1c>
 8006b0e:	2302      	movs	r3, #2
 8006b10:	e0b6      	b.n	8006c80 <HAL_TIM_ConfigClockSource+0x18a>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2202      	movs	r2, #2
 8006b1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b30:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006b34:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b3c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b4e:	d03e      	beq.n	8006bce <HAL_TIM_ConfigClockSource+0xd8>
 8006b50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b54:	f200 8087 	bhi.w	8006c66 <HAL_TIM_ConfigClockSource+0x170>
 8006b58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b5c:	f000 8086 	beq.w	8006c6c <HAL_TIM_ConfigClockSource+0x176>
 8006b60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b64:	d87f      	bhi.n	8006c66 <HAL_TIM_ConfigClockSource+0x170>
 8006b66:	2b70      	cmp	r3, #112	@ 0x70
 8006b68:	d01a      	beq.n	8006ba0 <HAL_TIM_ConfigClockSource+0xaa>
 8006b6a:	2b70      	cmp	r3, #112	@ 0x70
 8006b6c:	d87b      	bhi.n	8006c66 <HAL_TIM_ConfigClockSource+0x170>
 8006b6e:	2b60      	cmp	r3, #96	@ 0x60
 8006b70:	d050      	beq.n	8006c14 <HAL_TIM_ConfigClockSource+0x11e>
 8006b72:	2b60      	cmp	r3, #96	@ 0x60
 8006b74:	d877      	bhi.n	8006c66 <HAL_TIM_ConfigClockSource+0x170>
 8006b76:	2b50      	cmp	r3, #80	@ 0x50
 8006b78:	d03c      	beq.n	8006bf4 <HAL_TIM_ConfigClockSource+0xfe>
 8006b7a:	2b50      	cmp	r3, #80	@ 0x50
 8006b7c:	d873      	bhi.n	8006c66 <HAL_TIM_ConfigClockSource+0x170>
 8006b7e:	2b40      	cmp	r3, #64	@ 0x40
 8006b80:	d058      	beq.n	8006c34 <HAL_TIM_ConfigClockSource+0x13e>
 8006b82:	2b40      	cmp	r3, #64	@ 0x40
 8006b84:	d86f      	bhi.n	8006c66 <HAL_TIM_ConfigClockSource+0x170>
 8006b86:	2b30      	cmp	r3, #48	@ 0x30
 8006b88:	d064      	beq.n	8006c54 <HAL_TIM_ConfigClockSource+0x15e>
 8006b8a:	2b30      	cmp	r3, #48	@ 0x30
 8006b8c:	d86b      	bhi.n	8006c66 <HAL_TIM_ConfigClockSource+0x170>
 8006b8e:	2b20      	cmp	r3, #32
 8006b90:	d060      	beq.n	8006c54 <HAL_TIM_ConfigClockSource+0x15e>
 8006b92:	2b20      	cmp	r3, #32
 8006b94:	d867      	bhi.n	8006c66 <HAL_TIM_ConfigClockSource+0x170>
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d05c      	beq.n	8006c54 <HAL_TIM_ConfigClockSource+0x15e>
 8006b9a:	2b10      	cmp	r3, #16
 8006b9c:	d05a      	beq.n	8006c54 <HAL_TIM_ConfigClockSource+0x15e>
 8006b9e:	e062      	b.n	8006c66 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006bb0:	f000 f97e 	bl	8006eb0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006bc2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	609a      	str	r2, [r3, #8]
      break;
 8006bcc:	e04f      	b.n	8006c6e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006bde:	f000 f967 	bl	8006eb0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689a      	ldr	r2, [r3, #8]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006bf0:	609a      	str	r2, [r3, #8]
      break;
 8006bf2:	e03c      	b.n	8006c6e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c00:	461a      	mov	r2, r3
 8006c02:	f000 f8db 	bl	8006dbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2150      	movs	r1, #80	@ 0x50
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 f934 	bl	8006e7a <TIM_ITRx_SetConfig>
      break;
 8006c12:	e02c      	b.n	8006c6e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c20:	461a      	mov	r2, r3
 8006c22:	f000 f8fa 	bl	8006e1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2160      	movs	r1, #96	@ 0x60
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f000 f924 	bl	8006e7a <TIM_ITRx_SetConfig>
      break;
 8006c32:	e01c      	b.n	8006c6e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c40:	461a      	mov	r2, r3
 8006c42:	f000 f8bb 	bl	8006dbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2140      	movs	r1, #64	@ 0x40
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f000 f914 	bl	8006e7a <TIM_ITRx_SetConfig>
      break;
 8006c52:	e00c      	b.n	8006c6e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	4610      	mov	r0, r2
 8006c60:	f000 f90b 	bl	8006e7a <TIM_ITRx_SetConfig>
      break;
 8006c64:	e003      	b.n	8006c6e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	73fb      	strb	r3, [r7, #15]
      break;
 8006c6a:	e000      	b.n	8006c6e <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006c6c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a40      	ldr	r2, [pc, #256]	@ (8006d9c <TIM_Base_SetConfig+0x114>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d013      	beq.n	8006cc8 <TIM_Base_SetConfig+0x40>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ca6:	d00f      	beq.n	8006cc8 <TIM_Base_SetConfig+0x40>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a3d      	ldr	r2, [pc, #244]	@ (8006da0 <TIM_Base_SetConfig+0x118>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d00b      	beq.n	8006cc8 <TIM_Base_SetConfig+0x40>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a3c      	ldr	r2, [pc, #240]	@ (8006da4 <TIM_Base_SetConfig+0x11c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d007      	beq.n	8006cc8 <TIM_Base_SetConfig+0x40>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a3b      	ldr	r2, [pc, #236]	@ (8006da8 <TIM_Base_SetConfig+0x120>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d003      	beq.n	8006cc8 <TIM_Base_SetConfig+0x40>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a3a      	ldr	r2, [pc, #232]	@ (8006dac <TIM_Base_SetConfig+0x124>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d108      	bne.n	8006cda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a2f      	ldr	r2, [pc, #188]	@ (8006d9c <TIM_Base_SetConfig+0x114>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d01f      	beq.n	8006d22 <TIM_Base_SetConfig+0x9a>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ce8:	d01b      	beq.n	8006d22 <TIM_Base_SetConfig+0x9a>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a2c      	ldr	r2, [pc, #176]	@ (8006da0 <TIM_Base_SetConfig+0x118>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d017      	beq.n	8006d22 <TIM_Base_SetConfig+0x9a>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a2b      	ldr	r2, [pc, #172]	@ (8006da4 <TIM_Base_SetConfig+0x11c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d013      	beq.n	8006d22 <TIM_Base_SetConfig+0x9a>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a2a      	ldr	r2, [pc, #168]	@ (8006da8 <TIM_Base_SetConfig+0x120>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d00f      	beq.n	8006d22 <TIM_Base_SetConfig+0x9a>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a29      	ldr	r2, [pc, #164]	@ (8006dac <TIM_Base_SetConfig+0x124>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d00b      	beq.n	8006d22 <TIM_Base_SetConfig+0x9a>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a28      	ldr	r2, [pc, #160]	@ (8006db0 <TIM_Base_SetConfig+0x128>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d007      	beq.n	8006d22 <TIM_Base_SetConfig+0x9a>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a27      	ldr	r2, [pc, #156]	@ (8006db4 <TIM_Base_SetConfig+0x12c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d003      	beq.n	8006d22 <TIM_Base_SetConfig+0x9a>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a26      	ldr	r2, [pc, #152]	@ (8006db8 <TIM_Base_SetConfig+0x130>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d108      	bne.n	8006d34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	689a      	ldr	r2, [r3, #8]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a10      	ldr	r2, [pc, #64]	@ (8006d9c <TIM_Base_SetConfig+0x114>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d00f      	beq.n	8006d80 <TIM_Base_SetConfig+0xf8>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a12      	ldr	r2, [pc, #72]	@ (8006dac <TIM_Base_SetConfig+0x124>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d00b      	beq.n	8006d80 <TIM_Base_SetConfig+0xf8>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a11      	ldr	r2, [pc, #68]	@ (8006db0 <TIM_Base_SetConfig+0x128>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d007      	beq.n	8006d80 <TIM_Base_SetConfig+0xf8>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a10      	ldr	r2, [pc, #64]	@ (8006db4 <TIM_Base_SetConfig+0x12c>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d003      	beq.n	8006d80 <TIM_Base_SetConfig+0xf8>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a0f      	ldr	r2, [pc, #60]	@ (8006db8 <TIM_Base_SetConfig+0x130>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d103      	bne.n	8006d88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	691a      	ldr	r2, [r3, #16]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	615a      	str	r2, [r3, #20]
}
 8006d8e:	bf00      	nop
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	40012c00 	.word	0x40012c00
 8006da0:	40000400 	.word	0x40000400
 8006da4:	40000800 	.word	0x40000800
 8006da8:	40000c00 	.word	0x40000c00
 8006dac:	40013400 	.word	0x40013400
 8006db0:	40014000 	.word	0x40014000
 8006db4:	40014400 	.word	0x40014400
 8006db8:	40014800 	.word	0x40014800

08006dbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b087      	sub	sp, #28
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6a1b      	ldr	r3, [r3, #32]
 8006dcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	f023 0201 	bic.w	r2, r3, #1
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006de6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	011b      	lsls	r3, r3, #4
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f023 030a 	bic.w	r3, r3, #10
 8006df8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	621a      	str	r2, [r3, #32]
}
 8006e0e:	bf00      	nop
 8006e10:	371c      	adds	r7, #28
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b087      	sub	sp, #28
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	60f8      	str	r0, [r7, #12]
 8006e22:	60b9      	str	r1, [r7, #8]
 8006e24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6a1b      	ldr	r3, [r3, #32]
 8006e30:	f023 0210 	bic.w	r2, r3, #16
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	031b      	lsls	r3, r3, #12
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e56:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	011b      	lsls	r3, r3, #4
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	621a      	str	r2, [r3, #32]
}
 8006e6e:	bf00      	nop
 8006e70:	371c      	adds	r7, #28
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b085      	sub	sp, #20
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	f043 0307 	orr.w	r3, r3, #7
 8006e9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	609a      	str	r2, [r3, #8]
}
 8006ea4:	bf00      	nop
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
 8006ebc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006eca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	021a      	lsls	r2, r3, #8
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	609a      	str	r2, [r3, #8]
}
 8006ee4:	bf00      	nop
 8006ee6:	371c      	adds	r7, #28
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d101      	bne.n	8006f08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f04:	2302      	movs	r3, #2
 8006f06:	e068      	b.n	8006fda <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2202      	movs	r2, #2
 8006f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a2e      	ldr	r2, [pc, #184]	@ (8006fe8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d004      	beq.n	8006f3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a2d      	ldr	r2, [pc, #180]	@ (8006fec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d108      	bne.n	8006f4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006f42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a1e      	ldr	r2, [pc, #120]	@ (8006fe8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d01d      	beq.n	8006fae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f7a:	d018      	beq.n	8006fae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a1b      	ldr	r2, [pc, #108]	@ (8006ff0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d013      	beq.n	8006fae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a1a      	ldr	r2, [pc, #104]	@ (8006ff4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d00e      	beq.n	8006fae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a18      	ldr	r2, [pc, #96]	@ (8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d009      	beq.n	8006fae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a13      	ldr	r2, [pc, #76]	@ (8006fec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d004      	beq.n	8006fae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a14      	ldr	r2, [pc, #80]	@ (8006ffc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d10c      	bne.n	8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	40012c00 	.word	0x40012c00
 8006fec:	40013400 	.word	0x40013400
 8006ff0:	40000400 	.word	0x40000400
 8006ff4:	40000800 	.word	0x40000800
 8006ff8:	40000c00 	.word	0x40000c00
 8006ffc:	40014000 	.word	0x40014000

08007000 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e040      	b.n	8007094 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007016:	2b00      	cmp	r3, #0
 8007018:	d106      	bne.n	8007028 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f83a 	bl	800709c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2224      	movs	r2, #36	@ 0x24
 800702c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f022 0201 	bic.w	r2, r2, #1
 800703c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007042:	2b00      	cmp	r3, #0
 8007044:	d002      	beq.n	800704c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fb74 	bl	8007734 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f8b9 	bl	80071c4 <UART_SetConfig>
 8007052:	4603      	mov	r3, r0
 8007054:	2b01      	cmp	r3, #1
 8007056:	d101      	bne.n	800705c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e01b      	b.n	8007094 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	685a      	ldr	r2, [r3, #4]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800706a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	689a      	ldr	r2, [r3, #8]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800707a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f042 0201 	orr.w	r2, r2, #1
 800708a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fbf3 	bl	8007878 <UART_CheckIdleState>
 8007092:	4603      	mov	r3, r0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b08a      	sub	sp, #40	@ 0x28
 80070b4:	af02      	add	r7, sp, #8
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	603b      	str	r3, [r7, #0]
 80070bc:	4613      	mov	r3, r2
 80070be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80070c4:	2b20      	cmp	r3, #32
 80070c6:	d177      	bne.n	80071b8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d002      	beq.n	80070d4 <HAL_UART_Transmit+0x24>
 80070ce:	88fb      	ldrh	r3, [r7, #6]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d101      	bne.n	80070d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e070      	b.n	80071ba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2221      	movs	r2, #33	@ 0x21
 80070e4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070e6:	f7fd f881 	bl	80041ec <HAL_GetTick>
 80070ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	88fa      	ldrh	r2, [r7, #6]
 80070f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	88fa      	ldrh	r2, [r7, #6]
 80070f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007104:	d108      	bne.n	8007118 <HAL_UART_Transmit+0x68>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d104      	bne.n	8007118 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800710e:	2300      	movs	r3, #0
 8007110:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	61bb      	str	r3, [r7, #24]
 8007116:	e003      	b.n	8007120 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800711c:	2300      	movs	r3, #0
 800711e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007120:	e02f      	b.n	8007182 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	2200      	movs	r2, #0
 800712a:	2180      	movs	r1, #128	@ 0x80
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f000 fc4b 	bl	80079c8 <UART_WaitOnFlagUntilTimeout>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d004      	beq.n	8007142 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2220      	movs	r2, #32
 800713c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e03b      	b.n	80071ba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10b      	bne.n	8007160 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	881a      	ldrh	r2, [r3, #0]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007154:	b292      	uxth	r2, r2
 8007156:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	3302      	adds	r3, #2
 800715c:	61bb      	str	r3, [r7, #24]
 800715e:	e007      	b.n	8007170 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	781a      	ldrb	r2, [r3, #0]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	3301      	adds	r3, #1
 800716e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007176:	b29b      	uxth	r3, r3
 8007178:	3b01      	subs	r3, #1
 800717a:	b29a      	uxth	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007188:	b29b      	uxth	r3, r3
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1c9      	bne.n	8007122 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	9300      	str	r3, [sp, #0]
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	2200      	movs	r2, #0
 8007196:	2140      	movs	r1, #64	@ 0x40
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 fc15 	bl	80079c8 <UART_WaitOnFlagUntilTimeout>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d004      	beq.n	80071ae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2220      	movs	r2, #32
 80071a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e005      	b.n	80071ba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2220      	movs	r2, #32
 80071b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80071b4:	2300      	movs	r3, #0
 80071b6:	e000      	b.n	80071ba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80071b8:	2302      	movs	r3, #2
  }
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3720      	adds	r7, #32
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
	...

080071c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071c8:	b08a      	sub	sp, #40	@ 0x28
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	689a      	ldr	r2, [r3, #8]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	431a      	orrs	r2, r3
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	431a      	orrs	r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	69db      	ldr	r3, [r3, #28]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	4ba4      	ldr	r3, [pc, #656]	@ (8007484 <UART_SetConfig+0x2c0>)
 80071f4:	4013      	ands	r3, r2
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	6812      	ldr	r2, [r2, #0]
 80071fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071fc:	430b      	orrs	r3, r1
 80071fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	68da      	ldr	r2, [r3, #12]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	430a      	orrs	r2, r1
 8007214:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a99      	ldr	r2, [pc, #612]	@ (8007488 <UART_SetConfig+0x2c4>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d004      	beq.n	8007230 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6a1b      	ldr	r3, [r3, #32]
 800722a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800722c:	4313      	orrs	r3, r2
 800722e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007240:	430a      	orrs	r2, r1
 8007242:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a90      	ldr	r2, [pc, #576]	@ (800748c <UART_SetConfig+0x2c8>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d126      	bne.n	800729c <UART_SetConfig+0xd8>
 800724e:	4b90      	ldr	r3, [pc, #576]	@ (8007490 <UART_SetConfig+0x2cc>)
 8007250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007254:	f003 0303 	and.w	r3, r3, #3
 8007258:	2b03      	cmp	r3, #3
 800725a:	d81b      	bhi.n	8007294 <UART_SetConfig+0xd0>
 800725c:	a201      	add	r2, pc, #4	@ (adr r2, 8007264 <UART_SetConfig+0xa0>)
 800725e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007262:	bf00      	nop
 8007264:	08007275 	.word	0x08007275
 8007268:	08007285 	.word	0x08007285
 800726c:	0800727d 	.word	0x0800727d
 8007270:	0800728d 	.word	0x0800728d
 8007274:	2301      	movs	r3, #1
 8007276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800727a:	e116      	b.n	80074aa <UART_SetConfig+0x2e6>
 800727c:	2302      	movs	r3, #2
 800727e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007282:	e112      	b.n	80074aa <UART_SetConfig+0x2e6>
 8007284:	2304      	movs	r3, #4
 8007286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800728a:	e10e      	b.n	80074aa <UART_SetConfig+0x2e6>
 800728c:	2308      	movs	r3, #8
 800728e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007292:	e10a      	b.n	80074aa <UART_SetConfig+0x2e6>
 8007294:	2310      	movs	r3, #16
 8007296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800729a:	e106      	b.n	80074aa <UART_SetConfig+0x2e6>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a7c      	ldr	r2, [pc, #496]	@ (8007494 <UART_SetConfig+0x2d0>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d138      	bne.n	8007318 <UART_SetConfig+0x154>
 80072a6:	4b7a      	ldr	r3, [pc, #488]	@ (8007490 <UART_SetConfig+0x2cc>)
 80072a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ac:	f003 030c 	and.w	r3, r3, #12
 80072b0:	2b0c      	cmp	r3, #12
 80072b2:	d82d      	bhi.n	8007310 <UART_SetConfig+0x14c>
 80072b4:	a201      	add	r2, pc, #4	@ (adr r2, 80072bc <UART_SetConfig+0xf8>)
 80072b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ba:	bf00      	nop
 80072bc:	080072f1 	.word	0x080072f1
 80072c0:	08007311 	.word	0x08007311
 80072c4:	08007311 	.word	0x08007311
 80072c8:	08007311 	.word	0x08007311
 80072cc:	08007301 	.word	0x08007301
 80072d0:	08007311 	.word	0x08007311
 80072d4:	08007311 	.word	0x08007311
 80072d8:	08007311 	.word	0x08007311
 80072dc:	080072f9 	.word	0x080072f9
 80072e0:	08007311 	.word	0x08007311
 80072e4:	08007311 	.word	0x08007311
 80072e8:	08007311 	.word	0x08007311
 80072ec:	08007309 	.word	0x08007309
 80072f0:	2300      	movs	r3, #0
 80072f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072f6:	e0d8      	b.n	80074aa <UART_SetConfig+0x2e6>
 80072f8:	2302      	movs	r3, #2
 80072fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072fe:	e0d4      	b.n	80074aa <UART_SetConfig+0x2e6>
 8007300:	2304      	movs	r3, #4
 8007302:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007306:	e0d0      	b.n	80074aa <UART_SetConfig+0x2e6>
 8007308:	2308      	movs	r3, #8
 800730a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800730e:	e0cc      	b.n	80074aa <UART_SetConfig+0x2e6>
 8007310:	2310      	movs	r3, #16
 8007312:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007316:	e0c8      	b.n	80074aa <UART_SetConfig+0x2e6>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a5e      	ldr	r2, [pc, #376]	@ (8007498 <UART_SetConfig+0x2d4>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d125      	bne.n	800736e <UART_SetConfig+0x1aa>
 8007322:	4b5b      	ldr	r3, [pc, #364]	@ (8007490 <UART_SetConfig+0x2cc>)
 8007324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007328:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800732c:	2b30      	cmp	r3, #48	@ 0x30
 800732e:	d016      	beq.n	800735e <UART_SetConfig+0x19a>
 8007330:	2b30      	cmp	r3, #48	@ 0x30
 8007332:	d818      	bhi.n	8007366 <UART_SetConfig+0x1a2>
 8007334:	2b20      	cmp	r3, #32
 8007336:	d00a      	beq.n	800734e <UART_SetConfig+0x18a>
 8007338:	2b20      	cmp	r3, #32
 800733a:	d814      	bhi.n	8007366 <UART_SetConfig+0x1a2>
 800733c:	2b00      	cmp	r3, #0
 800733e:	d002      	beq.n	8007346 <UART_SetConfig+0x182>
 8007340:	2b10      	cmp	r3, #16
 8007342:	d008      	beq.n	8007356 <UART_SetConfig+0x192>
 8007344:	e00f      	b.n	8007366 <UART_SetConfig+0x1a2>
 8007346:	2300      	movs	r3, #0
 8007348:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800734c:	e0ad      	b.n	80074aa <UART_SetConfig+0x2e6>
 800734e:	2302      	movs	r3, #2
 8007350:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007354:	e0a9      	b.n	80074aa <UART_SetConfig+0x2e6>
 8007356:	2304      	movs	r3, #4
 8007358:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800735c:	e0a5      	b.n	80074aa <UART_SetConfig+0x2e6>
 800735e:	2308      	movs	r3, #8
 8007360:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007364:	e0a1      	b.n	80074aa <UART_SetConfig+0x2e6>
 8007366:	2310      	movs	r3, #16
 8007368:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800736c:	e09d      	b.n	80074aa <UART_SetConfig+0x2e6>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a4a      	ldr	r2, [pc, #296]	@ (800749c <UART_SetConfig+0x2d8>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d125      	bne.n	80073c4 <UART_SetConfig+0x200>
 8007378:	4b45      	ldr	r3, [pc, #276]	@ (8007490 <UART_SetConfig+0x2cc>)
 800737a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800737e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007382:	2bc0      	cmp	r3, #192	@ 0xc0
 8007384:	d016      	beq.n	80073b4 <UART_SetConfig+0x1f0>
 8007386:	2bc0      	cmp	r3, #192	@ 0xc0
 8007388:	d818      	bhi.n	80073bc <UART_SetConfig+0x1f8>
 800738a:	2b80      	cmp	r3, #128	@ 0x80
 800738c:	d00a      	beq.n	80073a4 <UART_SetConfig+0x1e0>
 800738e:	2b80      	cmp	r3, #128	@ 0x80
 8007390:	d814      	bhi.n	80073bc <UART_SetConfig+0x1f8>
 8007392:	2b00      	cmp	r3, #0
 8007394:	d002      	beq.n	800739c <UART_SetConfig+0x1d8>
 8007396:	2b40      	cmp	r3, #64	@ 0x40
 8007398:	d008      	beq.n	80073ac <UART_SetConfig+0x1e8>
 800739a:	e00f      	b.n	80073bc <UART_SetConfig+0x1f8>
 800739c:	2300      	movs	r3, #0
 800739e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073a2:	e082      	b.n	80074aa <UART_SetConfig+0x2e6>
 80073a4:	2302      	movs	r3, #2
 80073a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073aa:	e07e      	b.n	80074aa <UART_SetConfig+0x2e6>
 80073ac:	2304      	movs	r3, #4
 80073ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073b2:	e07a      	b.n	80074aa <UART_SetConfig+0x2e6>
 80073b4:	2308      	movs	r3, #8
 80073b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073ba:	e076      	b.n	80074aa <UART_SetConfig+0x2e6>
 80073bc:	2310      	movs	r3, #16
 80073be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073c2:	e072      	b.n	80074aa <UART_SetConfig+0x2e6>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a35      	ldr	r2, [pc, #212]	@ (80074a0 <UART_SetConfig+0x2dc>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d12a      	bne.n	8007424 <UART_SetConfig+0x260>
 80073ce:	4b30      	ldr	r3, [pc, #192]	@ (8007490 <UART_SetConfig+0x2cc>)
 80073d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073dc:	d01a      	beq.n	8007414 <UART_SetConfig+0x250>
 80073de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073e2:	d81b      	bhi.n	800741c <UART_SetConfig+0x258>
 80073e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073e8:	d00c      	beq.n	8007404 <UART_SetConfig+0x240>
 80073ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073ee:	d815      	bhi.n	800741c <UART_SetConfig+0x258>
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d003      	beq.n	80073fc <UART_SetConfig+0x238>
 80073f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073f8:	d008      	beq.n	800740c <UART_SetConfig+0x248>
 80073fa:	e00f      	b.n	800741c <UART_SetConfig+0x258>
 80073fc:	2300      	movs	r3, #0
 80073fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007402:	e052      	b.n	80074aa <UART_SetConfig+0x2e6>
 8007404:	2302      	movs	r3, #2
 8007406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800740a:	e04e      	b.n	80074aa <UART_SetConfig+0x2e6>
 800740c:	2304      	movs	r3, #4
 800740e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007412:	e04a      	b.n	80074aa <UART_SetConfig+0x2e6>
 8007414:	2308      	movs	r3, #8
 8007416:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800741a:	e046      	b.n	80074aa <UART_SetConfig+0x2e6>
 800741c:	2310      	movs	r3, #16
 800741e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007422:	e042      	b.n	80074aa <UART_SetConfig+0x2e6>
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a17      	ldr	r2, [pc, #92]	@ (8007488 <UART_SetConfig+0x2c4>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d13a      	bne.n	80074a4 <UART_SetConfig+0x2e0>
 800742e:	4b18      	ldr	r3, [pc, #96]	@ (8007490 <UART_SetConfig+0x2cc>)
 8007430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007434:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007438:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800743c:	d01a      	beq.n	8007474 <UART_SetConfig+0x2b0>
 800743e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007442:	d81b      	bhi.n	800747c <UART_SetConfig+0x2b8>
 8007444:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007448:	d00c      	beq.n	8007464 <UART_SetConfig+0x2a0>
 800744a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800744e:	d815      	bhi.n	800747c <UART_SetConfig+0x2b8>
 8007450:	2b00      	cmp	r3, #0
 8007452:	d003      	beq.n	800745c <UART_SetConfig+0x298>
 8007454:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007458:	d008      	beq.n	800746c <UART_SetConfig+0x2a8>
 800745a:	e00f      	b.n	800747c <UART_SetConfig+0x2b8>
 800745c:	2300      	movs	r3, #0
 800745e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007462:	e022      	b.n	80074aa <UART_SetConfig+0x2e6>
 8007464:	2302      	movs	r3, #2
 8007466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800746a:	e01e      	b.n	80074aa <UART_SetConfig+0x2e6>
 800746c:	2304      	movs	r3, #4
 800746e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007472:	e01a      	b.n	80074aa <UART_SetConfig+0x2e6>
 8007474:	2308      	movs	r3, #8
 8007476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800747a:	e016      	b.n	80074aa <UART_SetConfig+0x2e6>
 800747c:	2310      	movs	r3, #16
 800747e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007482:	e012      	b.n	80074aa <UART_SetConfig+0x2e6>
 8007484:	efff69f3 	.word	0xefff69f3
 8007488:	40008000 	.word	0x40008000
 800748c:	40013800 	.word	0x40013800
 8007490:	40021000 	.word	0x40021000
 8007494:	40004400 	.word	0x40004400
 8007498:	40004800 	.word	0x40004800
 800749c:	40004c00 	.word	0x40004c00
 80074a0:	40005000 	.word	0x40005000
 80074a4:	2310      	movs	r3, #16
 80074a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a9f      	ldr	r2, [pc, #636]	@ (800772c <UART_SetConfig+0x568>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d17a      	bne.n	80075aa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80074b8:	2b08      	cmp	r3, #8
 80074ba:	d824      	bhi.n	8007506 <UART_SetConfig+0x342>
 80074bc:	a201      	add	r2, pc, #4	@ (adr r2, 80074c4 <UART_SetConfig+0x300>)
 80074be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c2:	bf00      	nop
 80074c4:	080074e9 	.word	0x080074e9
 80074c8:	08007507 	.word	0x08007507
 80074cc:	080074f1 	.word	0x080074f1
 80074d0:	08007507 	.word	0x08007507
 80074d4:	080074f7 	.word	0x080074f7
 80074d8:	08007507 	.word	0x08007507
 80074dc:	08007507 	.word	0x08007507
 80074e0:	08007507 	.word	0x08007507
 80074e4:	080074ff 	.word	0x080074ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074e8:	f7fe f914 	bl	8005714 <HAL_RCC_GetPCLK1Freq>
 80074ec:	61f8      	str	r0, [r7, #28]
        break;
 80074ee:	e010      	b.n	8007512 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074f0:	4b8f      	ldr	r3, [pc, #572]	@ (8007730 <UART_SetConfig+0x56c>)
 80074f2:	61fb      	str	r3, [r7, #28]
        break;
 80074f4:	e00d      	b.n	8007512 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074f6:	f7fe f875 	bl	80055e4 <HAL_RCC_GetSysClockFreq>
 80074fa:	61f8      	str	r0, [r7, #28]
        break;
 80074fc:	e009      	b.n	8007512 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007502:	61fb      	str	r3, [r7, #28]
        break;
 8007504:	e005      	b.n	8007512 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007506:	2300      	movs	r3, #0
 8007508:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007510:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 80fb 	beq.w	8007710 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	685a      	ldr	r2, [r3, #4]
 800751e:	4613      	mov	r3, r2
 8007520:	005b      	lsls	r3, r3, #1
 8007522:	4413      	add	r3, r2
 8007524:	69fa      	ldr	r2, [r7, #28]
 8007526:	429a      	cmp	r2, r3
 8007528:	d305      	bcc.n	8007536 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007530:	69fa      	ldr	r2, [r7, #28]
 8007532:	429a      	cmp	r2, r3
 8007534:	d903      	bls.n	800753e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800753c:	e0e8      	b.n	8007710 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	2200      	movs	r2, #0
 8007542:	461c      	mov	r4, r3
 8007544:	4615      	mov	r5, r2
 8007546:	f04f 0200 	mov.w	r2, #0
 800754a:	f04f 0300 	mov.w	r3, #0
 800754e:	022b      	lsls	r3, r5, #8
 8007550:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007554:	0222      	lsls	r2, r4, #8
 8007556:	68f9      	ldr	r1, [r7, #12]
 8007558:	6849      	ldr	r1, [r1, #4]
 800755a:	0849      	lsrs	r1, r1, #1
 800755c:	2000      	movs	r0, #0
 800755e:	4688      	mov	r8, r1
 8007560:	4681      	mov	r9, r0
 8007562:	eb12 0a08 	adds.w	sl, r2, r8
 8007566:	eb43 0b09 	adc.w	fp, r3, r9
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	603b      	str	r3, [r7, #0]
 8007572:	607a      	str	r2, [r7, #4]
 8007574:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007578:	4650      	mov	r0, sl
 800757a:	4659      	mov	r1, fp
 800757c:	f7f9 fb64 	bl	8000c48 <__aeabi_uldivmod>
 8007580:	4602      	mov	r2, r0
 8007582:	460b      	mov	r3, r1
 8007584:	4613      	mov	r3, r2
 8007586:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800758e:	d308      	bcc.n	80075a2 <UART_SetConfig+0x3de>
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007596:	d204      	bcs.n	80075a2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	69ba      	ldr	r2, [r7, #24]
 800759e:	60da      	str	r2, [r3, #12]
 80075a0:	e0b6      	b.n	8007710 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80075a8:	e0b2      	b.n	8007710 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	69db      	ldr	r3, [r3, #28]
 80075ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075b2:	d15e      	bne.n	8007672 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80075b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80075b8:	2b08      	cmp	r3, #8
 80075ba:	d828      	bhi.n	800760e <UART_SetConfig+0x44a>
 80075bc:	a201      	add	r2, pc, #4	@ (adr r2, 80075c4 <UART_SetConfig+0x400>)
 80075be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c2:	bf00      	nop
 80075c4:	080075e9 	.word	0x080075e9
 80075c8:	080075f1 	.word	0x080075f1
 80075cc:	080075f9 	.word	0x080075f9
 80075d0:	0800760f 	.word	0x0800760f
 80075d4:	080075ff 	.word	0x080075ff
 80075d8:	0800760f 	.word	0x0800760f
 80075dc:	0800760f 	.word	0x0800760f
 80075e0:	0800760f 	.word	0x0800760f
 80075e4:	08007607 	.word	0x08007607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075e8:	f7fe f894 	bl	8005714 <HAL_RCC_GetPCLK1Freq>
 80075ec:	61f8      	str	r0, [r7, #28]
        break;
 80075ee:	e014      	b.n	800761a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075f0:	f7fe f8a6 	bl	8005740 <HAL_RCC_GetPCLK2Freq>
 80075f4:	61f8      	str	r0, [r7, #28]
        break;
 80075f6:	e010      	b.n	800761a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075f8:	4b4d      	ldr	r3, [pc, #308]	@ (8007730 <UART_SetConfig+0x56c>)
 80075fa:	61fb      	str	r3, [r7, #28]
        break;
 80075fc:	e00d      	b.n	800761a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075fe:	f7fd fff1 	bl	80055e4 <HAL_RCC_GetSysClockFreq>
 8007602:	61f8      	str	r0, [r7, #28]
        break;
 8007604:	e009      	b.n	800761a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007606:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800760a:	61fb      	str	r3, [r7, #28]
        break;
 800760c:	e005      	b.n	800761a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800760e:	2300      	movs	r3, #0
 8007610:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007618:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d077      	beq.n	8007710 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	005a      	lsls	r2, r3, #1
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	085b      	lsrs	r3, r3, #1
 800762a:	441a      	add	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	fbb2 f3f3 	udiv	r3, r2, r3
 8007634:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	2b0f      	cmp	r3, #15
 800763a:	d916      	bls.n	800766a <UART_SetConfig+0x4a6>
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007642:	d212      	bcs.n	800766a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	b29b      	uxth	r3, r3
 8007648:	f023 030f 	bic.w	r3, r3, #15
 800764c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	085b      	lsrs	r3, r3, #1
 8007652:	b29b      	uxth	r3, r3
 8007654:	f003 0307 	and.w	r3, r3, #7
 8007658:	b29a      	uxth	r2, r3
 800765a:	8afb      	ldrh	r3, [r7, #22]
 800765c:	4313      	orrs	r3, r2
 800765e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	8afa      	ldrh	r2, [r7, #22]
 8007666:	60da      	str	r2, [r3, #12]
 8007668:	e052      	b.n	8007710 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007670:	e04e      	b.n	8007710 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007672:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007676:	2b08      	cmp	r3, #8
 8007678:	d827      	bhi.n	80076ca <UART_SetConfig+0x506>
 800767a:	a201      	add	r2, pc, #4	@ (adr r2, 8007680 <UART_SetConfig+0x4bc>)
 800767c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007680:	080076a5 	.word	0x080076a5
 8007684:	080076ad 	.word	0x080076ad
 8007688:	080076b5 	.word	0x080076b5
 800768c:	080076cb 	.word	0x080076cb
 8007690:	080076bb 	.word	0x080076bb
 8007694:	080076cb 	.word	0x080076cb
 8007698:	080076cb 	.word	0x080076cb
 800769c:	080076cb 	.word	0x080076cb
 80076a0:	080076c3 	.word	0x080076c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076a4:	f7fe f836 	bl	8005714 <HAL_RCC_GetPCLK1Freq>
 80076a8:	61f8      	str	r0, [r7, #28]
        break;
 80076aa:	e014      	b.n	80076d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076ac:	f7fe f848 	bl	8005740 <HAL_RCC_GetPCLK2Freq>
 80076b0:	61f8      	str	r0, [r7, #28]
        break;
 80076b2:	e010      	b.n	80076d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076b4:	4b1e      	ldr	r3, [pc, #120]	@ (8007730 <UART_SetConfig+0x56c>)
 80076b6:	61fb      	str	r3, [r7, #28]
        break;
 80076b8:	e00d      	b.n	80076d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076ba:	f7fd ff93 	bl	80055e4 <HAL_RCC_GetSysClockFreq>
 80076be:	61f8      	str	r0, [r7, #28]
        break;
 80076c0:	e009      	b.n	80076d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076c6:	61fb      	str	r3, [r7, #28]
        break;
 80076c8:	e005      	b.n	80076d6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80076d4:	bf00      	nop
    }

    if (pclk != 0U)
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d019      	beq.n	8007710 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	085a      	lsrs	r2, r3, #1
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	441a      	add	r2, r3
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	2b0f      	cmp	r3, #15
 80076f4:	d909      	bls.n	800770a <UART_SetConfig+0x546>
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076fc:	d205      	bcs.n	800770a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	b29a      	uxth	r2, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	60da      	str	r2, [r3, #12]
 8007708:	e002      	b.n	8007710 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800771c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007720:	4618      	mov	r0, r3
 8007722:	3728      	adds	r7, #40	@ 0x28
 8007724:	46bd      	mov	sp, r7
 8007726:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800772a:	bf00      	nop
 800772c:	40008000 	.word	0x40008000
 8007730:	00f42400 	.word	0x00f42400

08007734 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007740:	f003 0308 	and.w	r3, r3, #8
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00a      	beq.n	800775e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	430a      	orrs	r2, r1
 800775c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007762:	f003 0301 	and.w	r3, r3, #1
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00a      	beq.n	8007780 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	430a      	orrs	r2, r1
 800777e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007784:	f003 0302 	and.w	r3, r3, #2
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00a      	beq.n	80077a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	430a      	orrs	r2, r1
 80077a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a6:	f003 0304 	and.w	r3, r3, #4
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00a      	beq.n	80077c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	430a      	orrs	r2, r1
 80077c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c8:	f003 0310 	and.w	r3, r3, #16
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00a      	beq.n	80077e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	430a      	orrs	r2, r1
 80077e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ea:	f003 0320 	and.w	r3, r3, #32
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00a      	beq.n	8007808 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	430a      	orrs	r2, r1
 8007806:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800780c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007810:	2b00      	cmp	r3, #0
 8007812:	d01a      	beq.n	800784a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	430a      	orrs	r2, r1
 8007828:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800782e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007832:	d10a      	bne.n	800784a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	430a      	orrs	r2, r1
 8007848:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800784e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00a      	beq.n	800786c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	430a      	orrs	r2, r1
 800786a:	605a      	str	r2, [r3, #4]
  }
}
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b098      	sub	sp, #96	@ 0x60
 800787c:	af02      	add	r7, sp, #8
 800787e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007888:	f7fc fcb0 	bl	80041ec <HAL_GetTick>
 800788c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0308 	and.w	r3, r3, #8
 8007898:	2b08      	cmp	r3, #8
 800789a:	d12e      	bne.n	80078fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800789c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80078a0:	9300      	str	r3, [sp, #0]
 80078a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078a4:	2200      	movs	r2, #0
 80078a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f88c 	bl	80079c8 <UART_WaitOnFlagUntilTimeout>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d021      	beq.n	80078fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078be:	e853 3f00 	ldrex	r3, [r3]
 80078c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80078c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	461a      	mov	r2, r3
 80078d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80078d6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80078da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078dc:	e841 2300 	strex	r3, r2, [r1]
 80078e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80078e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1e6      	bne.n	80078b6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2220      	movs	r2, #32
 80078ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e062      	b.n	80079c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 0304 	and.w	r3, r3, #4
 8007904:	2b04      	cmp	r3, #4
 8007906:	d149      	bne.n	800799c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007908:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007910:	2200      	movs	r2, #0
 8007912:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 f856 	bl	80079c8 <UART_WaitOnFlagUntilTimeout>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d03c      	beq.n	800799c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792a:	e853 3f00 	ldrex	r3, [r3]
 800792e:	623b      	str	r3, [r7, #32]
   return(result);
 8007930:	6a3b      	ldr	r3, [r7, #32]
 8007932:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007936:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	461a      	mov	r2, r3
 800793e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007940:	633b      	str	r3, [r7, #48]	@ 0x30
 8007942:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007944:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007948:	e841 2300 	strex	r3, r2, [r1]
 800794c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800794e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1e6      	bne.n	8007922 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	3308      	adds	r3, #8
 800795a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	e853 3f00 	ldrex	r3, [r3]
 8007962:	60fb      	str	r3, [r7, #12]
   return(result);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f023 0301 	bic.w	r3, r3, #1
 800796a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	3308      	adds	r3, #8
 8007972:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007974:	61fa      	str	r2, [r7, #28]
 8007976:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007978:	69b9      	ldr	r1, [r7, #24]
 800797a:	69fa      	ldr	r2, [r7, #28]
 800797c:	e841 2300 	strex	r3, r2, [r1]
 8007980:	617b      	str	r3, [r7, #20]
   return(result);
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1e5      	bne.n	8007954 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2220      	movs	r2, #32
 800798c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007998:	2303      	movs	r3, #3
 800799a:	e011      	b.n	80079c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2220      	movs	r2, #32
 80079a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2220      	movs	r2, #32
 80079a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3758      	adds	r7, #88	@ 0x58
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	603b      	str	r3, [r7, #0]
 80079d4:	4613      	mov	r3, r2
 80079d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079d8:	e049      	b.n	8007a6e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e0:	d045      	beq.n	8007a6e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079e2:	f7fc fc03 	bl	80041ec <HAL_GetTick>
 80079e6:	4602      	mov	r2, r0
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	69ba      	ldr	r2, [r7, #24]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d302      	bcc.n	80079f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d101      	bne.n	80079fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80079f8:	2303      	movs	r3, #3
 80079fa:	e048      	b.n	8007a8e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0304 	and.w	r3, r3, #4
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d031      	beq.n	8007a6e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	69db      	ldr	r3, [r3, #28]
 8007a10:	f003 0308 	and.w	r3, r3, #8
 8007a14:	2b08      	cmp	r3, #8
 8007a16:	d110      	bne.n	8007a3a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2208      	movs	r2, #8
 8007a1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f000 f838 	bl	8007a96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2208      	movs	r2, #8
 8007a2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e029      	b.n	8007a8e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	69db      	ldr	r3, [r3, #28]
 8007a40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a48:	d111      	bne.n	8007a6e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f000 f81e 	bl	8007a96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2220      	movs	r2, #32
 8007a5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e00f      	b.n	8007a8e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	69da      	ldr	r2, [r3, #28]
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	4013      	ands	r3, r2
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	bf0c      	ite	eq
 8007a7e:	2301      	moveq	r3, #1
 8007a80:	2300      	movne	r3, #0
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	461a      	mov	r2, r3
 8007a86:	79fb      	ldrb	r3, [r7, #7]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d0a6      	beq.n	80079da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b095      	sub	sp, #84	@ 0x54
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aa6:	e853 3f00 	ldrex	r3, [r3]
 8007aaa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	461a      	mov	r2, r3
 8007aba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007abc:	643b      	str	r3, [r7, #64]	@ 0x40
 8007abe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ac2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ac4:	e841 2300 	strex	r3, r2, [r1]
 8007ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1e6      	bne.n	8007a9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3308      	adds	r3, #8
 8007ad6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad8:	6a3b      	ldr	r3, [r7, #32]
 8007ada:	e853 3f00 	ldrex	r3, [r3]
 8007ade:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	f023 0301 	bic.w	r3, r3, #1
 8007ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3308      	adds	r3, #8
 8007aee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007af0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007af2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007af6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007af8:	e841 2300 	strex	r3, r2, [r1]
 8007afc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1e5      	bne.n	8007ad0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d118      	bne.n	8007b3e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	e853 3f00 	ldrex	r3, [r3]
 8007b18:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	f023 0310 	bic.w	r3, r3, #16
 8007b20:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	461a      	mov	r2, r3
 8007b28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b2a:	61bb      	str	r3, [r7, #24]
 8007b2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	6979      	ldr	r1, [r7, #20]
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	e841 2300 	strex	r3, r2, [r1]
 8007b36:	613b      	str	r3, [r7, #16]
   return(result);
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1e6      	bne.n	8007b0c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2220      	movs	r2, #32
 8007b42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007b52:	bf00      	nop
 8007b54:	3754      	adds	r7, #84	@ 0x54
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr

08007b5e <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b08c      	sub	sp, #48	@ 0x30
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	603b      	str	r3, [r7, #0]
 8007b66:	4603      	mov	r3, r0
 8007b68:	71fb      	strb	r3, [r7, #7]
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	71bb      	strb	r3, [r7, #6]
 8007b6e:	4613      	mov	r3, r2
 8007b70:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8007b72:	79fb      	ldrb	r3, [r7, #7]
 8007b74:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8007b76:	79bb      	ldrb	r3, [r7, #6]
 8007b78:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8007b7a:	797b      	ldrb	r3, [r7, #5]
 8007b7c:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007b7e:	f107 030c 	add.w	r3, r7, #12
 8007b82:	2207      	movs	r2, #7
 8007b84:	2100      	movs	r1, #0
 8007b86:	4618      	mov	r0, r3
 8007b88:	f001 ff4d 	bl	8009a26 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007b8c:	f107 0318 	add.w	r3, r7, #24
 8007b90:	2218      	movs	r2, #24
 8007b92:	2100      	movs	r1, #0
 8007b94:	4618      	mov	r0, r3
 8007b96:	f001 ff46 	bl	8009a26 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007b9a:	233f      	movs	r3, #63	@ 0x3f
 8007b9c:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8007b9e:	238a      	movs	r3, #138	@ 0x8a
 8007ba0:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8007ba2:	f107 0314 	add.w	r3, r7, #20
 8007ba6:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8007ba8:	2303      	movs	r3, #3
 8007baa:	627b      	str	r3, [r7, #36]	@ 0x24
  rq.rparam = &resp;
 8007bac:	f107 030c 	add.w	r3, r7, #12
 8007bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8007bb2:	2307      	movs	r3, #7
 8007bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8007bb6:	f107 0318 	add.w	r3, r7, #24
 8007bba:	2100      	movs	r1, #0
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f000 fea1 	bl	8008904 <hci_send_req>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	da01      	bge.n	8007bcc <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8007bc8:	23ff      	movs	r3, #255	@ 0xff
 8007bca:	e014      	b.n	8007bf6 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8007bcc:	7b3b      	ldrb	r3, [r7, #12]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d001      	beq.n	8007bd6 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8007bd2:	7b3b      	ldrb	r3, [r7, #12]
 8007bd4:	e00f      	b.n	8007bf6 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8007bd6:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8007bda:	b29a      	uxth	r2, r3
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8007be0:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be8:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8007bea:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bf2:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3730      	adds	r7, #48	@ 0x30
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b08e      	sub	sp, #56	@ 0x38
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
 8007c08:	603b      	str	r3, [r7, #0]
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8007c0e:	7bfb      	ldrb	r3, [r7, #15]
 8007c10:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007c12:	f107 0314 	add.w	r3, r7, #20
 8007c16:	2207      	movs	r2, #7
 8007c18:	2100      	movs	r1, #0
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f001 ff03 	bl	8009a26 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007c20:	f107 0320 	add.w	r3, r7, #32
 8007c24:	2218      	movs	r2, #24
 8007c26:	2100      	movs	r1, #0
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f001 fefc 	bl	8009a26 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007c2e:	233f      	movs	r3, #63	@ 0x3f
 8007c30:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 8007c32:	238a      	movs	r3, #138	@ 0x8a
 8007c34:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = &cp;
 8007c36:	f107 031c 	add.w	r3, r7, #28
 8007c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = sizeof(cp);
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 8007c40:	f107 0314 	add.w	r3, r7, #20
 8007c44:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 8007c46:	2307      	movs	r3, #7
 8007c48:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8007c4a:	f107 0320 	add.w	r3, r7, #32
 8007c4e:	2100      	movs	r1, #0
 8007c50:	4618      	mov	r0, r3
 8007c52:	f000 fe57 	bl	8008904 <hci_send_req>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	da01      	bge.n	8007c60 <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 8007c5c:	23ff      	movs	r3, #255	@ 0xff
 8007c5e:	e014      	b.n	8007c8a <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 8007c60:	7d3b      	ldrb	r3, [r7, #20]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d001      	beq.n	8007c6a <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 8007c66:	7d3b      	ldrb	r3, [r7, #20]
 8007c68:	e00f      	b.n	8007c8a <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 8007c6a:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8007c74:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8007c7e:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3738      	adds	r7, #56	@ 0x38
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8007c92:	b590      	push	{r4, r7, lr}
 8007c94:	b095      	sub	sp, #84	@ 0x54
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	4604      	mov	r4, r0
 8007c9a:	4608      	mov	r0, r1
 8007c9c:	4611      	mov	r1, r2
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	4623      	mov	r3, r4
 8007ca2:	71fb      	strb	r3, [r7, #7]
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	80bb      	strh	r3, [r7, #4]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	807b      	strh	r3, [r7, #2]
 8007cac:	4613      	mov	r3, r2
 8007cae:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8007cb6:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8007cba:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8007cbe:	4413      	add	r3, r2
 8007cc0:	330e      	adds	r3, #14
 8007cc2:	2b28      	cmp	r3, #40	@ 0x28
 8007cc4:	d901      	bls.n	8007cca <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8007cc6:	2342      	movs	r3, #66	@ 0x42
 8007cc8:	e0c9      	b.n	8007e5e <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 8007cca:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007cce:	3350      	adds	r3, #80	@ 0x50
 8007cd0:	443b      	add	r3, r7
 8007cd2:	79fa      	ldrb	r2, [r7, #7]
 8007cd4:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8007cd8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007cdc:	3301      	adds	r3, #1
 8007cde:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8007ce2:	88bb      	ldrh	r3, [r7, #4]
 8007ce4:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8007ce6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007cea:	f107 0208 	add.w	r2, r7, #8
 8007cee:	4413      	add	r3, r2
 8007cf0:	88ba      	ldrh	r2, [r7, #4]
 8007cf2:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8007cf4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007cf8:	3302      	adds	r3, #2
 8007cfa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8007cfe:	887b      	ldrh	r3, [r7, #2]
 8007d00:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8007d02:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007d06:	f107 0208 	add.w	r2, r7, #8
 8007d0a:	4413      	add	r3, r2
 8007d0c:	887a      	ldrh	r2, [r7, #2]
 8007d0e:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8007d10:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007d14:	3302      	adds	r3, #2
 8007d16:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = OwnAddrType;
 8007d1a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007d1e:	3350      	adds	r3, #80	@ 0x50
 8007d20:	443b      	add	r3, r7
 8007d22:	79ba      	ldrb	r2, [r7, #6]
 8007d24:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8007d28:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8007d32:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007d36:	3350      	adds	r3, #80	@ 0x50
 8007d38:	443b      	add	r3, r7
 8007d3a:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8007d3e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8007d42:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007d46:	3301      	adds	r3, #1
 8007d48:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = LocalNameLen;
 8007d4c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007d50:	3350      	adds	r3, #80	@ 0x50
 8007d52:	443b      	add	r3, r7
 8007d54:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8007d58:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8007d5c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007d60:	3301      	adds	r3, #1
 8007d62:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8007d66:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007d6a:	f107 0208 	add.w	r2, r7, #8
 8007d6e:	4413      	add	r3, r2
 8007d70:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8007d74:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007d76:	4618      	mov	r0, r3
 8007d78:	f001 fed5 	bl	8009b26 <memcpy>
  indx +=  LocalNameLen;
 8007d7c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8007d80:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8007d84:	4413      	add	r3, r2
 8007d86:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8007d8a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007d8e:	3350      	adds	r3, #80	@ 0x50
 8007d90:	443b      	add	r3, r7
 8007d92:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8007d96:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8007d9a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007d9e:	3301      	adds	r3, #1
 8007da0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8007da4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007da8:	f107 0208 	add.w	r2, r7, #8
 8007dac:	4413      	add	r3, r2
 8007dae:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8007db2:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8007db4:	4618      	mov	r0, r3
 8007db6:	f001 feb6 	bl	8009b26 <memcpy>
  indx +=  ServiceUUIDLen;  
 8007dba:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8007dbe:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8007dc2:	4413      	add	r3, r2
 8007dc4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8007dc8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8007dcc:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8007dd0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007dd4:	f107 0208 	add.w	r2, r7, #8
 8007dd8:	4413      	add	r3, r2
 8007dda:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 8007dde:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8007de0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007de4:	3302      	adds	r3, #2
 8007de6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8007dea:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8007dee:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8007df2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007df6:	f107 0208 	add.w	r2, r7, #8
 8007dfa:	4413      	add	r3, r2
 8007dfc:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8007e00:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 8007e02:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007e06:	3302      	adds	r3, #2
 8007e08:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007e0c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007e10:	2218      	movs	r2, #24
 8007e12:	2100      	movs	r1, #0
 8007e14:	4618      	mov	r0, r3
 8007e16:	f001 fe06 	bl	8009a26 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007e1a:	233f      	movs	r3, #63	@ 0x3f
 8007e1c:	86bb      	strh	r3, [r7, #52]	@ 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8007e1e:	2383      	movs	r3, #131	@ 0x83
 8007e20:	86fb      	strh	r3, [r7, #54]	@ 0x36
  rq.cparam = (void *)buffer;
 8007e22:	f107 0308 	add.w	r3, r7, #8
 8007e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.clen = indx;
 8007e28:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007e2c:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rparam = &status;
 8007e2e:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 8007e32:	647b      	str	r3, [r7, #68]	@ 0x44
  rq.rlen = 1;
 8007e34:	2301      	movs	r3, #1
 8007e36:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8007e38:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f000 fd60 	bl	8008904 <hci_send_req>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	da01      	bge.n	8007e4e <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 8007e4a:	23ff      	movs	r3, #255	@ 0xff
 8007e4c:	e007      	b.n	8007e5e <aci_gap_set_discoverable+0x1cc>

  if (status) {
 8007e4e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d002      	beq.n	8007e5c <aci_gap_set_discoverable+0x1ca>
    return status;
 8007e56:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007e5a:	e000      	b.n	8007e5e <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3754      	adds	r7, #84	@ 0x54
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd90      	pop	{r4, r7, pc}

08007e66 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8007e66:	b590      	push	{r4, r7, lr}
 8007e68:	b091      	sub	sp, #68	@ 0x44
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	603a      	str	r2, [r7, #0]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	4603      	mov	r3, r0
 8007e72:	71fb      	strb	r3, [r7, #7]
 8007e74:	460b      	mov	r3, r1
 8007e76:	71bb      	strb	r3, [r7, #6]
 8007e78:	4613      	mov	r3, r2
 8007e7a:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8007e7c:	79fb      	ldrb	r3, [r7, #7]
 8007e7e:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 8007e80:	79bb      	ldrb	r3, [r7, #6]
 8007e82:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8007e84:	79bb      	ldrb	r3, [r7, #6]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00a      	beq.n	8007ea0 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8007e8a:	683a      	ldr	r2, [r7, #0]
 8007e8c:	f107 030e 	add.w	r3, r7, #14
 8007e90:	6814      	ldr	r4, [r2, #0]
 8007e92:	6850      	ldr	r0, [r2, #4]
 8007e94:	6891      	ldr	r1, [r2, #8]
 8007e96:	68d2      	ldr	r2, [r2, #12]
 8007e98:	601c      	str	r4, [r3, #0]
 8007e9a:	6058      	str	r0, [r3, #4]
 8007e9c:	6099      	str	r1, [r3, #8]
 8007e9e:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 8007ea0:	797b      	ldrb	r3, [r7, #5]
 8007ea2:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8007ea4:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8007ea8:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 8007eaa:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8007eae:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8007eb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007eb4:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21
  cp.bonding_mode = bonding_mode;
 8007eb8:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8007ebc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007ec0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007ec4:	2218      	movs	r2, #24
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f001 fdac 	bl	8009a26 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007ece:	233f      	movs	r3, #63	@ 0x3f
 8007ed0:	853b      	strh	r3, [r7, #40]	@ 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8007ed2:	2386      	movs	r3, #134	@ 0x86
 8007ed4:	857b      	strh	r3, [r7, #42]	@ 0x2a
  rq.cparam = &cp;
 8007ed6:	f107 030c 	add.w	r3, r7, #12
 8007eda:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.clen = sizeof(cp);
 8007edc:	231a      	movs	r3, #26
 8007ede:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rparam = &status;
 8007ee0:	f107 030b 	add.w	r3, r7, #11
 8007ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rlen = 1;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 8007eea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007eee:	2100      	movs	r1, #0
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f000 fd07 	bl	8008904 <hci_send_req>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	da01      	bge.n	8007f00 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 8007efc:	23ff      	movs	r3, #255	@ 0xff
 8007efe:	e005      	b.n	8007f0c <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 8007f00:	7afb      	ldrb	r3, [r7, #11]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <aci_gap_set_auth_requirement+0xa4>
    return status;
 8007f06:	7afb      	ldrb	r3, [r7, #11]
 8007f08:	e000      	b.n	8007f0c <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3744      	adds	r7, #68	@ 0x44
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd90      	pop	{r4, r7, pc}

08007f14 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b092      	sub	sp, #72	@ 0x48
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	6039      	str	r1, [r7, #0]
 8007f1e:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 8007f20:	2300      	movs	r3, #0
 8007f22:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 8007f26:	79fb      	ldrb	r3, [r7, #7]
 8007f28:	2b1f      	cmp	r3, #31
 8007f2a:	d901      	bls.n	8007f30 <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 8007f2c:	2342      	movs	r3, #66	@ 0x42
 8007f2e:	e03e      	b.n	8007fae <aci_gap_update_adv_data+0x9a>

  buffer[indx] = AdvLen;
 8007f30:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007f34:	3348      	adds	r3, #72	@ 0x48
 8007f36:	443b      	add	r3, r7
 8007f38:	79fa      	ldrb	r2, [r7, #7]
 8007f3a:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 8007f3e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007f42:	3301      	adds	r3, #1
 8007f44:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 8007f48:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007f4c:	f107 0208 	add.w	r2, r7, #8
 8007f50:	4413      	add	r3, r2
 8007f52:	79fa      	ldrb	r2, [r7, #7]
 8007f54:	6839      	ldr	r1, [r7, #0]
 8007f56:	4618      	mov	r0, r3
 8007f58:	f001 fde5 	bl	8009b26 <memcpy>
  indx +=  AdvLen;
 8007f5c:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8007f60:	79fb      	ldrb	r3, [r7, #7]
 8007f62:	4413      	add	r3, r2
 8007f64:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007f68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007f6c:	2218      	movs	r2, #24
 8007f6e:	2100      	movs	r1, #0
 8007f70:	4618      	mov	r0, r3
 8007f72:	f001 fd58 	bl	8009a26 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007f76:	233f      	movs	r3, #63	@ 0x3f
 8007f78:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 8007f7a:	238e      	movs	r3, #142	@ 0x8e
 8007f7c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 8007f7e:	f107 0308 	add.w	r3, r7, #8
 8007f82:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 8007f84:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007f88:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &status;
 8007f8a:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8007f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = 1;
 8007f90:	2301      	movs	r3, #1
 8007f92:	643b      	str	r3, [r7, #64]	@ 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 8007f94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007f98:	2100      	movs	r1, #0
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 fcb2 	bl	8008904 <hci_send_req>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	da01      	bge.n	8007faa <aci_gap_update_adv_data+0x96>
    return BLE_STATUS_TIMEOUT;
 8007fa6:	23ff      	movs	r3, #255	@ 0xff
 8007fa8:	e001      	b.n	8007fae <aci_gap_update_adv_data+0x9a>
    
  return status;
 8007faa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3748      	adds	r7, #72	@ 0x48
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b088      	sub	sp, #32
 8007fba:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007fbc:	f107 0308 	add.w	r3, r7, #8
 8007fc0:	2218      	movs	r2, #24
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f001 fd2e 	bl	8009a26 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007fca:	233f      	movs	r3, #63	@ 0x3f
 8007fcc:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8007fce:	f240 1301 	movw	r3, #257	@ 0x101
 8007fd2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007fd4:	1dfb      	adds	r3, r7, #7
 8007fd6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8007fdc:	f107 0308 	add.w	r3, r7, #8
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f000 fc8e 	bl	8008904 <hci_send_req>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	da01      	bge.n	8007ff2 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8007fee:	23ff      	movs	r3, #255	@ 0xff
 8007ff0:	e000      	b.n	8007ff4 <aci_gatt_init+0x3e>

  return status;
 8007ff2:	79fb      	ldrb	r3, [r7, #7]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3720      	adds	r7, #32
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b090      	sub	sp, #64	@ 0x40
 8008000:	af00      	add	r7, sp, #0
 8008002:	6039      	str	r1, [r7, #0]
 8008004:	4611      	mov	r1, r2
 8008006:	461a      	mov	r2, r3
 8008008:	4603      	mov	r3, r0
 800800a:	71fb      	strb	r3, [r7, #7]
 800800c:	460b      	mov	r3, r1
 800800e:	71bb      	strb	r3, [r7, #6]
 8008010:	4613      	mov	r3, r2
 8008012:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8008014:	2300      	movs	r3, #0
 8008016:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_uuid_type;
 800801a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800801e:	3340      	adds	r3, #64	@ 0x40
 8008020:	443b      	add	r3, r7
 8008022:	79fa      	ldrb	r2, [r7, #7]
 8008024:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008028:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800802c:	3301      	adds	r3, #1
 800802e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8008032:	79fb      	ldrb	r3, [r7, #7]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d103      	bne.n	8008040 <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 8008038:	2302      	movs	r3, #2
 800803a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800803e:	e002      	b.n	8008046 <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 8008040:	2310      	movs	r3, #16
 8008042:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8008046:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800804a:	f107 020c 	add.w	r2, r7, #12
 800804e:	4413      	add	r3, r2
 8008050:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8008054:	6839      	ldr	r1, [r7, #0]
 8008056:	4618      	mov	r0, r3
 8008058:	f001 fd65 	bl	8009b26 <memcpy>
  indx +=  uuid_len;
 800805c:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8008060:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008064:	4413      	add	r3, r2
 8008066:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_type;
 800806a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800806e:	3340      	adds	r3, #64	@ 0x40
 8008070:	443b      	add	r3, r7
 8008072:	79ba      	ldrb	r2, [r7, #6]
 8008074:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008078:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800807c:	3301      	adds	r3, #1
 800807e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = max_attr_records;
 8008082:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008086:	3340      	adds	r3, #64	@ 0x40
 8008088:	443b      	add	r3, r7
 800808a:	797a      	ldrb	r2, [r7, #5]
 800808c:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008090:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008094:	3301      	adds	r3, #1
 8008096:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800809a:	f107 0320 	add.w	r3, r7, #32
 800809e:	2203      	movs	r2, #3
 80080a0:	2100      	movs	r1, #0
 80080a2:	4618      	mov	r0, r3
 80080a4:	f001 fcbf 	bl	8009a26 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80080a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080ac:	2218      	movs	r2, #24
 80080ae:	2100      	movs	r1, #0
 80080b0:	4618      	mov	r0, r3
 80080b2:	f001 fcb8 	bl	8009a26 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80080b6:	233f      	movs	r3, #63	@ 0x3f
 80080b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 80080ba:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80080be:	84fb      	strh	r3, [r7, #38]	@ 0x26
  rq.cparam = (void *)buffer;
 80080c0:	f107 030c 	add.w	r3, r7, #12
 80080c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.clen = indx;
 80080c6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80080ca:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rparam = &resp;
 80080cc:	f107 0320 	add.w	r3, r7, #32
 80080d0:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80080d2:	2303      	movs	r3, #3
 80080d4:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 80080d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080da:	2100      	movs	r1, #0
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 fc11 	bl	8008904 <hci_send_req>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	da01      	bge.n	80080ec <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 80080e8:	23ff      	movs	r3, #255	@ 0xff
 80080ea:	e00c      	b.n	8008106 <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 80080ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d002      	beq.n	80080fa <aci_gatt_add_serv+0xfe>
    return resp.status;
 80080f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80080f8:	e005      	b.n	8008106 <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 80080fa:	f8b7 3021 	ldrh.w	r3, [r7, #33]	@ 0x21
 80080fe:	b29a      	uxth	r2, r3
 8008100:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008102:	801a      	strh	r2, [r3, #0]

  return 0;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3740      	adds	r7, #64	@ 0x40
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b092      	sub	sp, #72	@ 0x48
 8008112:	af00      	add	r7, sp, #0
 8008114:	603a      	str	r2, [r7, #0]
 8008116:	461a      	mov	r2, r3
 8008118:	4603      	mov	r3, r0
 800811a:	80fb      	strh	r3, [r7, #6]
 800811c:	460b      	mov	r3, r1
 800811e:	717b      	strb	r3, [r7, #5]
 8008120:	4613      	mov	r3, r2
 8008122:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8008124:	2300      	movs	r3, #0
 8008126:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  serviceHandle = htobs(serviceHandle);
 800812a:	88fb      	ldrh	r3, [r7, #6]
 800812c:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 800812e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008132:	f107 020c 	add.w	r2, r7, #12
 8008136:	4413      	add	r3, r2
 8008138:	88fa      	ldrh	r2, [r7, #6]
 800813a:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800813c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008140:	3302      	adds	r3, #2
 8008142:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charUuidType;
 8008146:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800814a:	3348      	adds	r3, #72	@ 0x48
 800814c:	443b      	add	r3, r7
 800814e:	797a      	ldrb	r2, [r7, #5]
 8008150:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008154:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008158:	3301      	adds	r3, #1
 800815a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  if(charUuidType == UUID_TYPE_16){
 800815e:	797b      	ldrb	r3, [r7, #5]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d103      	bne.n	800816c <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 8008164:	2302      	movs	r3, #2
 8008166:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800816a:	e002      	b.n	8008172 <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 800816c:	2310      	movs	r3, #16
 800816e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8008172:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008176:	f107 020c 	add.w	r2, r7, #12
 800817a:	4413      	add	r3, r2
 800817c:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8008180:	6839      	ldr	r1, [r7, #0]
 8008182:	4618      	mov	r0, r3
 8008184:	f001 fccf 	bl	8009b26 <memcpy>
  indx +=  uuid_len;
 8008188:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800818c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008190:	4413      	add	r3, r2
 8008192:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charValueLen;
 8008196:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800819a:	3348      	adds	r3, #72	@ 0x48
 800819c:	443b      	add	r3, r7
 800819e:	793a      	ldrb	r2, [r7, #4]
 80081a0:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80081a4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80081a8:	3301      	adds	r3, #1
 80081aa:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charProperties;
 80081ae:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80081b2:	3348      	adds	r3, #72	@ 0x48
 80081b4:	443b      	add	r3, r7
 80081b6:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80081ba:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80081be:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80081c2:	3301      	adds	r3, #1
 80081c4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = secPermissions;
 80081c8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80081cc:	3348      	adds	r3, #72	@ 0x48
 80081ce:	443b      	add	r3, r7
 80081d0:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 80081d4:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80081d8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80081dc:	3301      	adds	r3, #1
 80081de:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = gattEvtMask;
 80081e2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80081e6:	3348      	adds	r3, #72	@ 0x48
 80081e8:	443b      	add	r3, r7
 80081ea:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 80081ee:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80081f2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80081f6:	3301      	adds	r3, #1
 80081f8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = encryKeySize;
 80081fc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008200:	3348      	adds	r3, #72	@ 0x48
 8008202:	443b      	add	r3, r7
 8008204:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8008208:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800820c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008210:	3301      	adds	r3, #1
 8008212:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = isVariable;
 8008216:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800821a:	3348      	adds	r3, #72	@ 0x48
 800821c:	443b      	add	r3, r7
 800821e:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8008222:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008226:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800822a:	3301      	adds	r3, #1
 800822c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008230:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008234:	2203      	movs	r2, #3
 8008236:	2100      	movs	r1, #0
 8008238:	4618      	mov	r0, r3
 800823a:	f001 fbf4 	bl	8009a26 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800823e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008242:	2218      	movs	r2, #24
 8008244:	2100      	movs	r1, #0
 8008246:	4618      	mov	r0, r3
 8008248:	f001 fbed 	bl	8009a26 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800824c:	233f      	movs	r3, #63	@ 0x3f
 800824e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8008250:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8008254:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 8008256:	f107 030c 	add.w	r3, r7, #12
 800825a:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 800825c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008260:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &resp;
 8008262:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008266:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8008268:	2303      	movs	r3, #3
 800826a:	643b      	str	r3, [r7, #64]	@ 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 800826c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008270:	2100      	movs	r1, #0
 8008272:	4618      	mov	r0, r3
 8008274:	f000 fb46 	bl	8008904 <hci_send_req>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	da01      	bge.n	8008282 <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 800827e:	23ff      	movs	r3, #255	@ 0xff
 8008280:	e00c      	b.n	800829c <aci_gatt_add_char+0x18e>

  if (resp.status) {
 8008282:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008286:	2b00      	cmp	r3, #0
 8008288:	d002      	beq.n	8008290 <aci_gatt_add_char+0x182>
    return resp.status;
 800828a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800828e:	e005      	b.n	800829c <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 8008290:	f8b7 3029 	ldrh.w	r3, [r7, #41]	@ 0x29
 8008294:	b29a      	uxth	r2, r3
 8008296:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008298:	801a      	strh	r2, [r3, #0]

  return 0;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3748      	adds	r7, #72	@ 0x48
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 80082a4:	b590      	push	{r4, r7, lr}
 80082a6:	b0ab      	sub	sp, #172	@ 0xac
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	4604      	mov	r4, r0
 80082ac:	4608      	mov	r0, r1
 80082ae:	4611      	mov	r1, r2
 80082b0:	461a      	mov	r2, r3
 80082b2:	4623      	mov	r3, r4
 80082b4:	80fb      	strh	r3, [r7, #6]
 80082b6:	4603      	mov	r3, r0
 80082b8:	80bb      	strh	r3, [r7, #4]
 80082ba:	460b      	mov	r3, r1
 80082bc:	70fb      	strb	r3, [r7, #3]
 80082be:	4613      	mov	r3, r2
 80082c0:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 80082c2:	2300      	movs	r3, #0
 80082c4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 80082c8:	78bb      	ldrb	r3, [r7, #2]
 80082ca:	2b7a      	cmp	r3, #122	@ 0x7a
 80082cc:	d901      	bls.n	80082d2 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 80082ce:	2342      	movs	r3, #66	@ 0x42
 80082d0:	e074      	b.n	80083bc <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 80082d2:	88fb      	ldrh	r3, [r7, #6]
 80082d4:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 80082d6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80082da:	f107 0208 	add.w	r2, r7, #8
 80082de:	4413      	add	r3, r2
 80082e0:	88fa      	ldrh	r2, [r7, #6]
 80082e2:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80082e4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80082e8:	3302      	adds	r3, #2
 80082ea:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  charHandle = htobs(charHandle);
 80082ee:	88bb      	ldrh	r3, [r7, #4]
 80082f0:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 80082f2:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80082f6:	f107 0208 	add.w	r2, r7, #8
 80082fa:	4413      	add	r3, r2
 80082fc:	88ba      	ldrh	r2, [r7, #4]
 80082fe:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008300:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008304:	3302      	adds	r3, #2
 8008306:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValOffset;
 800830a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800830e:	33a8      	adds	r3, #168	@ 0xa8
 8008310:	443b      	add	r3, r7
 8008312:	78fa      	ldrb	r2, [r7, #3]
 8008314:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8008318:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800831c:	3301      	adds	r3, #1
 800831e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValueLen;
 8008322:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008326:	33a8      	adds	r3, #168	@ 0xa8
 8008328:	443b      	add	r3, r7
 800832a:	78ba      	ldrb	r2, [r7, #2]
 800832c:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8008330:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008334:	3301      	adds	r3, #1
 8008336:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800833a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800833e:	f107 0208 	add.w	r2, r7, #8
 8008342:	4413      	add	r3, r2
 8008344:	78ba      	ldrb	r2, [r7, #2]
 8008346:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 800834a:	4618      	mov	r0, r3
 800834c:	f001 fbeb 	bl	8009b26 <memcpy>
  indx +=  charValueLen;
 8008350:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8008354:	78bb      	ldrb	r3, [r7, #2]
 8008356:	4413      	add	r3, r2
 8008358:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800835c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8008360:	2218      	movs	r2, #24
 8008362:	2100      	movs	r1, #0
 8008364:	4618      	mov	r0, r3
 8008366:	f001 fb5e 	bl	8009a26 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800836a:	233f      	movs	r3, #63	@ 0x3f
 800836c:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8008370:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8008374:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 8008378:	f107 0308 	add.w	r3, r7, #8
 800837c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 8008380:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008384:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 8008388:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 800838c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 8008390:	2301      	movs	r3, #1
 8008392:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8008396:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800839a:	2100      	movs	r1, #0
 800839c:	4618      	mov	r0, r3
 800839e:	f000 fab1 	bl	8008904 <hci_send_req>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	da01      	bge.n	80083ac <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 80083a8:	23ff      	movs	r3, #255	@ 0xff
 80083aa:	e007      	b.n	80083bc <aci_gatt_update_char_value+0x118>

  if (status) {
 80083ac:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d002      	beq.n	80083ba <aci_gatt_update_char_value+0x116>
    return status;
 80083b4:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80083b8:	e000      	b.n	80083bc <aci_gatt_update_char_value+0x118>
  }

  return 0;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	37ac      	adds	r7, #172	@ 0xac
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd90      	pop	{r4, r7, pc}

080083c4 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b08a      	sub	sp, #40	@ 0x28
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	4603      	mov	r3, r0
 80083cc:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 80083ce:	88fb      	ldrh	r3, [r7, #6]
 80083d0:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 80083d2:	f107 0310 	add.w	r3, r7, #16
 80083d6:	2218      	movs	r2, #24
 80083d8:	2100      	movs	r1, #0
 80083da:	4618      	mov	r0, r3
 80083dc:	f001 fb23 	bl	8009a26 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 80083e0:	233f      	movs	r3, #63	@ 0x3f
 80083e2:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 80083e4:	f240 1327 	movw	r3, #295	@ 0x127
 80083e8:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 80083ea:	f107 030c 	add.w	r3, r7, #12
 80083ee:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 80083f0:	2302      	movs	r3, #2
 80083f2:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 80083f4:	f107 030b 	add.w	r3, r7, #11
 80083f8:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 80083fa:	2301      	movs	r3, #1
 80083fc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 80083fe:	f107 0310 	add.w	r3, r7, #16
 8008402:	2100      	movs	r1, #0
 8008404:	4618      	mov	r0, r3
 8008406:	f000 fa7d 	bl	8008904 <hci_send_req>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	da01      	bge.n	8008414 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 8008410:	23ff      	movs	r3, #255	@ 0xff
 8008412:	e000      	b.n	8008416 <aci_gatt_allow_read+0x52>

    return status;
 8008414:	7afb      	ldrb	r3, [r7, #11]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3728      	adds	r7, #40	@ 0x28
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b0ac      	sub	sp, #176	@ 0xb0
 8008422:	af00      	add	r7, sp, #0
 8008424:	60ba      	str	r2, [r7, #8]
 8008426:	607b      	str	r3, [r7, #4]
 8008428:	4603      	mov	r3, r0
 800842a:	73fb      	strb	r3, [r7, #15]
 800842c:	460b      	mov	r3, r1
 800842e:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 8008430:	7bfb      	ldrb	r3, [r7, #15]
 8008432:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008436:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800843a:	2218      	movs	r2, #24
 800843c:	2100      	movs	r1, #0
 800843e:	4618      	mov	r0, r3
 8008440:	f001 faf1 	bl	8009a26 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008444:	233f      	movs	r3, #63	@ 0x3f
 8008446:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 800844a:	230d      	movs	r3, #13
 800844c:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  rq.cparam = &cp;
 8008450:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8008454:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  rq.clen = sizeof(cp);
 8008458:	2301      	movs	r3, #1
 800845a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  rq.rparam = &rp;
 800845e:	f107 0314 	add.w	r3, r7, #20
 8008462:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  rq.rlen = sizeof(rp);
 8008466:	2380      	movs	r3, #128	@ 0x80
 8008468:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 800846c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008470:	2100      	movs	r1, #0
 8008472:	4618      	mov	r0, r3
 8008474:	f000 fa46 	bl	8008904 <hci_send_req>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	da01      	bge.n	8008482 <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 800847e:	23ff      	movs	r3, #255	@ 0xff
 8008480:	e01e      	b.n	80084c0 <aci_hal_read_config_data+0xa2>
  
  if(rp.status)
 8008482:	7d3b      	ldrb	r3, [r7, #20]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <aci_hal_read_config_data+0x6e>
    return rp.status;
 8008488:	7d3b      	ldrb	r3, [r7, #20]
 800848a:	e019      	b.n	80084c0 <aci_hal_read_config_data+0xa2>
  
  *data_len_out_p = rq.rlen-1;
 800848c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008490:	b2db      	uxtb	r3, r3
 8008492:	3b01      	subs	r3, #1
 8008494:	b2da      	uxtb	r2, r3
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	461a      	mov	r2, r3
 80084a0:	89bb      	ldrh	r3, [r7, #12]
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d201      	bcs.n	80084aa <aci_hal_read_config_data+0x8c>
 80084a6:	89ba      	ldrh	r2, [r7, #12]
 80084a8:	e002      	b.n	80084b0 <aci_hal_read_config_data+0x92>
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	461a      	mov	r2, r3
 80084b0:	f107 0314 	add.w	r3, r7, #20
 80084b4:	3301      	adds	r3, #1
 80084b6:	4619      	mov	r1, r3
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f001 fb34 	bl	8009b26 <memcpy>
  
  return 0;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	37b0      	adds	r7, #176	@ 0xb0
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b08a      	sub	sp, #40	@ 0x28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	4603      	mov	r3, r0
 80084d0:	460a      	mov	r2, r1
 80084d2:	71fb      	strb	r3, [r7, #7]
 80084d4:	4613      	mov	r3, r2
 80084d6:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 80084d8:	79fb      	ldrb	r3, [r7, #7]
 80084da:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 80084dc:	79bb      	ldrb	r3, [r7, #6]
 80084de:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80084e0:	f107 0310 	add.w	r3, r7, #16
 80084e4:	2218      	movs	r2, #24
 80084e6:	2100      	movs	r1, #0
 80084e8:	4618      	mov	r0, r3
 80084ea:	f001 fa9c 	bl	8009a26 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80084ee:	233f      	movs	r3, #63	@ 0x3f
 80084f0:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 80084f2:	230f      	movs	r3, #15
 80084f4:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 80084f6:	f107 030c 	add.w	r3, r7, #12
 80084fa:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 80084fc:	2302      	movs	r3, #2
 80084fe:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8008500:	f107 030b 	add.w	r3, r7, #11
 8008504:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8008506:	2301      	movs	r3, #1
 8008508:	627b      	str	r3, [r7, #36]	@ 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 800850a:	f107 0310 	add.w	r3, r7, #16
 800850e:	2100      	movs	r1, #0
 8008510:	4618      	mov	r0, r3
 8008512:	f000 f9f7 	bl	8008904 <hci_send_req>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	da01      	bge.n	8008520 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 800851c:	23ff      	movs	r3, #255	@ 0xff
 800851e:	e000      	b.n	8008522 <aci_hal_set_tx_power_level+0x5a>

  return status;
 8008520:	7afb      	ldrb	r3, [r7, #11]
}
 8008522:	4618      	mov	r0, r3
 8008524:	3728      	adds	r7, #40	@ 0x28
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800852a:	b590      	push	{r4, r7, lr}
 800852c:	b089      	sub	sp, #36	@ 0x24
 800852e:	af02      	add	r7, sp, #8
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8008534:	f107 0410 	add.w	r4, r7, #16
 8008538:	f107 0215 	add.w	r2, r7, #21
 800853c:	f107 0112 	add.w	r1, r7, #18
 8008540:	f107 0016 	add.w	r0, r7, #22
 8008544:	f107 030e 	add.w	r3, r7, #14
 8008548:	9300      	str	r3, [sp, #0]
 800854a:	4623      	mov	r3, r4
 800854c:	f000 f853 	bl	80085f6 <hci_le_read_local_version>
 8008550:	4603      	mov	r3, r0
 8008552:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8008554:	7dfb      	ldrb	r3, [r7, #23]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d126      	bne.n	80085a8 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 800855a:	8a7b      	ldrh	r3, [r7, #18]
 800855c:	0a1b      	lsrs	r3, r3, #8
 800855e:	b29b      	uxth	r3, r3
 8008560:	b2da      	uxtb	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8008566:	8a7b      	ldrh	r3, [r7, #18]
 8008568:	021b      	lsls	r3, r3, #8
 800856a:	b29a      	uxth	r2, r3
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	881b      	ldrh	r3, [r3, #0]
 8008574:	b21a      	sxth	r2, r3
 8008576:	89fb      	ldrh	r3, [r7, #14]
 8008578:	091b      	lsrs	r3, r3, #4
 800857a:	b29b      	uxth	r3, r3
 800857c:	011b      	lsls	r3, r3, #4
 800857e:	b21b      	sxth	r3, r3
 8008580:	b2db      	uxtb	r3, r3
 8008582:	b21b      	sxth	r3, r3
 8008584:	4313      	orrs	r3, r2
 8008586:	b21b      	sxth	r3, r3
 8008588:	b29a      	uxth	r2, r3
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	881b      	ldrh	r3, [r3, #0]
 8008592:	b21a      	sxth	r2, r3
 8008594:	89fb      	ldrh	r3, [r7, #14]
 8008596:	b21b      	sxth	r3, r3
 8008598:	f003 030f 	and.w	r3, r3, #15
 800859c:	b21b      	sxth	r3, r3
 800859e:	4313      	orrs	r3, r2
 80085a0:	b21b      	sxth	r3, r3
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	801a      	strh	r2, [r3, #0]
  }
  return status;
 80085a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	371c      	adds	r7, #28
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd90      	pop	{r4, r7, pc}

080085b2 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b088      	sub	sp, #32
 80085b6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80085b8:	f107 0308 	add.w	r3, r7, #8
 80085bc:	2218      	movs	r2, #24
 80085be:	2100      	movs	r1, #0
 80085c0:	4618      	mov	r0, r3
 80085c2:	f001 fa30 	bl	8009a26 <memset>
  rq.ogf = OGF_HOST_CTL;
 80085c6:	2303      	movs	r3, #3
 80085c8:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 80085ca:	2303      	movs	r3, #3
 80085cc:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80085ce:	1dfb      	adds	r3, r7, #7
 80085d0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80085d2:	2301      	movs	r3, #1
 80085d4:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 80085d6:	f107 0308 	add.w	r3, r7, #8
 80085da:	2100      	movs	r1, #0
 80085dc:	4618      	mov	r0, r3
 80085de:	f000 f991 	bl	8008904 <hci_send_req>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	da01      	bge.n	80085ec <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 80085e8:	23ff      	movs	r3, #255	@ 0xff
 80085ea:	e000      	b.n	80085ee <hci_reset+0x3c>
  
  return status;  
 80085ec:	79fb      	ldrb	r3, [r7, #7]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3720      	adds	r7, #32
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b08e      	sub	sp, #56	@ 0x38
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	60f8      	str	r0, [r7, #12]
 80085fe:	60b9      	str	r1, [r7, #8]
 8008600:	607a      	str	r2, [r7, #4]
 8008602:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008604:	f107 0314 	add.w	r3, r7, #20
 8008608:	2209      	movs	r2, #9
 800860a:	2100      	movs	r1, #0
 800860c:	4618      	mov	r0, r3
 800860e:	f001 fa0a 	bl	8009a26 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008612:	f107 0320 	add.w	r3, r7, #32
 8008616:	2218      	movs	r2, #24
 8008618:	2100      	movs	r1, #0
 800861a:	4618      	mov	r0, r3
 800861c:	f001 fa03 	bl	8009a26 <memset>
  rq.ogf = OGF_INFO_PARAM;
 8008620:	2304      	movs	r3, #4
 8008622:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8008624:	2301      	movs	r3, #1
 8008626:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = NULL;
 8008628:	2300      	movs	r3, #0
 800862a:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = 0;
 800862c:	2300      	movs	r3, #0
 800862e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 8008630:	f107 0314 	add.w	r3, r7, #20
 8008634:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8008636:	2309      	movs	r3, #9
 8008638:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800863a:	f107 0320 	add.w	r3, r7, #32
 800863e:	2100      	movs	r1, #0
 8008640:	4618      	mov	r0, r3
 8008642:	f000 f95f 	bl	8008904 <hci_send_req>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	da01      	bge.n	8008650 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 800864c:	23ff      	movs	r3, #255	@ 0xff
 800864e:	e018      	b.n	8008682 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8008650:	7d3b      	ldrb	r3, [r7, #20]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d001      	beq.n	800865a <hci_le_read_local_version+0x64>
    return resp.status;
 8008656:	7d3b      	ldrb	r3, [r7, #20]
 8008658:	e013      	b.n	8008682 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 800865a:	7d7a      	ldrb	r2, [r7, #21]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8008660:	8afa      	ldrh	r2, [r7, #22]
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8008666:	7e3a      	ldrb	r2, [r7, #24]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800866c:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8008670:	b29a      	uxth	r2, r3
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8008676:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800867a:	b29a      	uxth	r2, r3
 800867c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800867e:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3738      	adds	r7, #56	@ 0x38
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b092      	sub	sp, #72	@ 0x48
 800868e:	af00      	add	r7, sp, #0
 8008690:	4603      	mov	r3, r0
 8008692:	6039      	str	r1, [r7, #0]
 8008694:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8008696:	f107 0310 	add.w	r3, r7, #16
 800869a:	2220      	movs	r2, #32
 800869c:	2100      	movs	r1, #0
 800869e:	4618      	mov	r0, r3
 80086a0:	f001 f9c1 	bl	8009a26 <memset>
  scan_resp_cp.length = length;
 80086a4:	79fb      	ldrb	r3, [r7, #7]
 80086a6:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 80086a8:	79fb      	ldrb	r3, [r7, #7]
 80086aa:	2b1f      	cmp	r3, #31
 80086ac:	bf28      	it	cs
 80086ae:	231f      	movcs	r3, #31
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	461a      	mov	r2, r3
 80086b4:	f107 0310 	add.w	r3, r7, #16
 80086b8:	3301      	adds	r3, #1
 80086ba:	6839      	ldr	r1, [r7, #0]
 80086bc:	4618      	mov	r0, r3
 80086be:	f001 fa32 	bl	8009b26 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80086c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80086c6:	2218      	movs	r2, #24
 80086c8:	2100      	movs	r1, #0
 80086ca:	4618      	mov	r0, r3
 80086cc:	f001 f9ab 	bl	8009a26 <memset>
  rq.ogf = OGF_LE_CTL;
 80086d0:	2308      	movs	r3, #8
 80086d2:	863b      	strh	r3, [r7, #48]	@ 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 80086d4:	2309      	movs	r3, #9
 80086d6:	867b      	strh	r3, [r7, #50]	@ 0x32
  rq.cparam = &scan_resp_cp;
 80086d8:	f107 0310 	add.w	r3, r7, #16
 80086dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 80086de:	2320      	movs	r3, #32
 80086e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rparam = &status;
 80086e2:	f107 030f 	add.w	r3, r7, #15
 80086e6:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rlen = 1;
 80086e8:	2301      	movs	r3, #1
 80086ea:	647b      	str	r3, [r7, #68]	@ 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 80086ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80086f0:	2100      	movs	r1, #0
 80086f2:	4618      	mov	r0, r3
 80086f4:	f000 f906 	bl	8008904 <hci_send_req>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	da01      	bge.n	8008702 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 80086fe:	23ff      	movs	r3, #255	@ 0xff
 8008700:	e000      	b.n	8008704 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 8008702:	7bfb      	ldrb	r3, [r7, #15]
}
 8008704:	4618      	mov	r0, r3
 8008706:	3748      	adds	r7, #72	@ 0x48
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	3308      	adds	r3, #8
 8008718:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	2b04      	cmp	r3, #4
 8008720:	d001      	beq.n	8008726 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8008722:	2301      	movs	r3, #1
 8008724:	e00c      	b.n	8008740 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	3302      	adds	r3, #2
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	461a      	mov	r2, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008734:	3b03      	subs	r3, #3
 8008736:	429a      	cmp	r2, r3
 8008738:	d001      	beq.n	800873e <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800873a:	2302      	movs	r3, #2
 800873c:	e000      	b.n	8008740 <verify_packet+0x34>
  
  return 0;      
 800873e:	2300      	movs	r3, #0
}
 8008740:	4618      	mov	r0, r3
 8008742:	3714      	adds	r7, #20
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b0a6      	sub	sp, #152	@ 0x98
 8008750:	af00      	add	r7, sp, #0
 8008752:	607b      	str	r3, [r7, #4]
 8008754:	4603      	mov	r3, r0
 8008756:	81fb      	strh	r3, [r7, #14]
 8008758:	460b      	mov	r3, r1
 800875a:	81bb      	strh	r3, [r7, #12]
 800875c:	4613      	mov	r3, r2
 800875e:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8008760:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008764:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008768:	b21a      	sxth	r2, r3
 800876a:	89fb      	ldrh	r3, [r7, #14]
 800876c:	029b      	lsls	r3, r3, #10
 800876e:	b21b      	sxth	r3, r3
 8008770:	4313      	orrs	r3, r2
 8008772:	b21b      	sxth	r3, r3
 8008774:	b29b      	uxth	r3, r3
 8008776:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8008778:	7afb      	ldrb	r3, [r7, #11]
 800877a:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800877c:	2301      	movs	r3, #1
 800877e:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8008780:	f107 0318 	add.w	r3, r7, #24
 8008784:	3301      	adds	r3, #1
 8008786:	461a      	mov	r2, r3
 8008788:	f107 0314 	add.w	r3, r7, #20
 800878c:	8819      	ldrh	r1, [r3, #0]
 800878e:	789b      	ldrb	r3, [r3, #2]
 8008790:	8011      	strh	r1, [r2, #0]
 8008792:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8008794:	f107 0318 	add.w	r3, r7, #24
 8008798:	3304      	adds	r3, #4
 800879a:	7afa      	ldrb	r2, [r7, #11]
 800879c:	6879      	ldr	r1, [r7, #4]
 800879e:	4618      	mov	r0, r3
 80087a0:	f001 f9c1 	bl	8009b26 <memcpy>
  
  if (hciContext.io.Send)
 80087a4:	4b08      	ldr	r3, [pc, #32]	@ (80087c8 <send_cmd+0x7c>)
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d009      	beq.n	80087c0 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 80087ac:	4b06      	ldr	r3, [pc, #24]	@ (80087c8 <send_cmd+0x7c>)
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	7afa      	ldrb	r2, [r7, #11]
 80087b2:	b292      	uxth	r2, r2
 80087b4:	3204      	adds	r2, #4
 80087b6:	b291      	uxth	r1, r2
 80087b8:	f107 0218 	add.w	r2, r7, #24
 80087bc:	4610      	mov	r0, r2
 80087be:	4798      	blx	r3
  }
}
 80087c0:	bf00      	nop
 80087c2:	3798      	adds	r7, #152	@ 0x98
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	20000800 	.word	0x20000800

080087cc <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 80087d6:	e00a      	b.n	80087ee <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 80087d8:	f107 030c 	add.w	r3, r7, #12
 80087dc:	4619      	mov	r1, r3
 80087de:	6838      	ldr	r0, [r7, #0]
 80087e0:	f000 fae8 	bl	8008db4 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	4619      	mov	r1, r3
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 fa4f 	bl	8008c8c <list_insert_head>
  while (!list_is_empty(src_list))
 80087ee:	6838      	ldr	r0, [r7, #0]
 80087f0:	f000 fa2a 	bl	8008c48 <list_is_empty>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d0ee      	beq.n	80087d8 <move_list+0xc>
  }
}
 80087fa:	bf00      	nop
 80087fc:	bf00      	nop
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800880a:	e009      	b.n	8008820 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800880c:	1d3b      	adds	r3, r7, #4
 800880e:	4619      	mov	r1, r3
 8008810:	4809      	ldr	r0, [pc, #36]	@ (8008838 <free_event_list+0x34>)
 8008812:	f000 faa8 	bl	8008d66 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4619      	mov	r1, r3
 800881a:	4808      	ldr	r0, [pc, #32]	@ (800883c <free_event_list+0x38>)
 800881c:	f000 fa5c 	bl	8008cd8 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008820:	4806      	ldr	r0, [pc, #24]	@ (800883c <free_event_list+0x38>)
 8008822:	f000 faee 	bl	8008e02 <list_get_size>
 8008826:	4603      	mov	r3, r0
 8008828:	2b01      	cmp	r3, #1
 800882a:	ddef      	ble.n	800880c <free_event_list+0x8>
  }
}
 800882c:	bf00      	nop
 800882e:	bf00      	nop
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	2000053c 	.word	0x2000053c
 800883c:	20000534 	.word	0x20000534

08008840 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d002      	beq.n	8008856 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8008850:	4a18      	ldr	r2, [pc, #96]	@ (80088b4 <hci_init+0x74>)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8008856:	4818      	ldr	r0, [pc, #96]	@ (80088b8 <hci_init+0x78>)
 8008858:	f000 f9e6 	bl	8008c28 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800885c:	4817      	ldr	r0, [pc, #92]	@ (80088bc <hci_init+0x7c>)
 800885e:	f000 f9e3 	bl	8008c28 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8008862:	f7fa fbef 	bl	8003044 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8008866:	2300      	movs	r3, #0
 8008868:	73fb      	strb	r3, [r7, #15]
 800886a:	e00c      	b.n	8008886 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800886c:	7bfb      	ldrb	r3, [r7, #15]
 800886e:	228c      	movs	r2, #140	@ 0x8c
 8008870:	fb02 f303 	mul.w	r3, r2, r3
 8008874:	4a12      	ldr	r2, [pc, #72]	@ (80088c0 <hci_init+0x80>)
 8008876:	4413      	add	r3, r2
 8008878:	4619      	mov	r1, r3
 800887a:	480f      	ldr	r0, [pc, #60]	@ (80088b8 <hci_init+0x78>)
 800887c:	f000 fa2c 	bl	8008cd8 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8008880:	7bfb      	ldrb	r3, [r7, #15]
 8008882:	3301      	adds	r3, #1
 8008884:	73fb      	strb	r3, [r7, #15]
 8008886:	7bfb      	ldrb	r3, [r7, #15]
 8008888:	2b04      	cmp	r3, #4
 800888a:	d9ef      	bls.n	800886c <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800888c:	4b09      	ldr	r3, [pc, #36]	@ (80088b4 <hci_init+0x74>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d003      	beq.n	800889c <hci_init+0x5c>
 8008894:	4b07      	ldr	r3, [pc, #28]	@ (80088b4 <hci_init+0x74>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2000      	movs	r0, #0
 800889a:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800889c:	4b05      	ldr	r3, [pc, #20]	@ (80088b4 <hci_init+0x74>)
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d002      	beq.n	80088aa <hci_init+0x6a>
 80088a4:	4b03      	ldr	r3, [pc, #12]	@ (80088b4 <hci_init+0x74>)
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	4798      	blx	r3
}
 80088aa:	bf00      	nop
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	20000800 	.word	0x20000800
 80088b8:	20000534 	.word	0x20000534
 80088bc:	2000053c 	.word	0x2000053c
 80088c0:	20000544 	.word	0x20000544

080088c4 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a0b      	ldr	r2, [pc, #44]	@ (8008900 <hci_register_io_bus+0x3c>)
 80088d2:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	4a09      	ldr	r2, [pc, #36]	@ (8008900 <hci_register_io_bus+0x3c>)
 80088da:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	691b      	ldr	r3, [r3, #16]
 80088e0:	4a07      	ldr	r2, [pc, #28]	@ (8008900 <hci_register_io_bus+0x3c>)
 80088e2:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	699b      	ldr	r3, [r3, #24]
 80088e8:	4a05      	ldr	r2, [pc, #20]	@ (8008900 <hci_register_io_bus+0x3c>)
 80088ea:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	4a03      	ldr	r2, [pc, #12]	@ (8008900 <hci_register_io_bus+0x3c>)
 80088f2:	6093      	str	r3, [r2, #8]
}
 80088f4:	bf00      	nop
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr
 8008900:	20000800 	.word	0x20000800

08008904 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b08e      	sub	sp, #56	@ 0x38
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	460b      	mov	r3, r1
 800890e:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	885b      	ldrh	r3, [r3, #2]
 8008914:	b21b      	sxth	r3, r3
 8008916:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800891a:	b21a      	sxth	r2, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	881b      	ldrh	r3, [r3, #0]
 8008920:	029b      	lsls	r3, r3, #10
 8008922:	b21b      	sxth	r3, r3
 8008924:	4313      	orrs	r3, r2
 8008926:	b21b      	sxth	r3, r3
 8008928:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800892a:	2300      	movs	r3, #0
 800892c:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800892e:	f107 0308 	add.w	r3, r7, #8
 8008932:	4618      	mov	r0, r3
 8008934:	f000 f978 	bl	8008c28 <list_init_head>

  free_event_list();
 8008938:	f7ff ff64 	bl	8008804 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	8818      	ldrh	r0, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	8859      	ldrh	r1, [r3, #2]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	b2da      	uxtb	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	f7ff fefd 	bl	800874c <send_cmd>
  
  if (async)
 8008952:	78fb      	ldrb	r3, [r7, #3]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d001      	beq.n	800895c <hci_send_req+0x58>
  {
    return 0;
 8008958:	2300      	movs	r3, #0
 800895a:	e0e2      	b.n	8008b22 <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800895c:	f7fb fc46 	bl	80041ec <HAL_GetTick>
 8008960:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8008962:	f7fb fc43 	bl	80041ec <HAL_GetTick>
 8008966:	4602      	mov	r2, r0
 8008968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800896a:	1ad3      	subs	r3, r2, r3
 800896c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008970:	f200 80b3 	bhi.w	8008ada <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8008974:	486d      	ldr	r0, [pc, #436]	@ (8008b2c <hci_send_req+0x228>)
 8008976:	f000 f967 	bl	8008c48 <list_is_empty>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d000      	beq.n	8008982 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8008980:	e7ef      	b.n	8008962 <hci_send_req+0x5e>
      {
        break;
 8008982:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8008984:	f107 0310 	add.w	r3, r7, #16
 8008988:	4619      	mov	r1, r3
 800898a:	4868      	ldr	r0, [pc, #416]	@ (8008b2c <hci_send_req+0x228>)
 800898c:	f000 f9eb 	bl	8008d66 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	3308      	adds	r3, #8
 8008994:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8008996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	2b04      	cmp	r3, #4
 800899c:	d17f      	bne.n	8008a9e <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 800899e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089a0:	3301      	adds	r3, #1
 80089a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	3308      	adds	r3, #8
 80089a8:	3303      	adds	r3, #3
 80089aa:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80089b2:	3b03      	subs	r3, #3
 80089b4:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 80089b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80089bc:	d04c      	beq.n	8008a58 <hci_send_req+0x154>
 80089be:	2b3e      	cmp	r3, #62	@ 0x3e
 80089c0:	dc68      	bgt.n	8008a94 <hci_send_req+0x190>
 80089c2:	2b10      	cmp	r3, #16
 80089c4:	f000 808b 	beq.w	8008ade <hci_send_req+0x1da>
 80089c8:	2b10      	cmp	r3, #16
 80089ca:	dc63      	bgt.n	8008a94 <hci_send_req+0x190>
 80089cc:	2b0e      	cmp	r3, #14
 80089ce:	d023      	beq.n	8008a18 <hci_send_req+0x114>
 80089d0:	2b0f      	cmp	r3, #15
 80089d2:	d15f      	bne.n	8008a94 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 80089d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d6:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	885b      	ldrh	r3, [r3, #2]
 80089dc:	b29b      	uxth	r3, r3
 80089de:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d17e      	bne.n	8008ae2 <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	2b0f      	cmp	r3, #15
 80089ea:	d004      	beq.n	80089f6 <hci_send_req+0xf2>
          if (cs->status) {
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d051      	beq.n	8008a98 <hci_send_req+0x194>
            goto failed;
 80089f4:	e078      	b.n	8008ae8 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	695a      	ldr	r2, [r3, #20]
 80089fa:	6a3b      	ldr	r3, [r7, #32]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	bf28      	it	cs
 8008a00:	461a      	movcs	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6918      	ldr	r0, [r3, #16]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	461a      	mov	r2, r3
 8008a10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008a12:	f001 f888 	bl	8009b26 <memcpy>
        goto done;
 8008a16:	e078      	b.n	8008b0a <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8008a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1a:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d15d      	bne.n	8008ae6 <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a2c:	3303      	adds	r3, #3
 8008a2e:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8008a30:	6a3b      	ldr	r3, [r7, #32]
 8008a32:	3b03      	subs	r3, #3
 8008a34:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	695a      	ldr	r2, [r3, #20]
 8008a3a:	6a3b      	ldr	r3, [r7, #32]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	bf28      	it	cs
 8008a40:	461a      	movcs	r2, r3
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6918      	ldr	r0, [r3, #16]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	695b      	ldr	r3, [r3, #20]
 8008a4e:	461a      	mov	r2, r3
 8008a50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008a52:	f001 f868 	bl	8009b26 <memcpy>
        goto done;
 8008a56:	e058      	b.n	8008b0a <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8008a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a5a:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	461a      	mov	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d118      	bne.n	8008a9c <hci_send_req+0x198>
          break;
      
        len -= 1;
 8008a6a:	6a3b      	ldr	r3, [r7, #32]
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	695a      	ldr	r2, [r3, #20]
 8008a74:	6a3b      	ldr	r3, [r7, #32]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	bf28      	it	cs
 8008a7a:	461a      	movcs	r2, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6918      	ldr	r0, [r3, #16]
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	1c59      	adds	r1, r3, #1
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	695b      	ldr	r3, [r3, #20]
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	f001 f84a 	bl	8009b26 <memcpy>
        goto done;
 8008a92:	e03a      	b.n	8008b0a <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8008a94:	bf00      	nop
 8008a96:	e002      	b.n	8008a9e <hci_send_req+0x19a>
          break;
 8008a98:	bf00      	nop
 8008a9a:	e000      	b.n	8008a9e <hci_send_req+0x19a>
          break;
 8008a9c:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8008a9e:	4824      	ldr	r0, [pc, #144]	@ (8008b30 <hci_send_req+0x22c>)
 8008aa0:	f000 f8d2 	bl	8008c48 <list_is_empty>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00d      	beq.n	8008ac6 <hci_send_req+0x1c2>
 8008aaa:	4820      	ldr	r0, [pc, #128]	@ (8008b2c <hci_send_req+0x228>)
 8008aac:	f000 f8cc 	bl	8008c48 <list_is_empty>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d007      	beq.n	8008ac6 <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	4619      	mov	r1, r3
 8008aba:	481d      	ldr	r0, [pc, #116]	@ (8008b30 <hci_send_req+0x22c>)
 8008abc:	f000 f90c 	bl	8008cd8 <list_insert_tail>
      hciReadPacket=NULL;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	613b      	str	r3, [r7, #16]
 8008ac4:	e008      	b.n	8008ad8 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	f107 0308 	add.w	r3, r7, #8
 8008acc:	4611      	mov	r1, r2
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f000 f902 	bl	8008cd8 <list_insert_tail>
      hciReadPacket=NULL;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	613b      	str	r3, [r7, #16]
  {
 8008ad8:	e740      	b.n	800895c <hci_send_req+0x58>
        goto failed;
 8008ada:	bf00      	nop
 8008adc:	e004      	b.n	8008ae8 <hci_send_req+0x1e4>
        goto failed;
 8008ade:	bf00      	nop
 8008ae0:	e002      	b.n	8008ae8 <hci_send_req+0x1e4>
          goto failed;
 8008ae2:	bf00      	nop
 8008ae4:	e000      	b.n	8008ae8 <hci_send_req+0x1e4>
          goto failed;
 8008ae6:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d004      	beq.n	8008af8 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	4619      	mov	r1, r3
 8008af2:	480f      	ldr	r0, [pc, #60]	@ (8008b30 <hci_send_req+0x22c>)
 8008af4:	f000 f8ca 	bl	8008c8c <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8008af8:	f107 0308 	add.w	r3, r7, #8
 8008afc:	4619      	mov	r1, r3
 8008afe:	480b      	ldr	r0, [pc, #44]	@ (8008b2c <hci_send_req+0x228>)
 8008b00:	f7ff fe64 	bl	80087cc <move_list>

  return -1;
 8008b04:	f04f 33ff 	mov.w	r3, #4294967295
 8008b08:	e00b      	b.n	8008b22 <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	4808      	ldr	r0, [pc, #32]	@ (8008b30 <hci_send_req+0x22c>)
 8008b10:	f000 f8bc 	bl	8008c8c <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8008b14:	f107 0308 	add.w	r3, r7, #8
 8008b18:	4619      	mov	r1, r3
 8008b1a:	4804      	ldr	r0, [pc, #16]	@ (8008b2c <hci_send_req+0x228>)
 8008b1c:	f7ff fe56 	bl	80087cc <move_list>

  return 0;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3738      	adds	r7, #56	@ 0x38
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	2000053c 	.word	0x2000053c
 8008b30:	20000534 	.word	0x20000534

08008b34 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8008b3e:	e013      	b.n	8008b68 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8008b40:	1d3b      	adds	r3, r7, #4
 8008b42:	4619      	mov	r1, r3
 8008b44:	480e      	ldr	r0, [pc, #56]	@ (8008b80 <hci_user_evt_proc+0x4c>)
 8008b46:	f000 f90e 	bl	8008d66 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8008b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8008b84 <hci_user_evt_proc+0x50>)
 8008b4c:	69db      	ldr	r3, [r3, #28]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d005      	beq.n	8008b5e <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8008b52:	4b0c      	ldr	r3, [pc, #48]	@ (8008b84 <hci_user_evt_proc+0x50>)
 8008b54:	69db      	ldr	r3, [r3, #28]
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	3208      	adds	r2, #8
 8008b5a:	4610      	mov	r0, r2
 8008b5c:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4619      	mov	r1, r3
 8008b62:	4809      	ldr	r0, [pc, #36]	@ (8008b88 <hci_user_evt_proc+0x54>)
 8008b64:	f000 f8b8 	bl	8008cd8 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8008b68:	4805      	ldr	r0, [pc, #20]	@ (8008b80 <hci_user_evt_proc+0x4c>)
 8008b6a:	f000 f86d 	bl	8008c48 <list_is_empty>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d0e5      	beq.n	8008b40 <hci_user_evt_proc+0xc>
  }
}
 8008b74:	bf00      	nop
 8008b76:	bf00      	nop
 8008b78:	3708      	adds	r7, #8
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	2000053c 	.word	0x2000053c
 8008b84:	20000800 	.word	0x20000800
 8008b88:	20000534 	.word	0x20000534

08008b8c <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b086      	sub	sp, #24
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8008b94:	2300      	movs	r3, #0
 8008b96:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8008b9c:	481f      	ldr	r0, [pc, #124]	@ (8008c1c <hci_notify_asynch_evt+0x90>)
 8008b9e:	f000 f853 	bl	8008c48 <list_is_empty>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d132      	bne.n	8008c0e <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8008ba8:	f107 030c 	add.w	r3, r7, #12
 8008bac:	4619      	mov	r1, r3
 8008bae:	481b      	ldr	r0, [pc, #108]	@ (8008c1c <hci_notify_asynch_evt+0x90>)
 8008bb0:	f000 f8d9 	bl	8008d66 <list_remove_head>
    
    if (hciContext.io.Receive)
 8008bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8008c20 <hci_notify_asynch_evt+0x94>)
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d02a      	beq.n	8008c12 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8008bbc:	4b18      	ldr	r3, [pc, #96]	@ (8008c20 <hci_notify_asynch_evt+0x94>)
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	3208      	adds	r2, #8
 8008bc4:	2180      	movs	r1, #128	@ 0x80
 8008bc6:	4610      	mov	r0, r2
 8008bc8:	4798      	blx	r3
 8008bca:	4603      	mov	r3, r0
 8008bcc:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8008bce:	7cfb      	ldrb	r3, [r7, #19]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d016      	beq.n	8008c02 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	7cfa      	ldrb	r2, [r7, #19]
 8008bd8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7ff fd94 	bl	800870c <verify_packet>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d105      	bne.n	8008bf6 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	4619      	mov	r1, r3
 8008bee:	480d      	ldr	r0, [pc, #52]	@ (8008c24 <hci_notify_asynch_evt+0x98>)
 8008bf0:	f000 f872 	bl	8008cd8 <list_insert_tail>
 8008bf4:	e00d      	b.n	8008c12 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	4808      	ldr	r0, [pc, #32]	@ (8008c1c <hci_notify_asynch_evt+0x90>)
 8008bfc:	f000 f846 	bl	8008c8c <list_insert_head>
 8008c00:	e007      	b.n	8008c12 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	4619      	mov	r1, r3
 8008c06:	4805      	ldr	r0, [pc, #20]	@ (8008c1c <hci_notify_asynch_evt+0x90>)
 8008c08:	f000 f840 	bl	8008c8c <list_insert_head>
 8008c0c:	e001      	b.n	8008c12 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8008c12:	697b      	ldr	r3, [r7, #20]

}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3718      	adds	r7, #24
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	20000534 	.word	0x20000534
 8008c20:	20000800 	.word	0x20000800
 8008c24:	2000053c 	.word	0x2000053c

08008c28 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	605a      	str	r2, [r3, #4]
}
 8008c3c:	bf00      	nop
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b087      	sub	sp, #28
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c50:	f3ef 8310 	mrs	r3, PRIMASK
 8008c54:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c56:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008c58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c5a:	b672      	cpsid	i
}
 8008c5c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d102      	bne.n	8008c6e <list_is_empty+0x26>
  {
    return_value = 1;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	75fb      	strb	r3, [r7, #23]
 8008c6c:	e001      	b.n	8008c72 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	75fb      	strb	r3, [r7, #23]
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	f383 8810 	msr	PRIMASK, r3
}
 8008c7c:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8008c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	371c      	adds	r7, #28
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b087      	sub	sp, #28
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c96:	f3ef 8310 	mrs	r3, PRIMASK
 8008c9a:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008c9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ca0:	b672      	cpsid	i
}
 8008ca2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	683a      	ldr	r2, [r7, #0]
 8008cb6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	683a      	ldr	r2, [r7, #0]
 8008cbe:	605a      	str	r2, [r3, #4]
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	f383 8810 	msr	PRIMASK, r3
}
 8008cca:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008ccc:	bf00      	nop
 8008cce:	371c      	adds	r7, #28
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b087      	sub	sp, #28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ce2:	f3ef 8310 	mrs	r3, PRIMASK
 8008ce6:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008cea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008cec:	b672      	cpsid	i
}
 8008cee:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	685a      	ldr	r2, [r3, #4]
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	683a      	ldr	r2, [r7, #0]
 8008d02:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	683a      	ldr	r2, [r7, #0]
 8008d0a:	601a      	str	r2, [r3, #0]
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	f383 8810 	msr	PRIMASK, r3
}
 8008d16:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008d18:	bf00      	nop
 8008d1a:	371c      	adds	r7, #28
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b087      	sub	sp, #28
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8008d30:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d32:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008d34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d36:	b672      	cpsid	i
}
 8008d38:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	6812      	ldr	r2, [r2, #0]
 8008d42:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	6852      	ldr	r2, [r2, #4]
 8008d4c:	605a      	str	r2, [r3, #4]
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	f383 8810 	msr	PRIMASK, r3
}
 8008d58:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008d5a:	bf00      	nop
 8008d5c:	371c      	adds	r7, #28
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr

08008d66 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b086      	sub	sp, #24
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d70:	f3ef 8310 	mrs	r3, PRIMASK
 8008d74:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d76:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008d78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d7a:	b672      	cpsid	i
}
 8008d7c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7ff ffca 	bl	8008d24 <list_remove_node>
  (*node)->next = NULL;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2200      	movs	r2, #0
 8008d96:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	605a      	str	r2, [r3, #4]
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	f383 8810 	msr	PRIMASK, r3
}
 8008daa:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008dac:	bf00      	nop
 8008dae:	3718      	adds	r7, #24
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b086      	sub	sp, #24
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dbe:	f3ef 8310 	mrs	r3, PRIMASK
 8008dc2:	60fb      	str	r3, [r7, #12]
  return(result);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008dc6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008dc8:	b672      	cpsid	i
}
 8008dca:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	685a      	ldr	r2, [r3, #4]
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7ff ffa3 	bl	8008d24 <list_remove_node>
  (*node)->next = NULL;
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2200      	movs	r2, #0
 8008de4:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2200      	movs	r2, #0
 8008dec:	605a      	str	r2, [r3, #4]
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	f383 8810 	msr	PRIMASK, r3
}
 8008df8:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008dfa:	bf00      	nop
 8008dfc:	3718      	adds	r7, #24
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8008e02:	b480      	push	{r7}
 8008e04:	b089      	sub	sp, #36	@ 0x24
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
  int size = 0;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8008e12:	613b      	str	r3, [r7, #16]
  return(result);
 8008e14:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008e16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008e18:	b672      	cpsid	i
}
 8008e1a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8008e22:	e005      	b.n	8008e30 <list_get_size+0x2e>
  {
    size++;
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	3301      	adds	r3, #1
 8008e28:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8008e30:	69ba      	ldr	r2, [r7, #24]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d1f5      	bne.n	8008e24 <list_get_size+0x22>
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f383 8810 	msr	PRIMASK, r3
}
 8008e42:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8008e44:	69fb      	ldr	r3, [r7, #28]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3724      	adds	r7, #36	@ 0x24
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr
	...

08008e54 <srand>:
 8008e54:	b538      	push	{r3, r4, r5, lr}
 8008e56:	4b10      	ldr	r3, [pc, #64]	@ (8008e98 <srand+0x44>)
 8008e58:	681d      	ldr	r5, [r3, #0]
 8008e5a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8008e5c:	4604      	mov	r4, r0
 8008e5e:	b9b3      	cbnz	r3, 8008e8e <srand+0x3a>
 8008e60:	2018      	movs	r0, #24
 8008e62:	f001 fd23 	bl	800a8ac <malloc>
 8008e66:	4602      	mov	r2, r0
 8008e68:	6328      	str	r0, [r5, #48]	@ 0x30
 8008e6a:	b920      	cbnz	r0, 8008e76 <srand+0x22>
 8008e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8008e9c <srand+0x48>)
 8008e6e:	480c      	ldr	r0, [pc, #48]	@ (8008ea0 <srand+0x4c>)
 8008e70:	2146      	movs	r1, #70	@ 0x46
 8008e72:	f000 fe67 	bl	8009b44 <__assert_func>
 8008e76:	490b      	ldr	r1, [pc, #44]	@ (8008ea4 <srand+0x50>)
 8008e78:	4b0b      	ldr	r3, [pc, #44]	@ (8008ea8 <srand+0x54>)
 8008e7a:	e9c0 1300 	strd	r1, r3, [r0]
 8008e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8008eac <srand+0x58>)
 8008e80:	6083      	str	r3, [r0, #8]
 8008e82:	230b      	movs	r3, #11
 8008e84:	8183      	strh	r3, [r0, #12]
 8008e86:	2100      	movs	r1, #0
 8008e88:	2001      	movs	r0, #1
 8008e8a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008e8e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8008e90:	2200      	movs	r2, #0
 8008e92:	611c      	str	r4, [r3, #16]
 8008e94:	615a      	str	r2, [r3, #20]
 8008e96:	bd38      	pop	{r3, r4, r5, pc}
 8008e98:	20000030 	.word	0x20000030
 8008e9c:	0800bc64 	.word	0x0800bc64
 8008ea0:	0800bc7b 	.word	0x0800bc7b
 8008ea4:	abcd330e 	.word	0xabcd330e
 8008ea8:	e66d1234 	.word	0xe66d1234
 8008eac:	0005deec 	.word	0x0005deec

08008eb0 <rand>:
 8008eb0:	4b16      	ldr	r3, [pc, #88]	@ (8008f0c <rand+0x5c>)
 8008eb2:	b510      	push	{r4, lr}
 8008eb4:	681c      	ldr	r4, [r3, #0]
 8008eb6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008eb8:	b9b3      	cbnz	r3, 8008ee8 <rand+0x38>
 8008eba:	2018      	movs	r0, #24
 8008ebc:	f001 fcf6 	bl	800a8ac <malloc>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	6320      	str	r0, [r4, #48]	@ 0x30
 8008ec4:	b920      	cbnz	r0, 8008ed0 <rand+0x20>
 8008ec6:	4b12      	ldr	r3, [pc, #72]	@ (8008f10 <rand+0x60>)
 8008ec8:	4812      	ldr	r0, [pc, #72]	@ (8008f14 <rand+0x64>)
 8008eca:	2152      	movs	r1, #82	@ 0x52
 8008ecc:	f000 fe3a 	bl	8009b44 <__assert_func>
 8008ed0:	4911      	ldr	r1, [pc, #68]	@ (8008f18 <rand+0x68>)
 8008ed2:	4b12      	ldr	r3, [pc, #72]	@ (8008f1c <rand+0x6c>)
 8008ed4:	e9c0 1300 	strd	r1, r3, [r0]
 8008ed8:	4b11      	ldr	r3, [pc, #68]	@ (8008f20 <rand+0x70>)
 8008eda:	6083      	str	r3, [r0, #8]
 8008edc:	230b      	movs	r3, #11
 8008ede:	8183      	strh	r3, [r0, #12]
 8008ee0:	2100      	movs	r1, #0
 8008ee2:	2001      	movs	r0, #1
 8008ee4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008ee8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008eea:	480e      	ldr	r0, [pc, #56]	@ (8008f24 <rand+0x74>)
 8008eec:	690b      	ldr	r3, [r1, #16]
 8008eee:	694c      	ldr	r4, [r1, #20]
 8008ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8008f28 <rand+0x78>)
 8008ef2:	4358      	muls	r0, r3
 8008ef4:	fb02 0004 	mla	r0, r2, r4, r0
 8008ef8:	fba3 3202 	umull	r3, r2, r3, r2
 8008efc:	3301      	adds	r3, #1
 8008efe:	eb40 0002 	adc.w	r0, r0, r2
 8008f02:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8008f06:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8008f0a:	bd10      	pop	{r4, pc}
 8008f0c:	20000030 	.word	0x20000030
 8008f10:	0800bc64 	.word	0x0800bc64
 8008f14:	0800bc7b 	.word	0x0800bc7b
 8008f18:	abcd330e 	.word	0xabcd330e
 8008f1c:	e66d1234 	.word	0xe66d1234
 8008f20:	0005deec 	.word	0x0005deec
 8008f24:	5851f42d 	.word	0x5851f42d
 8008f28:	4c957f2d 	.word	0x4c957f2d

08008f2c <__cvt>:
 8008f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f30:	ec57 6b10 	vmov	r6, r7, d0
 8008f34:	2f00      	cmp	r7, #0
 8008f36:	460c      	mov	r4, r1
 8008f38:	4619      	mov	r1, r3
 8008f3a:	463b      	mov	r3, r7
 8008f3c:	bfbb      	ittet	lt
 8008f3e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008f42:	461f      	movlt	r7, r3
 8008f44:	2300      	movge	r3, #0
 8008f46:	232d      	movlt	r3, #45	@ 0x2d
 8008f48:	700b      	strb	r3, [r1, #0]
 8008f4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f4c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008f50:	4691      	mov	r9, r2
 8008f52:	f023 0820 	bic.w	r8, r3, #32
 8008f56:	bfbc      	itt	lt
 8008f58:	4632      	movlt	r2, r6
 8008f5a:	4616      	movlt	r6, r2
 8008f5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008f60:	d005      	beq.n	8008f6e <__cvt+0x42>
 8008f62:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008f66:	d100      	bne.n	8008f6a <__cvt+0x3e>
 8008f68:	3401      	adds	r4, #1
 8008f6a:	2102      	movs	r1, #2
 8008f6c:	e000      	b.n	8008f70 <__cvt+0x44>
 8008f6e:	2103      	movs	r1, #3
 8008f70:	ab03      	add	r3, sp, #12
 8008f72:	9301      	str	r3, [sp, #4]
 8008f74:	ab02      	add	r3, sp, #8
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	ec47 6b10 	vmov	d0, r6, r7
 8008f7c:	4653      	mov	r3, sl
 8008f7e:	4622      	mov	r2, r4
 8008f80:	f000 fe86 	bl	8009c90 <_dtoa_r>
 8008f84:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008f88:	4605      	mov	r5, r0
 8008f8a:	d119      	bne.n	8008fc0 <__cvt+0x94>
 8008f8c:	f019 0f01 	tst.w	r9, #1
 8008f90:	d00e      	beq.n	8008fb0 <__cvt+0x84>
 8008f92:	eb00 0904 	add.w	r9, r0, r4
 8008f96:	2200      	movs	r2, #0
 8008f98:	2300      	movs	r3, #0
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	4639      	mov	r1, r7
 8008f9e:	f7f7 fd93 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fa2:	b108      	cbz	r0, 8008fa8 <__cvt+0x7c>
 8008fa4:	f8cd 900c 	str.w	r9, [sp, #12]
 8008fa8:	2230      	movs	r2, #48	@ 0x30
 8008faa:	9b03      	ldr	r3, [sp, #12]
 8008fac:	454b      	cmp	r3, r9
 8008fae:	d31e      	bcc.n	8008fee <__cvt+0xc2>
 8008fb0:	9b03      	ldr	r3, [sp, #12]
 8008fb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008fb4:	1b5b      	subs	r3, r3, r5
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	6013      	str	r3, [r2, #0]
 8008fba:	b004      	add	sp, #16
 8008fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fc0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008fc4:	eb00 0904 	add.w	r9, r0, r4
 8008fc8:	d1e5      	bne.n	8008f96 <__cvt+0x6a>
 8008fca:	7803      	ldrb	r3, [r0, #0]
 8008fcc:	2b30      	cmp	r3, #48	@ 0x30
 8008fce:	d10a      	bne.n	8008fe6 <__cvt+0xba>
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	4639      	mov	r1, r7
 8008fd8:	f7f7 fd76 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fdc:	b918      	cbnz	r0, 8008fe6 <__cvt+0xba>
 8008fde:	f1c4 0401 	rsb	r4, r4, #1
 8008fe2:	f8ca 4000 	str.w	r4, [sl]
 8008fe6:	f8da 3000 	ldr.w	r3, [sl]
 8008fea:	4499      	add	r9, r3
 8008fec:	e7d3      	b.n	8008f96 <__cvt+0x6a>
 8008fee:	1c59      	adds	r1, r3, #1
 8008ff0:	9103      	str	r1, [sp, #12]
 8008ff2:	701a      	strb	r2, [r3, #0]
 8008ff4:	e7d9      	b.n	8008faa <__cvt+0x7e>

08008ff6 <__exponent>:
 8008ff6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ff8:	2900      	cmp	r1, #0
 8008ffa:	bfba      	itte	lt
 8008ffc:	4249      	neglt	r1, r1
 8008ffe:	232d      	movlt	r3, #45	@ 0x2d
 8009000:	232b      	movge	r3, #43	@ 0x2b
 8009002:	2909      	cmp	r1, #9
 8009004:	7002      	strb	r2, [r0, #0]
 8009006:	7043      	strb	r3, [r0, #1]
 8009008:	dd29      	ble.n	800905e <__exponent+0x68>
 800900a:	f10d 0307 	add.w	r3, sp, #7
 800900e:	461d      	mov	r5, r3
 8009010:	270a      	movs	r7, #10
 8009012:	461a      	mov	r2, r3
 8009014:	fbb1 f6f7 	udiv	r6, r1, r7
 8009018:	fb07 1416 	mls	r4, r7, r6, r1
 800901c:	3430      	adds	r4, #48	@ 0x30
 800901e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009022:	460c      	mov	r4, r1
 8009024:	2c63      	cmp	r4, #99	@ 0x63
 8009026:	f103 33ff 	add.w	r3, r3, #4294967295
 800902a:	4631      	mov	r1, r6
 800902c:	dcf1      	bgt.n	8009012 <__exponent+0x1c>
 800902e:	3130      	adds	r1, #48	@ 0x30
 8009030:	1e94      	subs	r4, r2, #2
 8009032:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009036:	1c41      	adds	r1, r0, #1
 8009038:	4623      	mov	r3, r4
 800903a:	42ab      	cmp	r3, r5
 800903c:	d30a      	bcc.n	8009054 <__exponent+0x5e>
 800903e:	f10d 0309 	add.w	r3, sp, #9
 8009042:	1a9b      	subs	r3, r3, r2
 8009044:	42ac      	cmp	r4, r5
 8009046:	bf88      	it	hi
 8009048:	2300      	movhi	r3, #0
 800904a:	3302      	adds	r3, #2
 800904c:	4403      	add	r3, r0
 800904e:	1a18      	subs	r0, r3, r0
 8009050:	b003      	add	sp, #12
 8009052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009054:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009058:	f801 6f01 	strb.w	r6, [r1, #1]!
 800905c:	e7ed      	b.n	800903a <__exponent+0x44>
 800905e:	2330      	movs	r3, #48	@ 0x30
 8009060:	3130      	adds	r1, #48	@ 0x30
 8009062:	7083      	strb	r3, [r0, #2]
 8009064:	70c1      	strb	r1, [r0, #3]
 8009066:	1d03      	adds	r3, r0, #4
 8009068:	e7f1      	b.n	800904e <__exponent+0x58>
	...

0800906c <_printf_float>:
 800906c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009070:	b08d      	sub	sp, #52	@ 0x34
 8009072:	460c      	mov	r4, r1
 8009074:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009078:	4616      	mov	r6, r2
 800907a:	461f      	mov	r7, r3
 800907c:	4605      	mov	r5, r0
 800907e:	f000 fcdb 	bl	8009a38 <_localeconv_r>
 8009082:	6803      	ldr	r3, [r0, #0]
 8009084:	9304      	str	r3, [sp, #16]
 8009086:	4618      	mov	r0, r3
 8009088:	f7f7 f8f2 	bl	8000270 <strlen>
 800908c:	2300      	movs	r3, #0
 800908e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009090:	f8d8 3000 	ldr.w	r3, [r8]
 8009094:	9005      	str	r0, [sp, #20]
 8009096:	3307      	adds	r3, #7
 8009098:	f023 0307 	bic.w	r3, r3, #7
 800909c:	f103 0208 	add.w	r2, r3, #8
 80090a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80090a4:	f8d4 b000 	ldr.w	fp, [r4]
 80090a8:	f8c8 2000 	str.w	r2, [r8]
 80090ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80090b4:	9307      	str	r3, [sp, #28]
 80090b6:	f8cd 8018 	str.w	r8, [sp, #24]
 80090ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80090be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090c2:	4b9c      	ldr	r3, [pc, #624]	@ (8009334 <_printf_float+0x2c8>)
 80090c4:	f04f 32ff 	mov.w	r2, #4294967295
 80090c8:	f7f7 fd30 	bl	8000b2c <__aeabi_dcmpun>
 80090cc:	bb70      	cbnz	r0, 800912c <_printf_float+0xc0>
 80090ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090d2:	4b98      	ldr	r3, [pc, #608]	@ (8009334 <_printf_float+0x2c8>)
 80090d4:	f04f 32ff 	mov.w	r2, #4294967295
 80090d8:	f7f7 fd0a 	bl	8000af0 <__aeabi_dcmple>
 80090dc:	bb30      	cbnz	r0, 800912c <_printf_float+0xc0>
 80090de:	2200      	movs	r2, #0
 80090e0:	2300      	movs	r3, #0
 80090e2:	4640      	mov	r0, r8
 80090e4:	4649      	mov	r1, r9
 80090e6:	f7f7 fcf9 	bl	8000adc <__aeabi_dcmplt>
 80090ea:	b110      	cbz	r0, 80090f2 <_printf_float+0x86>
 80090ec:	232d      	movs	r3, #45	@ 0x2d
 80090ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090f2:	4a91      	ldr	r2, [pc, #580]	@ (8009338 <_printf_float+0x2cc>)
 80090f4:	4b91      	ldr	r3, [pc, #580]	@ (800933c <_printf_float+0x2d0>)
 80090f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80090fa:	bf94      	ite	ls
 80090fc:	4690      	movls	r8, r2
 80090fe:	4698      	movhi	r8, r3
 8009100:	2303      	movs	r3, #3
 8009102:	6123      	str	r3, [r4, #16]
 8009104:	f02b 0304 	bic.w	r3, fp, #4
 8009108:	6023      	str	r3, [r4, #0]
 800910a:	f04f 0900 	mov.w	r9, #0
 800910e:	9700      	str	r7, [sp, #0]
 8009110:	4633      	mov	r3, r6
 8009112:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009114:	4621      	mov	r1, r4
 8009116:	4628      	mov	r0, r5
 8009118:	f000 f9d2 	bl	80094c0 <_printf_common>
 800911c:	3001      	adds	r0, #1
 800911e:	f040 808d 	bne.w	800923c <_printf_float+0x1d0>
 8009122:	f04f 30ff 	mov.w	r0, #4294967295
 8009126:	b00d      	add	sp, #52	@ 0x34
 8009128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800912c:	4642      	mov	r2, r8
 800912e:	464b      	mov	r3, r9
 8009130:	4640      	mov	r0, r8
 8009132:	4649      	mov	r1, r9
 8009134:	f7f7 fcfa 	bl	8000b2c <__aeabi_dcmpun>
 8009138:	b140      	cbz	r0, 800914c <_printf_float+0xe0>
 800913a:	464b      	mov	r3, r9
 800913c:	2b00      	cmp	r3, #0
 800913e:	bfbc      	itt	lt
 8009140:	232d      	movlt	r3, #45	@ 0x2d
 8009142:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009146:	4a7e      	ldr	r2, [pc, #504]	@ (8009340 <_printf_float+0x2d4>)
 8009148:	4b7e      	ldr	r3, [pc, #504]	@ (8009344 <_printf_float+0x2d8>)
 800914a:	e7d4      	b.n	80090f6 <_printf_float+0x8a>
 800914c:	6863      	ldr	r3, [r4, #4]
 800914e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009152:	9206      	str	r2, [sp, #24]
 8009154:	1c5a      	adds	r2, r3, #1
 8009156:	d13b      	bne.n	80091d0 <_printf_float+0x164>
 8009158:	2306      	movs	r3, #6
 800915a:	6063      	str	r3, [r4, #4]
 800915c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009160:	2300      	movs	r3, #0
 8009162:	6022      	str	r2, [r4, #0]
 8009164:	9303      	str	r3, [sp, #12]
 8009166:	ab0a      	add	r3, sp, #40	@ 0x28
 8009168:	e9cd a301 	strd	sl, r3, [sp, #4]
 800916c:	ab09      	add	r3, sp, #36	@ 0x24
 800916e:	9300      	str	r3, [sp, #0]
 8009170:	6861      	ldr	r1, [r4, #4]
 8009172:	ec49 8b10 	vmov	d0, r8, r9
 8009176:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800917a:	4628      	mov	r0, r5
 800917c:	f7ff fed6 	bl	8008f2c <__cvt>
 8009180:	9b06      	ldr	r3, [sp, #24]
 8009182:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009184:	2b47      	cmp	r3, #71	@ 0x47
 8009186:	4680      	mov	r8, r0
 8009188:	d129      	bne.n	80091de <_printf_float+0x172>
 800918a:	1cc8      	adds	r0, r1, #3
 800918c:	db02      	blt.n	8009194 <_printf_float+0x128>
 800918e:	6863      	ldr	r3, [r4, #4]
 8009190:	4299      	cmp	r1, r3
 8009192:	dd41      	ble.n	8009218 <_printf_float+0x1ac>
 8009194:	f1aa 0a02 	sub.w	sl, sl, #2
 8009198:	fa5f fa8a 	uxtb.w	sl, sl
 800919c:	3901      	subs	r1, #1
 800919e:	4652      	mov	r2, sl
 80091a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80091a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80091a6:	f7ff ff26 	bl	8008ff6 <__exponent>
 80091aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80091ac:	1813      	adds	r3, r2, r0
 80091ae:	2a01      	cmp	r2, #1
 80091b0:	4681      	mov	r9, r0
 80091b2:	6123      	str	r3, [r4, #16]
 80091b4:	dc02      	bgt.n	80091bc <_printf_float+0x150>
 80091b6:	6822      	ldr	r2, [r4, #0]
 80091b8:	07d2      	lsls	r2, r2, #31
 80091ba:	d501      	bpl.n	80091c0 <_printf_float+0x154>
 80091bc:	3301      	adds	r3, #1
 80091be:	6123      	str	r3, [r4, #16]
 80091c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d0a2      	beq.n	800910e <_printf_float+0xa2>
 80091c8:	232d      	movs	r3, #45	@ 0x2d
 80091ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091ce:	e79e      	b.n	800910e <_printf_float+0xa2>
 80091d0:	9a06      	ldr	r2, [sp, #24]
 80091d2:	2a47      	cmp	r2, #71	@ 0x47
 80091d4:	d1c2      	bne.n	800915c <_printf_float+0xf0>
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1c0      	bne.n	800915c <_printf_float+0xf0>
 80091da:	2301      	movs	r3, #1
 80091dc:	e7bd      	b.n	800915a <_printf_float+0xee>
 80091de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80091e2:	d9db      	bls.n	800919c <_printf_float+0x130>
 80091e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80091e8:	d118      	bne.n	800921c <_printf_float+0x1b0>
 80091ea:	2900      	cmp	r1, #0
 80091ec:	6863      	ldr	r3, [r4, #4]
 80091ee:	dd0b      	ble.n	8009208 <_printf_float+0x19c>
 80091f0:	6121      	str	r1, [r4, #16]
 80091f2:	b913      	cbnz	r3, 80091fa <_printf_float+0x18e>
 80091f4:	6822      	ldr	r2, [r4, #0]
 80091f6:	07d0      	lsls	r0, r2, #31
 80091f8:	d502      	bpl.n	8009200 <_printf_float+0x194>
 80091fa:	3301      	adds	r3, #1
 80091fc:	440b      	add	r3, r1
 80091fe:	6123      	str	r3, [r4, #16]
 8009200:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009202:	f04f 0900 	mov.w	r9, #0
 8009206:	e7db      	b.n	80091c0 <_printf_float+0x154>
 8009208:	b913      	cbnz	r3, 8009210 <_printf_float+0x1a4>
 800920a:	6822      	ldr	r2, [r4, #0]
 800920c:	07d2      	lsls	r2, r2, #31
 800920e:	d501      	bpl.n	8009214 <_printf_float+0x1a8>
 8009210:	3302      	adds	r3, #2
 8009212:	e7f4      	b.n	80091fe <_printf_float+0x192>
 8009214:	2301      	movs	r3, #1
 8009216:	e7f2      	b.n	80091fe <_printf_float+0x192>
 8009218:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800921c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800921e:	4299      	cmp	r1, r3
 8009220:	db05      	blt.n	800922e <_printf_float+0x1c2>
 8009222:	6823      	ldr	r3, [r4, #0]
 8009224:	6121      	str	r1, [r4, #16]
 8009226:	07d8      	lsls	r0, r3, #31
 8009228:	d5ea      	bpl.n	8009200 <_printf_float+0x194>
 800922a:	1c4b      	adds	r3, r1, #1
 800922c:	e7e7      	b.n	80091fe <_printf_float+0x192>
 800922e:	2900      	cmp	r1, #0
 8009230:	bfd4      	ite	le
 8009232:	f1c1 0202 	rsble	r2, r1, #2
 8009236:	2201      	movgt	r2, #1
 8009238:	4413      	add	r3, r2
 800923a:	e7e0      	b.n	80091fe <_printf_float+0x192>
 800923c:	6823      	ldr	r3, [r4, #0]
 800923e:	055a      	lsls	r2, r3, #21
 8009240:	d407      	bmi.n	8009252 <_printf_float+0x1e6>
 8009242:	6923      	ldr	r3, [r4, #16]
 8009244:	4642      	mov	r2, r8
 8009246:	4631      	mov	r1, r6
 8009248:	4628      	mov	r0, r5
 800924a:	47b8      	blx	r7
 800924c:	3001      	adds	r0, #1
 800924e:	d12b      	bne.n	80092a8 <_printf_float+0x23c>
 8009250:	e767      	b.n	8009122 <_printf_float+0xb6>
 8009252:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009256:	f240 80dd 	bls.w	8009414 <_printf_float+0x3a8>
 800925a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800925e:	2200      	movs	r2, #0
 8009260:	2300      	movs	r3, #0
 8009262:	f7f7 fc31 	bl	8000ac8 <__aeabi_dcmpeq>
 8009266:	2800      	cmp	r0, #0
 8009268:	d033      	beq.n	80092d2 <_printf_float+0x266>
 800926a:	4a37      	ldr	r2, [pc, #220]	@ (8009348 <_printf_float+0x2dc>)
 800926c:	2301      	movs	r3, #1
 800926e:	4631      	mov	r1, r6
 8009270:	4628      	mov	r0, r5
 8009272:	47b8      	blx	r7
 8009274:	3001      	adds	r0, #1
 8009276:	f43f af54 	beq.w	8009122 <_printf_float+0xb6>
 800927a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800927e:	4543      	cmp	r3, r8
 8009280:	db02      	blt.n	8009288 <_printf_float+0x21c>
 8009282:	6823      	ldr	r3, [r4, #0]
 8009284:	07d8      	lsls	r0, r3, #31
 8009286:	d50f      	bpl.n	80092a8 <_printf_float+0x23c>
 8009288:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800928c:	4631      	mov	r1, r6
 800928e:	4628      	mov	r0, r5
 8009290:	47b8      	blx	r7
 8009292:	3001      	adds	r0, #1
 8009294:	f43f af45 	beq.w	8009122 <_printf_float+0xb6>
 8009298:	f04f 0900 	mov.w	r9, #0
 800929c:	f108 38ff 	add.w	r8, r8, #4294967295
 80092a0:	f104 0a1a 	add.w	sl, r4, #26
 80092a4:	45c8      	cmp	r8, r9
 80092a6:	dc09      	bgt.n	80092bc <_printf_float+0x250>
 80092a8:	6823      	ldr	r3, [r4, #0]
 80092aa:	079b      	lsls	r3, r3, #30
 80092ac:	f100 8103 	bmi.w	80094b6 <_printf_float+0x44a>
 80092b0:	68e0      	ldr	r0, [r4, #12]
 80092b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092b4:	4298      	cmp	r0, r3
 80092b6:	bfb8      	it	lt
 80092b8:	4618      	movlt	r0, r3
 80092ba:	e734      	b.n	8009126 <_printf_float+0xba>
 80092bc:	2301      	movs	r3, #1
 80092be:	4652      	mov	r2, sl
 80092c0:	4631      	mov	r1, r6
 80092c2:	4628      	mov	r0, r5
 80092c4:	47b8      	blx	r7
 80092c6:	3001      	adds	r0, #1
 80092c8:	f43f af2b 	beq.w	8009122 <_printf_float+0xb6>
 80092cc:	f109 0901 	add.w	r9, r9, #1
 80092d0:	e7e8      	b.n	80092a4 <_printf_float+0x238>
 80092d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	dc39      	bgt.n	800934c <_printf_float+0x2e0>
 80092d8:	4a1b      	ldr	r2, [pc, #108]	@ (8009348 <_printf_float+0x2dc>)
 80092da:	2301      	movs	r3, #1
 80092dc:	4631      	mov	r1, r6
 80092de:	4628      	mov	r0, r5
 80092e0:	47b8      	blx	r7
 80092e2:	3001      	adds	r0, #1
 80092e4:	f43f af1d 	beq.w	8009122 <_printf_float+0xb6>
 80092e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80092ec:	ea59 0303 	orrs.w	r3, r9, r3
 80092f0:	d102      	bne.n	80092f8 <_printf_float+0x28c>
 80092f2:	6823      	ldr	r3, [r4, #0]
 80092f4:	07d9      	lsls	r1, r3, #31
 80092f6:	d5d7      	bpl.n	80092a8 <_printf_float+0x23c>
 80092f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092fc:	4631      	mov	r1, r6
 80092fe:	4628      	mov	r0, r5
 8009300:	47b8      	blx	r7
 8009302:	3001      	adds	r0, #1
 8009304:	f43f af0d 	beq.w	8009122 <_printf_float+0xb6>
 8009308:	f04f 0a00 	mov.w	sl, #0
 800930c:	f104 0b1a 	add.w	fp, r4, #26
 8009310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009312:	425b      	negs	r3, r3
 8009314:	4553      	cmp	r3, sl
 8009316:	dc01      	bgt.n	800931c <_printf_float+0x2b0>
 8009318:	464b      	mov	r3, r9
 800931a:	e793      	b.n	8009244 <_printf_float+0x1d8>
 800931c:	2301      	movs	r3, #1
 800931e:	465a      	mov	r2, fp
 8009320:	4631      	mov	r1, r6
 8009322:	4628      	mov	r0, r5
 8009324:	47b8      	blx	r7
 8009326:	3001      	adds	r0, #1
 8009328:	f43f aefb 	beq.w	8009122 <_printf_float+0xb6>
 800932c:	f10a 0a01 	add.w	sl, sl, #1
 8009330:	e7ee      	b.n	8009310 <_printf_float+0x2a4>
 8009332:	bf00      	nop
 8009334:	7fefffff 	.word	0x7fefffff
 8009338:	0800bcd3 	.word	0x0800bcd3
 800933c:	0800bcd7 	.word	0x0800bcd7
 8009340:	0800bcdb 	.word	0x0800bcdb
 8009344:	0800bcdf 	.word	0x0800bcdf
 8009348:	0800bce3 	.word	0x0800bce3
 800934c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800934e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009352:	4553      	cmp	r3, sl
 8009354:	bfa8      	it	ge
 8009356:	4653      	movge	r3, sl
 8009358:	2b00      	cmp	r3, #0
 800935a:	4699      	mov	r9, r3
 800935c:	dc36      	bgt.n	80093cc <_printf_float+0x360>
 800935e:	f04f 0b00 	mov.w	fp, #0
 8009362:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009366:	f104 021a 	add.w	r2, r4, #26
 800936a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800936c:	9306      	str	r3, [sp, #24]
 800936e:	eba3 0309 	sub.w	r3, r3, r9
 8009372:	455b      	cmp	r3, fp
 8009374:	dc31      	bgt.n	80093da <_printf_float+0x36e>
 8009376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009378:	459a      	cmp	sl, r3
 800937a:	dc3a      	bgt.n	80093f2 <_printf_float+0x386>
 800937c:	6823      	ldr	r3, [r4, #0]
 800937e:	07da      	lsls	r2, r3, #31
 8009380:	d437      	bmi.n	80093f2 <_printf_float+0x386>
 8009382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009384:	ebaa 0903 	sub.w	r9, sl, r3
 8009388:	9b06      	ldr	r3, [sp, #24]
 800938a:	ebaa 0303 	sub.w	r3, sl, r3
 800938e:	4599      	cmp	r9, r3
 8009390:	bfa8      	it	ge
 8009392:	4699      	movge	r9, r3
 8009394:	f1b9 0f00 	cmp.w	r9, #0
 8009398:	dc33      	bgt.n	8009402 <_printf_float+0x396>
 800939a:	f04f 0800 	mov.w	r8, #0
 800939e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093a2:	f104 0b1a 	add.w	fp, r4, #26
 80093a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093a8:	ebaa 0303 	sub.w	r3, sl, r3
 80093ac:	eba3 0309 	sub.w	r3, r3, r9
 80093b0:	4543      	cmp	r3, r8
 80093b2:	f77f af79 	ble.w	80092a8 <_printf_float+0x23c>
 80093b6:	2301      	movs	r3, #1
 80093b8:	465a      	mov	r2, fp
 80093ba:	4631      	mov	r1, r6
 80093bc:	4628      	mov	r0, r5
 80093be:	47b8      	blx	r7
 80093c0:	3001      	adds	r0, #1
 80093c2:	f43f aeae 	beq.w	8009122 <_printf_float+0xb6>
 80093c6:	f108 0801 	add.w	r8, r8, #1
 80093ca:	e7ec      	b.n	80093a6 <_printf_float+0x33a>
 80093cc:	4642      	mov	r2, r8
 80093ce:	4631      	mov	r1, r6
 80093d0:	4628      	mov	r0, r5
 80093d2:	47b8      	blx	r7
 80093d4:	3001      	adds	r0, #1
 80093d6:	d1c2      	bne.n	800935e <_printf_float+0x2f2>
 80093d8:	e6a3      	b.n	8009122 <_printf_float+0xb6>
 80093da:	2301      	movs	r3, #1
 80093dc:	4631      	mov	r1, r6
 80093de:	4628      	mov	r0, r5
 80093e0:	9206      	str	r2, [sp, #24]
 80093e2:	47b8      	blx	r7
 80093e4:	3001      	adds	r0, #1
 80093e6:	f43f ae9c 	beq.w	8009122 <_printf_float+0xb6>
 80093ea:	9a06      	ldr	r2, [sp, #24]
 80093ec:	f10b 0b01 	add.w	fp, fp, #1
 80093f0:	e7bb      	b.n	800936a <_printf_float+0x2fe>
 80093f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093f6:	4631      	mov	r1, r6
 80093f8:	4628      	mov	r0, r5
 80093fa:	47b8      	blx	r7
 80093fc:	3001      	adds	r0, #1
 80093fe:	d1c0      	bne.n	8009382 <_printf_float+0x316>
 8009400:	e68f      	b.n	8009122 <_printf_float+0xb6>
 8009402:	9a06      	ldr	r2, [sp, #24]
 8009404:	464b      	mov	r3, r9
 8009406:	4442      	add	r2, r8
 8009408:	4631      	mov	r1, r6
 800940a:	4628      	mov	r0, r5
 800940c:	47b8      	blx	r7
 800940e:	3001      	adds	r0, #1
 8009410:	d1c3      	bne.n	800939a <_printf_float+0x32e>
 8009412:	e686      	b.n	8009122 <_printf_float+0xb6>
 8009414:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009418:	f1ba 0f01 	cmp.w	sl, #1
 800941c:	dc01      	bgt.n	8009422 <_printf_float+0x3b6>
 800941e:	07db      	lsls	r3, r3, #31
 8009420:	d536      	bpl.n	8009490 <_printf_float+0x424>
 8009422:	2301      	movs	r3, #1
 8009424:	4642      	mov	r2, r8
 8009426:	4631      	mov	r1, r6
 8009428:	4628      	mov	r0, r5
 800942a:	47b8      	blx	r7
 800942c:	3001      	adds	r0, #1
 800942e:	f43f ae78 	beq.w	8009122 <_printf_float+0xb6>
 8009432:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009436:	4631      	mov	r1, r6
 8009438:	4628      	mov	r0, r5
 800943a:	47b8      	blx	r7
 800943c:	3001      	adds	r0, #1
 800943e:	f43f ae70 	beq.w	8009122 <_printf_float+0xb6>
 8009442:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009446:	2200      	movs	r2, #0
 8009448:	2300      	movs	r3, #0
 800944a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800944e:	f7f7 fb3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009452:	b9c0      	cbnz	r0, 8009486 <_printf_float+0x41a>
 8009454:	4653      	mov	r3, sl
 8009456:	f108 0201 	add.w	r2, r8, #1
 800945a:	4631      	mov	r1, r6
 800945c:	4628      	mov	r0, r5
 800945e:	47b8      	blx	r7
 8009460:	3001      	adds	r0, #1
 8009462:	d10c      	bne.n	800947e <_printf_float+0x412>
 8009464:	e65d      	b.n	8009122 <_printf_float+0xb6>
 8009466:	2301      	movs	r3, #1
 8009468:	465a      	mov	r2, fp
 800946a:	4631      	mov	r1, r6
 800946c:	4628      	mov	r0, r5
 800946e:	47b8      	blx	r7
 8009470:	3001      	adds	r0, #1
 8009472:	f43f ae56 	beq.w	8009122 <_printf_float+0xb6>
 8009476:	f108 0801 	add.w	r8, r8, #1
 800947a:	45d0      	cmp	r8, sl
 800947c:	dbf3      	blt.n	8009466 <_printf_float+0x3fa>
 800947e:	464b      	mov	r3, r9
 8009480:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009484:	e6df      	b.n	8009246 <_printf_float+0x1da>
 8009486:	f04f 0800 	mov.w	r8, #0
 800948a:	f104 0b1a 	add.w	fp, r4, #26
 800948e:	e7f4      	b.n	800947a <_printf_float+0x40e>
 8009490:	2301      	movs	r3, #1
 8009492:	4642      	mov	r2, r8
 8009494:	e7e1      	b.n	800945a <_printf_float+0x3ee>
 8009496:	2301      	movs	r3, #1
 8009498:	464a      	mov	r2, r9
 800949a:	4631      	mov	r1, r6
 800949c:	4628      	mov	r0, r5
 800949e:	47b8      	blx	r7
 80094a0:	3001      	adds	r0, #1
 80094a2:	f43f ae3e 	beq.w	8009122 <_printf_float+0xb6>
 80094a6:	f108 0801 	add.w	r8, r8, #1
 80094aa:	68e3      	ldr	r3, [r4, #12]
 80094ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80094ae:	1a5b      	subs	r3, r3, r1
 80094b0:	4543      	cmp	r3, r8
 80094b2:	dcf0      	bgt.n	8009496 <_printf_float+0x42a>
 80094b4:	e6fc      	b.n	80092b0 <_printf_float+0x244>
 80094b6:	f04f 0800 	mov.w	r8, #0
 80094ba:	f104 0919 	add.w	r9, r4, #25
 80094be:	e7f4      	b.n	80094aa <_printf_float+0x43e>

080094c0 <_printf_common>:
 80094c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094c4:	4616      	mov	r6, r2
 80094c6:	4698      	mov	r8, r3
 80094c8:	688a      	ldr	r2, [r1, #8]
 80094ca:	690b      	ldr	r3, [r1, #16]
 80094cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80094d0:	4293      	cmp	r3, r2
 80094d2:	bfb8      	it	lt
 80094d4:	4613      	movlt	r3, r2
 80094d6:	6033      	str	r3, [r6, #0]
 80094d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80094dc:	4607      	mov	r7, r0
 80094de:	460c      	mov	r4, r1
 80094e0:	b10a      	cbz	r2, 80094e6 <_printf_common+0x26>
 80094e2:	3301      	adds	r3, #1
 80094e4:	6033      	str	r3, [r6, #0]
 80094e6:	6823      	ldr	r3, [r4, #0]
 80094e8:	0699      	lsls	r1, r3, #26
 80094ea:	bf42      	ittt	mi
 80094ec:	6833      	ldrmi	r3, [r6, #0]
 80094ee:	3302      	addmi	r3, #2
 80094f0:	6033      	strmi	r3, [r6, #0]
 80094f2:	6825      	ldr	r5, [r4, #0]
 80094f4:	f015 0506 	ands.w	r5, r5, #6
 80094f8:	d106      	bne.n	8009508 <_printf_common+0x48>
 80094fa:	f104 0a19 	add.w	sl, r4, #25
 80094fe:	68e3      	ldr	r3, [r4, #12]
 8009500:	6832      	ldr	r2, [r6, #0]
 8009502:	1a9b      	subs	r3, r3, r2
 8009504:	42ab      	cmp	r3, r5
 8009506:	dc26      	bgt.n	8009556 <_printf_common+0x96>
 8009508:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800950c:	6822      	ldr	r2, [r4, #0]
 800950e:	3b00      	subs	r3, #0
 8009510:	bf18      	it	ne
 8009512:	2301      	movne	r3, #1
 8009514:	0692      	lsls	r2, r2, #26
 8009516:	d42b      	bmi.n	8009570 <_printf_common+0xb0>
 8009518:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800951c:	4641      	mov	r1, r8
 800951e:	4638      	mov	r0, r7
 8009520:	47c8      	blx	r9
 8009522:	3001      	adds	r0, #1
 8009524:	d01e      	beq.n	8009564 <_printf_common+0xa4>
 8009526:	6823      	ldr	r3, [r4, #0]
 8009528:	6922      	ldr	r2, [r4, #16]
 800952a:	f003 0306 	and.w	r3, r3, #6
 800952e:	2b04      	cmp	r3, #4
 8009530:	bf02      	ittt	eq
 8009532:	68e5      	ldreq	r5, [r4, #12]
 8009534:	6833      	ldreq	r3, [r6, #0]
 8009536:	1aed      	subeq	r5, r5, r3
 8009538:	68a3      	ldr	r3, [r4, #8]
 800953a:	bf0c      	ite	eq
 800953c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009540:	2500      	movne	r5, #0
 8009542:	4293      	cmp	r3, r2
 8009544:	bfc4      	itt	gt
 8009546:	1a9b      	subgt	r3, r3, r2
 8009548:	18ed      	addgt	r5, r5, r3
 800954a:	2600      	movs	r6, #0
 800954c:	341a      	adds	r4, #26
 800954e:	42b5      	cmp	r5, r6
 8009550:	d11a      	bne.n	8009588 <_printf_common+0xc8>
 8009552:	2000      	movs	r0, #0
 8009554:	e008      	b.n	8009568 <_printf_common+0xa8>
 8009556:	2301      	movs	r3, #1
 8009558:	4652      	mov	r2, sl
 800955a:	4641      	mov	r1, r8
 800955c:	4638      	mov	r0, r7
 800955e:	47c8      	blx	r9
 8009560:	3001      	adds	r0, #1
 8009562:	d103      	bne.n	800956c <_printf_common+0xac>
 8009564:	f04f 30ff 	mov.w	r0, #4294967295
 8009568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800956c:	3501      	adds	r5, #1
 800956e:	e7c6      	b.n	80094fe <_printf_common+0x3e>
 8009570:	18e1      	adds	r1, r4, r3
 8009572:	1c5a      	adds	r2, r3, #1
 8009574:	2030      	movs	r0, #48	@ 0x30
 8009576:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800957a:	4422      	add	r2, r4
 800957c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009580:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009584:	3302      	adds	r3, #2
 8009586:	e7c7      	b.n	8009518 <_printf_common+0x58>
 8009588:	2301      	movs	r3, #1
 800958a:	4622      	mov	r2, r4
 800958c:	4641      	mov	r1, r8
 800958e:	4638      	mov	r0, r7
 8009590:	47c8      	blx	r9
 8009592:	3001      	adds	r0, #1
 8009594:	d0e6      	beq.n	8009564 <_printf_common+0xa4>
 8009596:	3601      	adds	r6, #1
 8009598:	e7d9      	b.n	800954e <_printf_common+0x8e>
	...

0800959c <_printf_i>:
 800959c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095a0:	7e0f      	ldrb	r7, [r1, #24]
 80095a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80095a4:	2f78      	cmp	r7, #120	@ 0x78
 80095a6:	4691      	mov	r9, r2
 80095a8:	4680      	mov	r8, r0
 80095aa:	460c      	mov	r4, r1
 80095ac:	469a      	mov	sl, r3
 80095ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80095b2:	d807      	bhi.n	80095c4 <_printf_i+0x28>
 80095b4:	2f62      	cmp	r7, #98	@ 0x62
 80095b6:	d80a      	bhi.n	80095ce <_printf_i+0x32>
 80095b8:	2f00      	cmp	r7, #0
 80095ba:	f000 80d2 	beq.w	8009762 <_printf_i+0x1c6>
 80095be:	2f58      	cmp	r7, #88	@ 0x58
 80095c0:	f000 80b9 	beq.w	8009736 <_printf_i+0x19a>
 80095c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80095cc:	e03a      	b.n	8009644 <_printf_i+0xa8>
 80095ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80095d2:	2b15      	cmp	r3, #21
 80095d4:	d8f6      	bhi.n	80095c4 <_printf_i+0x28>
 80095d6:	a101      	add	r1, pc, #4	@ (adr r1, 80095dc <_printf_i+0x40>)
 80095d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095dc:	08009635 	.word	0x08009635
 80095e0:	08009649 	.word	0x08009649
 80095e4:	080095c5 	.word	0x080095c5
 80095e8:	080095c5 	.word	0x080095c5
 80095ec:	080095c5 	.word	0x080095c5
 80095f0:	080095c5 	.word	0x080095c5
 80095f4:	08009649 	.word	0x08009649
 80095f8:	080095c5 	.word	0x080095c5
 80095fc:	080095c5 	.word	0x080095c5
 8009600:	080095c5 	.word	0x080095c5
 8009604:	080095c5 	.word	0x080095c5
 8009608:	08009749 	.word	0x08009749
 800960c:	08009673 	.word	0x08009673
 8009610:	08009703 	.word	0x08009703
 8009614:	080095c5 	.word	0x080095c5
 8009618:	080095c5 	.word	0x080095c5
 800961c:	0800976b 	.word	0x0800976b
 8009620:	080095c5 	.word	0x080095c5
 8009624:	08009673 	.word	0x08009673
 8009628:	080095c5 	.word	0x080095c5
 800962c:	080095c5 	.word	0x080095c5
 8009630:	0800970b 	.word	0x0800970b
 8009634:	6833      	ldr	r3, [r6, #0]
 8009636:	1d1a      	adds	r2, r3, #4
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	6032      	str	r2, [r6, #0]
 800963c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009640:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009644:	2301      	movs	r3, #1
 8009646:	e09d      	b.n	8009784 <_printf_i+0x1e8>
 8009648:	6833      	ldr	r3, [r6, #0]
 800964a:	6820      	ldr	r0, [r4, #0]
 800964c:	1d19      	adds	r1, r3, #4
 800964e:	6031      	str	r1, [r6, #0]
 8009650:	0606      	lsls	r6, r0, #24
 8009652:	d501      	bpl.n	8009658 <_printf_i+0xbc>
 8009654:	681d      	ldr	r5, [r3, #0]
 8009656:	e003      	b.n	8009660 <_printf_i+0xc4>
 8009658:	0645      	lsls	r5, r0, #25
 800965a:	d5fb      	bpl.n	8009654 <_printf_i+0xb8>
 800965c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009660:	2d00      	cmp	r5, #0
 8009662:	da03      	bge.n	800966c <_printf_i+0xd0>
 8009664:	232d      	movs	r3, #45	@ 0x2d
 8009666:	426d      	negs	r5, r5
 8009668:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800966c:	4859      	ldr	r0, [pc, #356]	@ (80097d4 <_printf_i+0x238>)
 800966e:	230a      	movs	r3, #10
 8009670:	e011      	b.n	8009696 <_printf_i+0xfa>
 8009672:	6821      	ldr	r1, [r4, #0]
 8009674:	6833      	ldr	r3, [r6, #0]
 8009676:	0608      	lsls	r0, r1, #24
 8009678:	f853 5b04 	ldr.w	r5, [r3], #4
 800967c:	d402      	bmi.n	8009684 <_printf_i+0xe8>
 800967e:	0649      	lsls	r1, r1, #25
 8009680:	bf48      	it	mi
 8009682:	b2ad      	uxthmi	r5, r5
 8009684:	2f6f      	cmp	r7, #111	@ 0x6f
 8009686:	4853      	ldr	r0, [pc, #332]	@ (80097d4 <_printf_i+0x238>)
 8009688:	6033      	str	r3, [r6, #0]
 800968a:	bf14      	ite	ne
 800968c:	230a      	movne	r3, #10
 800968e:	2308      	moveq	r3, #8
 8009690:	2100      	movs	r1, #0
 8009692:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009696:	6866      	ldr	r6, [r4, #4]
 8009698:	60a6      	str	r6, [r4, #8]
 800969a:	2e00      	cmp	r6, #0
 800969c:	bfa2      	ittt	ge
 800969e:	6821      	ldrge	r1, [r4, #0]
 80096a0:	f021 0104 	bicge.w	r1, r1, #4
 80096a4:	6021      	strge	r1, [r4, #0]
 80096a6:	b90d      	cbnz	r5, 80096ac <_printf_i+0x110>
 80096a8:	2e00      	cmp	r6, #0
 80096aa:	d04b      	beq.n	8009744 <_printf_i+0x1a8>
 80096ac:	4616      	mov	r6, r2
 80096ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80096b2:	fb03 5711 	mls	r7, r3, r1, r5
 80096b6:	5dc7      	ldrb	r7, [r0, r7]
 80096b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80096bc:	462f      	mov	r7, r5
 80096be:	42bb      	cmp	r3, r7
 80096c0:	460d      	mov	r5, r1
 80096c2:	d9f4      	bls.n	80096ae <_printf_i+0x112>
 80096c4:	2b08      	cmp	r3, #8
 80096c6:	d10b      	bne.n	80096e0 <_printf_i+0x144>
 80096c8:	6823      	ldr	r3, [r4, #0]
 80096ca:	07df      	lsls	r7, r3, #31
 80096cc:	d508      	bpl.n	80096e0 <_printf_i+0x144>
 80096ce:	6923      	ldr	r3, [r4, #16]
 80096d0:	6861      	ldr	r1, [r4, #4]
 80096d2:	4299      	cmp	r1, r3
 80096d4:	bfde      	ittt	le
 80096d6:	2330      	movle	r3, #48	@ 0x30
 80096d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80096e0:	1b92      	subs	r2, r2, r6
 80096e2:	6122      	str	r2, [r4, #16]
 80096e4:	f8cd a000 	str.w	sl, [sp]
 80096e8:	464b      	mov	r3, r9
 80096ea:	aa03      	add	r2, sp, #12
 80096ec:	4621      	mov	r1, r4
 80096ee:	4640      	mov	r0, r8
 80096f0:	f7ff fee6 	bl	80094c0 <_printf_common>
 80096f4:	3001      	adds	r0, #1
 80096f6:	d14a      	bne.n	800978e <_printf_i+0x1f2>
 80096f8:	f04f 30ff 	mov.w	r0, #4294967295
 80096fc:	b004      	add	sp, #16
 80096fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009702:	6823      	ldr	r3, [r4, #0]
 8009704:	f043 0320 	orr.w	r3, r3, #32
 8009708:	6023      	str	r3, [r4, #0]
 800970a:	4833      	ldr	r0, [pc, #204]	@ (80097d8 <_printf_i+0x23c>)
 800970c:	2778      	movs	r7, #120	@ 0x78
 800970e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009712:	6823      	ldr	r3, [r4, #0]
 8009714:	6831      	ldr	r1, [r6, #0]
 8009716:	061f      	lsls	r7, r3, #24
 8009718:	f851 5b04 	ldr.w	r5, [r1], #4
 800971c:	d402      	bmi.n	8009724 <_printf_i+0x188>
 800971e:	065f      	lsls	r7, r3, #25
 8009720:	bf48      	it	mi
 8009722:	b2ad      	uxthmi	r5, r5
 8009724:	6031      	str	r1, [r6, #0]
 8009726:	07d9      	lsls	r1, r3, #31
 8009728:	bf44      	itt	mi
 800972a:	f043 0320 	orrmi.w	r3, r3, #32
 800972e:	6023      	strmi	r3, [r4, #0]
 8009730:	b11d      	cbz	r5, 800973a <_printf_i+0x19e>
 8009732:	2310      	movs	r3, #16
 8009734:	e7ac      	b.n	8009690 <_printf_i+0xf4>
 8009736:	4827      	ldr	r0, [pc, #156]	@ (80097d4 <_printf_i+0x238>)
 8009738:	e7e9      	b.n	800970e <_printf_i+0x172>
 800973a:	6823      	ldr	r3, [r4, #0]
 800973c:	f023 0320 	bic.w	r3, r3, #32
 8009740:	6023      	str	r3, [r4, #0]
 8009742:	e7f6      	b.n	8009732 <_printf_i+0x196>
 8009744:	4616      	mov	r6, r2
 8009746:	e7bd      	b.n	80096c4 <_printf_i+0x128>
 8009748:	6833      	ldr	r3, [r6, #0]
 800974a:	6825      	ldr	r5, [r4, #0]
 800974c:	6961      	ldr	r1, [r4, #20]
 800974e:	1d18      	adds	r0, r3, #4
 8009750:	6030      	str	r0, [r6, #0]
 8009752:	062e      	lsls	r6, r5, #24
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	d501      	bpl.n	800975c <_printf_i+0x1c0>
 8009758:	6019      	str	r1, [r3, #0]
 800975a:	e002      	b.n	8009762 <_printf_i+0x1c6>
 800975c:	0668      	lsls	r0, r5, #25
 800975e:	d5fb      	bpl.n	8009758 <_printf_i+0x1bc>
 8009760:	8019      	strh	r1, [r3, #0]
 8009762:	2300      	movs	r3, #0
 8009764:	6123      	str	r3, [r4, #16]
 8009766:	4616      	mov	r6, r2
 8009768:	e7bc      	b.n	80096e4 <_printf_i+0x148>
 800976a:	6833      	ldr	r3, [r6, #0]
 800976c:	1d1a      	adds	r2, r3, #4
 800976e:	6032      	str	r2, [r6, #0]
 8009770:	681e      	ldr	r6, [r3, #0]
 8009772:	6862      	ldr	r2, [r4, #4]
 8009774:	2100      	movs	r1, #0
 8009776:	4630      	mov	r0, r6
 8009778:	f7f6 fd2a 	bl	80001d0 <memchr>
 800977c:	b108      	cbz	r0, 8009782 <_printf_i+0x1e6>
 800977e:	1b80      	subs	r0, r0, r6
 8009780:	6060      	str	r0, [r4, #4]
 8009782:	6863      	ldr	r3, [r4, #4]
 8009784:	6123      	str	r3, [r4, #16]
 8009786:	2300      	movs	r3, #0
 8009788:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800978c:	e7aa      	b.n	80096e4 <_printf_i+0x148>
 800978e:	6923      	ldr	r3, [r4, #16]
 8009790:	4632      	mov	r2, r6
 8009792:	4649      	mov	r1, r9
 8009794:	4640      	mov	r0, r8
 8009796:	47d0      	blx	sl
 8009798:	3001      	adds	r0, #1
 800979a:	d0ad      	beq.n	80096f8 <_printf_i+0x15c>
 800979c:	6823      	ldr	r3, [r4, #0]
 800979e:	079b      	lsls	r3, r3, #30
 80097a0:	d413      	bmi.n	80097ca <_printf_i+0x22e>
 80097a2:	68e0      	ldr	r0, [r4, #12]
 80097a4:	9b03      	ldr	r3, [sp, #12]
 80097a6:	4298      	cmp	r0, r3
 80097a8:	bfb8      	it	lt
 80097aa:	4618      	movlt	r0, r3
 80097ac:	e7a6      	b.n	80096fc <_printf_i+0x160>
 80097ae:	2301      	movs	r3, #1
 80097b0:	4632      	mov	r2, r6
 80097b2:	4649      	mov	r1, r9
 80097b4:	4640      	mov	r0, r8
 80097b6:	47d0      	blx	sl
 80097b8:	3001      	adds	r0, #1
 80097ba:	d09d      	beq.n	80096f8 <_printf_i+0x15c>
 80097bc:	3501      	adds	r5, #1
 80097be:	68e3      	ldr	r3, [r4, #12]
 80097c0:	9903      	ldr	r1, [sp, #12]
 80097c2:	1a5b      	subs	r3, r3, r1
 80097c4:	42ab      	cmp	r3, r5
 80097c6:	dcf2      	bgt.n	80097ae <_printf_i+0x212>
 80097c8:	e7eb      	b.n	80097a2 <_printf_i+0x206>
 80097ca:	2500      	movs	r5, #0
 80097cc:	f104 0619 	add.w	r6, r4, #25
 80097d0:	e7f5      	b.n	80097be <_printf_i+0x222>
 80097d2:	bf00      	nop
 80097d4:	0800bce5 	.word	0x0800bce5
 80097d8:	0800bcf6 	.word	0x0800bcf6

080097dc <std>:
 80097dc:	2300      	movs	r3, #0
 80097de:	b510      	push	{r4, lr}
 80097e0:	4604      	mov	r4, r0
 80097e2:	e9c0 3300 	strd	r3, r3, [r0]
 80097e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097ea:	6083      	str	r3, [r0, #8]
 80097ec:	8181      	strh	r1, [r0, #12]
 80097ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80097f0:	81c2      	strh	r2, [r0, #14]
 80097f2:	6183      	str	r3, [r0, #24]
 80097f4:	4619      	mov	r1, r3
 80097f6:	2208      	movs	r2, #8
 80097f8:	305c      	adds	r0, #92	@ 0x5c
 80097fa:	f000 f914 	bl	8009a26 <memset>
 80097fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009834 <std+0x58>)
 8009800:	6263      	str	r3, [r4, #36]	@ 0x24
 8009802:	4b0d      	ldr	r3, [pc, #52]	@ (8009838 <std+0x5c>)
 8009804:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009806:	4b0d      	ldr	r3, [pc, #52]	@ (800983c <std+0x60>)
 8009808:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800980a:	4b0d      	ldr	r3, [pc, #52]	@ (8009840 <std+0x64>)
 800980c:	6323      	str	r3, [r4, #48]	@ 0x30
 800980e:	4b0d      	ldr	r3, [pc, #52]	@ (8009844 <std+0x68>)
 8009810:	6224      	str	r4, [r4, #32]
 8009812:	429c      	cmp	r4, r3
 8009814:	d006      	beq.n	8009824 <std+0x48>
 8009816:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800981a:	4294      	cmp	r4, r2
 800981c:	d002      	beq.n	8009824 <std+0x48>
 800981e:	33d0      	adds	r3, #208	@ 0xd0
 8009820:	429c      	cmp	r4, r3
 8009822:	d105      	bne.n	8009830 <std+0x54>
 8009824:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800982c:	f000 b978 	b.w	8009b20 <__retarget_lock_init_recursive>
 8009830:	bd10      	pop	{r4, pc}
 8009832:	bf00      	nop
 8009834:	080099a1 	.word	0x080099a1
 8009838:	080099c3 	.word	0x080099c3
 800983c:	080099fb 	.word	0x080099fb
 8009840:	08009a1f 	.word	0x08009a1f
 8009844:	20000820 	.word	0x20000820

08009848 <stdio_exit_handler>:
 8009848:	4a02      	ldr	r2, [pc, #8]	@ (8009854 <stdio_exit_handler+0xc>)
 800984a:	4903      	ldr	r1, [pc, #12]	@ (8009858 <stdio_exit_handler+0x10>)
 800984c:	4803      	ldr	r0, [pc, #12]	@ (800985c <stdio_exit_handler+0x14>)
 800984e:	f000 b869 	b.w	8009924 <_fwalk_sglue>
 8009852:	bf00      	nop
 8009854:	20000024 	.word	0x20000024
 8009858:	0800b4d5 	.word	0x0800b4d5
 800985c:	20000034 	.word	0x20000034

08009860 <cleanup_stdio>:
 8009860:	6841      	ldr	r1, [r0, #4]
 8009862:	4b0c      	ldr	r3, [pc, #48]	@ (8009894 <cleanup_stdio+0x34>)
 8009864:	4299      	cmp	r1, r3
 8009866:	b510      	push	{r4, lr}
 8009868:	4604      	mov	r4, r0
 800986a:	d001      	beq.n	8009870 <cleanup_stdio+0x10>
 800986c:	f001 fe32 	bl	800b4d4 <_fflush_r>
 8009870:	68a1      	ldr	r1, [r4, #8]
 8009872:	4b09      	ldr	r3, [pc, #36]	@ (8009898 <cleanup_stdio+0x38>)
 8009874:	4299      	cmp	r1, r3
 8009876:	d002      	beq.n	800987e <cleanup_stdio+0x1e>
 8009878:	4620      	mov	r0, r4
 800987a:	f001 fe2b 	bl	800b4d4 <_fflush_r>
 800987e:	68e1      	ldr	r1, [r4, #12]
 8009880:	4b06      	ldr	r3, [pc, #24]	@ (800989c <cleanup_stdio+0x3c>)
 8009882:	4299      	cmp	r1, r3
 8009884:	d004      	beq.n	8009890 <cleanup_stdio+0x30>
 8009886:	4620      	mov	r0, r4
 8009888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800988c:	f001 be22 	b.w	800b4d4 <_fflush_r>
 8009890:	bd10      	pop	{r4, pc}
 8009892:	bf00      	nop
 8009894:	20000820 	.word	0x20000820
 8009898:	20000888 	.word	0x20000888
 800989c:	200008f0 	.word	0x200008f0

080098a0 <global_stdio_init.part.0>:
 80098a0:	b510      	push	{r4, lr}
 80098a2:	4b0b      	ldr	r3, [pc, #44]	@ (80098d0 <global_stdio_init.part.0+0x30>)
 80098a4:	4c0b      	ldr	r4, [pc, #44]	@ (80098d4 <global_stdio_init.part.0+0x34>)
 80098a6:	4a0c      	ldr	r2, [pc, #48]	@ (80098d8 <global_stdio_init.part.0+0x38>)
 80098a8:	601a      	str	r2, [r3, #0]
 80098aa:	4620      	mov	r0, r4
 80098ac:	2200      	movs	r2, #0
 80098ae:	2104      	movs	r1, #4
 80098b0:	f7ff ff94 	bl	80097dc <std>
 80098b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80098b8:	2201      	movs	r2, #1
 80098ba:	2109      	movs	r1, #9
 80098bc:	f7ff ff8e 	bl	80097dc <std>
 80098c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80098c4:	2202      	movs	r2, #2
 80098c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098ca:	2112      	movs	r1, #18
 80098cc:	f7ff bf86 	b.w	80097dc <std>
 80098d0:	20000958 	.word	0x20000958
 80098d4:	20000820 	.word	0x20000820
 80098d8:	08009849 	.word	0x08009849

080098dc <__sfp_lock_acquire>:
 80098dc:	4801      	ldr	r0, [pc, #4]	@ (80098e4 <__sfp_lock_acquire+0x8>)
 80098de:	f000 b920 	b.w	8009b22 <__retarget_lock_acquire_recursive>
 80098e2:	bf00      	nop
 80098e4:	20000961 	.word	0x20000961

080098e8 <__sfp_lock_release>:
 80098e8:	4801      	ldr	r0, [pc, #4]	@ (80098f0 <__sfp_lock_release+0x8>)
 80098ea:	f000 b91b 	b.w	8009b24 <__retarget_lock_release_recursive>
 80098ee:	bf00      	nop
 80098f0:	20000961 	.word	0x20000961

080098f4 <__sinit>:
 80098f4:	b510      	push	{r4, lr}
 80098f6:	4604      	mov	r4, r0
 80098f8:	f7ff fff0 	bl	80098dc <__sfp_lock_acquire>
 80098fc:	6a23      	ldr	r3, [r4, #32]
 80098fe:	b11b      	cbz	r3, 8009908 <__sinit+0x14>
 8009900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009904:	f7ff bff0 	b.w	80098e8 <__sfp_lock_release>
 8009908:	4b04      	ldr	r3, [pc, #16]	@ (800991c <__sinit+0x28>)
 800990a:	6223      	str	r3, [r4, #32]
 800990c:	4b04      	ldr	r3, [pc, #16]	@ (8009920 <__sinit+0x2c>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d1f5      	bne.n	8009900 <__sinit+0xc>
 8009914:	f7ff ffc4 	bl	80098a0 <global_stdio_init.part.0>
 8009918:	e7f2      	b.n	8009900 <__sinit+0xc>
 800991a:	bf00      	nop
 800991c:	08009861 	.word	0x08009861
 8009920:	20000958 	.word	0x20000958

08009924 <_fwalk_sglue>:
 8009924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009928:	4607      	mov	r7, r0
 800992a:	4688      	mov	r8, r1
 800992c:	4614      	mov	r4, r2
 800992e:	2600      	movs	r6, #0
 8009930:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009934:	f1b9 0901 	subs.w	r9, r9, #1
 8009938:	d505      	bpl.n	8009946 <_fwalk_sglue+0x22>
 800993a:	6824      	ldr	r4, [r4, #0]
 800993c:	2c00      	cmp	r4, #0
 800993e:	d1f7      	bne.n	8009930 <_fwalk_sglue+0xc>
 8009940:	4630      	mov	r0, r6
 8009942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009946:	89ab      	ldrh	r3, [r5, #12]
 8009948:	2b01      	cmp	r3, #1
 800994a:	d907      	bls.n	800995c <_fwalk_sglue+0x38>
 800994c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009950:	3301      	adds	r3, #1
 8009952:	d003      	beq.n	800995c <_fwalk_sglue+0x38>
 8009954:	4629      	mov	r1, r5
 8009956:	4638      	mov	r0, r7
 8009958:	47c0      	blx	r8
 800995a:	4306      	orrs	r6, r0
 800995c:	3568      	adds	r5, #104	@ 0x68
 800995e:	e7e9      	b.n	8009934 <_fwalk_sglue+0x10>

08009960 <siprintf>:
 8009960:	b40e      	push	{r1, r2, r3}
 8009962:	b500      	push	{lr}
 8009964:	b09c      	sub	sp, #112	@ 0x70
 8009966:	ab1d      	add	r3, sp, #116	@ 0x74
 8009968:	9002      	str	r0, [sp, #8]
 800996a:	9006      	str	r0, [sp, #24]
 800996c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009970:	4809      	ldr	r0, [pc, #36]	@ (8009998 <siprintf+0x38>)
 8009972:	9107      	str	r1, [sp, #28]
 8009974:	9104      	str	r1, [sp, #16]
 8009976:	4909      	ldr	r1, [pc, #36]	@ (800999c <siprintf+0x3c>)
 8009978:	f853 2b04 	ldr.w	r2, [r3], #4
 800997c:	9105      	str	r1, [sp, #20]
 800997e:	6800      	ldr	r0, [r0, #0]
 8009980:	9301      	str	r3, [sp, #4]
 8009982:	a902      	add	r1, sp, #8
 8009984:	f001 fc26 	bl	800b1d4 <_svfiprintf_r>
 8009988:	9b02      	ldr	r3, [sp, #8]
 800998a:	2200      	movs	r2, #0
 800998c:	701a      	strb	r2, [r3, #0]
 800998e:	b01c      	add	sp, #112	@ 0x70
 8009990:	f85d eb04 	ldr.w	lr, [sp], #4
 8009994:	b003      	add	sp, #12
 8009996:	4770      	bx	lr
 8009998:	20000030 	.word	0x20000030
 800999c:	ffff0208 	.word	0xffff0208

080099a0 <__sread>:
 80099a0:	b510      	push	{r4, lr}
 80099a2:	460c      	mov	r4, r1
 80099a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099a8:	f000 f86c 	bl	8009a84 <_read_r>
 80099ac:	2800      	cmp	r0, #0
 80099ae:	bfab      	itete	ge
 80099b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80099b2:	89a3      	ldrhlt	r3, [r4, #12]
 80099b4:	181b      	addge	r3, r3, r0
 80099b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80099ba:	bfac      	ite	ge
 80099bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80099be:	81a3      	strhlt	r3, [r4, #12]
 80099c0:	bd10      	pop	{r4, pc}

080099c2 <__swrite>:
 80099c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099c6:	461f      	mov	r7, r3
 80099c8:	898b      	ldrh	r3, [r1, #12]
 80099ca:	05db      	lsls	r3, r3, #23
 80099cc:	4605      	mov	r5, r0
 80099ce:	460c      	mov	r4, r1
 80099d0:	4616      	mov	r6, r2
 80099d2:	d505      	bpl.n	80099e0 <__swrite+0x1e>
 80099d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099d8:	2302      	movs	r3, #2
 80099da:	2200      	movs	r2, #0
 80099dc:	f000 f840 	bl	8009a60 <_lseek_r>
 80099e0:	89a3      	ldrh	r3, [r4, #12]
 80099e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80099ea:	81a3      	strh	r3, [r4, #12]
 80099ec:	4632      	mov	r2, r6
 80099ee:	463b      	mov	r3, r7
 80099f0:	4628      	mov	r0, r5
 80099f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099f6:	f000 b857 	b.w	8009aa8 <_write_r>

080099fa <__sseek>:
 80099fa:	b510      	push	{r4, lr}
 80099fc:	460c      	mov	r4, r1
 80099fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a02:	f000 f82d 	bl	8009a60 <_lseek_r>
 8009a06:	1c43      	adds	r3, r0, #1
 8009a08:	89a3      	ldrh	r3, [r4, #12]
 8009a0a:	bf15      	itete	ne
 8009a0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009a0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009a12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009a16:	81a3      	strheq	r3, [r4, #12]
 8009a18:	bf18      	it	ne
 8009a1a:	81a3      	strhne	r3, [r4, #12]
 8009a1c:	bd10      	pop	{r4, pc}

08009a1e <__sclose>:
 8009a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a22:	f000 b80d 	b.w	8009a40 <_close_r>

08009a26 <memset>:
 8009a26:	4402      	add	r2, r0
 8009a28:	4603      	mov	r3, r0
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d100      	bne.n	8009a30 <memset+0xa>
 8009a2e:	4770      	bx	lr
 8009a30:	f803 1b01 	strb.w	r1, [r3], #1
 8009a34:	e7f9      	b.n	8009a2a <memset+0x4>
	...

08009a38 <_localeconv_r>:
 8009a38:	4800      	ldr	r0, [pc, #0]	@ (8009a3c <_localeconv_r+0x4>)
 8009a3a:	4770      	bx	lr
 8009a3c:	20000170 	.word	0x20000170

08009a40 <_close_r>:
 8009a40:	b538      	push	{r3, r4, r5, lr}
 8009a42:	4d06      	ldr	r5, [pc, #24]	@ (8009a5c <_close_r+0x1c>)
 8009a44:	2300      	movs	r3, #0
 8009a46:	4604      	mov	r4, r0
 8009a48:	4608      	mov	r0, r1
 8009a4a:	602b      	str	r3, [r5, #0]
 8009a4c:	f7f9 ffc8 	bl	80039e0 <_close>
 8009a50:	1c43      	adds	r3, r0, #1
 8009a52:	d102      	bne.n	8009a5a <_close_r+0x1a>
 8009a54:	682b      	ldr	r3, [r5, #0]
 8009a56:	b103      	cbz	r3, 8009a5a <_close_r+0x1a>
 8009a58:	6023      	str	r3, [r4, #0]
 8009a5a:	bd38      	pop	{r3, r4, r5, pc}
 8009a5c:	2000095c 	.word	0x2000095c

08009a60 <_lseek_r>:
 8009a60:	b538      	push	{r3, r4, r5, lr}
 8009a62:	4d07      	ldr	r5, [pc, #28]	@ (8009a80 <_lseek_r+0x20>)
 8009a64:	4604      	mov	r4, r0
 8009a66:	4608      	mov	r0, r1
 8009a68:	4611      	mov	r1, r2
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	602a      	str	r2, [r5, #0]
 8009a6e:	461a      	mov	r2, r3
 8009a70:	f7f9 ffdd 	bl	8003a2e <_lseek>
 8009a74:	1c43      	adds	r3, r0, #1
 8009a76:	d102      	bne.n	8009a7e <_lseek_r+0x1e>
 8009a78:	682b      	ldr	r3, [r5, #0]
 8009a7a:	b103      	cbz	r3, 8009a7e <_lseek_r+0x1e>
 8009a7c:	6023      	str	r3, [r4, #0]
 8009a7e:	bd38      	pop	{r3, r4, r5, pc}
 8009a80:	2000095c 	.word	0x2000095c

08009a84 <_read_r>:
 8009a84:	b538      	push	{r3, r4, r5, lr}
 8009a86:	4d07      	ldr	r5, [pc, #28]	@ (8009aa4 <_read_r+0x20>)
 8009a88:	4604      	mov	r4, r0
 8009a8a:	4608      	mov	r0, r1
 8009a8c:	4611      	mov	r1, r2
 8009a8e:	2200      	movs	r2, #0
 8009a90:	602a      	str	r2, [r5, #0]
 8009a92:	461a      	mov	r2, r3
 8009a94:	f7f9 ff6b 	bl	800396e <_read>
 8009a98:	1c43      	adds	r3, r0, #1
 8009a9a:	d102      	bne.n	8009aa2 <_read_r+0x1e>
 8009a9c:	682b      	ldr	r3, [r5, #0]
 8009a9e:	b103      	cbz	r3, 8009aa2 <_read_r+0x1e>
 8009aa0:	6023      	str	r3, [r4, #0]
 8009aa2:	bd38      	pop	{r3, r4, r5, pc}
 8009aa4:	2000095c 	.word	0x2000095c

08009aa8 <_write_r>:
 8009aa8:	b538      	push	{r3, r4, r5, lr}
 8009aaa:	4d07      	ldr	r5, [pc, #28]	@ (8009ac8 <_write_r+0x20>)
 8009aac:	4604      	mov	r4, r0
 8009aae:	4608      	mov	r0, r1
 8009ab0:	4611      	mov	r1, r2
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	602a      	str	r2, [r5, #0]
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	f7f9 ff76 	bl	80039a8 <_write>
 8009abc:	1c43      	adds	r3, r0, #1
 8009abe:	d102      	bne.n	8009ac6 <_write_r+0x1e>
 8009ac0:	682b      	ldr	r3, [r5, #0]
 8009ac2:	b103      	cbz	r3, 8009ac6 <_write_r+0x1e>
 8009ac4:	6023      	str	r3, [r4, #0]
 8009ac6:	bd38      	pop	{r3, r4, r5, pc}
 8009ac8:	2000095c 	.word	0x2000095c

08009acc <__errno>:
 8009acc:	4b01      	ldr	r3, [pc, #4]	@ (8009ad4 <__errno+0x8>)
 8009ace:	6818      	ldr	r0, [r3, #0]
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	20000030 	.word	0x20000030

08009ad8 <__libc_init_array>:
 8009ad8:	b570      	push	{r4, r5, r6, lr}
 8009ada:	4d0d      	ldr	r5, [pc, #52]	@ (8009b10 <__libc_init_array+0x38>)
 8009adc:	4c0d      	ldr	r4, [pc, #52]	@ (8009b14 <__libc_init_array+0x3c>)
 8009ade:	1b64      	subs	r4, r4, r5
 8009ae0:	10a4      	asrs	r4, r4, #2
 8009ae2:	2600      	movs	r6, #0
 8009ae4:	42a6      	cmp	r6, r4
 8009ae6:	d109      	bne.n	8009afc <__libc_init_array+0x24>
 8009ae8:	4d0b      	ldr	r5, [pc, #44]	@ (8009b18 <__libc_init_array+0x40>)
 8009aea:	4c0c      	ldr	r4, [pc, #48]	@ (8009b1c <__libc_init_array+0x44>)
 8009aec:	f002 f864 	bl	800bbb8 <_init>
 8009af0:	1b64      	subs	r4, r4, r5
 8009af2:	10a4      	asrs	r4, r4, #2
 8009af4:	2600      	movs	r6, #0
 8009af6:	42a6      	cmp	r6, r4
 8009af8:	d105      	bne.n	8009b06 <__libc_init_array+0x2e>
 8009afa:	bd70      	pop	{r4, r5, r6, pc}
 8009afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b00:	4798      	blx	r3
 8009b02:	3601      	adds	r6, #1
 8009b04:	e7ee      	b.n	8009ae4 <__libc_init_array+0xc>
 8009b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b0a:	4798      	blx	r3
 8009b0c:	3601      	adds	r6, #1
 8009b0e:	e7f2      	b.n	8009af6 <__libc_init_array+0x1e>
 8009b10:	0800c034 	.word	0x0800c034
 8009b14:	0800c034 	.word	0x0800c034
 8009b18:	0800c034 	.word	0x0800c034
 8009b1c:	0800c038 	.word	0x0800c038

08009b20 <__retarget_lock_init_recursive>:
 8009b20:	4770      	bx	lr

08009b22 <__retarget_lock_acquire_recursive>:
 8009b22:	4770      	bx	lr

08009b24 <__retarget_lock_release_recursive>:
 8009b24:	4770      	bx	lr

08009b26 <memcpy>:
 8009b26:	440a      	add	r2, r1
 8009b28:	4291      	cmp	r1, r2
 8009b2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b2e:	d100      	bne.n	8009b32 <memcpy+0xc>
 8009b30:	4770      	bx	lr
 8009b32:	b510      	push	{r4, lr}
 8009b34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b3c:	4291      	cmp	r1, r2
 8009b3e:	d1f9      	bne.n	8009b34 <memcpy+0xe>
 8009b40:	bd10      	pop	{r4, pc}
	...

08009b44 <__assert_func>:
 8009b44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b46:	4614      	mov	r4, r2
 8009b48:	461a      	mov	r2, r3
 8009b4a:	4b09      	ldr	r3, [pc, #36]	@ (8009b70 <__assert_func+0x2c>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4605      	mov	r5, r0
 8009b50:	68d8      	ldr	r0, [r3, #12]
 8009b52:	b954      	cbnz	r4, 8009b6a <__assert_func+0x26>
 8009b54:	4b07      	ldr	r3, [pc, #28]	@ (8009b74 <__assert_func+0x30>)
 8009b56:	461c      	mov	r4, r3
 8009b58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b5c:	9100      	str	r1, [sp, #0]
 8009b5e:	462b      	mov	r3, r5
 8009b60:	4905      	ldr	r1, [pc, #20]	@ (8009b78 <__assert_func+0x34>)
 8009b62:	f001 fcdf 	bl	800b524 <fiprintf>
 8009b66:	f001 fd19 	bl	800b59c <abort>
 8009b6a:	4b04      	ldr	r3, [pc, #16]	@ (8009b7c <__assert_func+0x38>)
 8009b6c:	e7f4      	b.n	8009b58 <__assert_func+0x14>
 8009b6e:	bf00      	nop
 8009b70:	20000030 	.word	0x20000030
 8009b74:	0800bd42 	.word	0x0800bd42
 8009b78:	0800bd14 	.word	0x0800bd14
 8009b7c:	0800bd07 	.word	0x0800bd07

08009b80 <quorem>:
 8009b80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b84:	6903      	ldr	r3, [r0, #16]
 8009b86:	690c      	ldr	r4, [r1, #16]
 8009b88:	42a3      	cmp	r3, r4
 8009b8a:	4607      	mov	r7, r0
 8009b8c:	db7e      	blt.n	8009c8c <quorem+0x10c>
 8009b8e:	3c01      	subs	r4, #1
 8009b90:	f101 0814 	add.w	r8, r1, #20
 8009b94:	00a3      	lsls	r3, r4, #2
 8009b96:	f100 0514 	add.w	r5, r0, #20
 8009b9a:	9300      	str	r3, [sp, #0]
 8009b9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ba0:	9301      	str	r3, [sp, #4]
 8009ba2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ba6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009baa:	3301      	adds	r3, #1
 8009bac:	429a      	cmp	r2, r3
 8009bae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009bb2:	fbb2 f6f3 	udiv	r6, r2, r3
 8009bb6:	d32e      	bcc.n	8009c16 <quorem+0x96>
 8009bb8:	f04f 0a00 	mov.w	sl, #0
 8009bbc:	46c4      	mov	ip, r8
 8009bbe:	46ae      	mov	lr, r5
 8009bc0:	46d3      	mov	fp, sl
 8009bc2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009bc6:	b298      	uxth	r0, r3
 8009bc8:	fb06 a000 	mla	r0, r6, r0, sl
 8009bcc:	0c02      	lsrs	r2, r0, #16
 8009bce:	0c1b      	lsrs	r3, r3, #16
 8009bd0:	fb06 2303 	mla	r3, r6, r3, r2
 8009bd4:	f8de 2000 	ldr.w	r2, [lr]
 8009bd8:	b280      	uxth	r0, r0
 8009bda:	b292      	uxth	r2, r2
 8009bdc:	1a12      	subs	r2, r2, r0
 8009bde:	445a      	add	r2, fp
 8009be0:	f8de 0000 	ldr.w	r0, [lr]
 8009be4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009bee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009bf2:	b292      	uxth	r2, r2
 8009bf4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009bf8:	45e1      	cmp	r9, ip
 8009bfa:	f84e 2b04 	str.w	r2, [lr], #4
 8009bfe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009c02:	d2de      	bcs.n	8009bc2 <quorem+0x42>
 8009c04:	9b00      	ldr	r3, [sp, #0]
 8009c06:	58eb      	ldr	r3, [r5, r3]
 8009c08:	b92b      	cbnz	r3, 8009c16 <quorem+0x96>
 8009c0a:	9b01      	ldr	r3, [sp, #4]
 8009c0c:	3b04      	subs	r3, #4
 8009c0e:	429d      	cmp	r5, r3
 8009c10:	461a      	mov	r2, r3
 8009c12:	d32f      	bcc.n	8009c74 <quorem+0xf4>
 8009c14:	613c      	str	r4, [r7, #16]
 8009c16:	4638      	mov	r0, r7
 8009c18:	f001 f978 	bl	800af0c <__mcmp>
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	db25      	blt.n	8009c6c <quorem+0xec>
 8009c20:	4629      	mov	r1, r5
 8009c22:	2000      	movs	r0, #0
 8009c24:	f858 2b04 	ldr.w	r2, [r8], #4
 8009c28:	f8d1 c000 	ldr.w	ip, [r1]
 8009c2c:	fa1f fe82 	uxth.w	lr, r2
 8009c30:	fa1f f38c 	uxth.w	r3, ip
 8009c34:	eba3 030e 	sub.w	r3, r3, lr
 8009c38:	4403      	add	r3, r0
 8009c3a:	0c12      	lsrs	r2, r2, #16
 8009c3c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009c40:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c4a:	45c1      	cmp	r9, r8
 8009c4c:	f841 3b04 	str.w	r3, [r1], #4
 8009c50:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009c54:	d2e6      	bcs.n	8009c24 <quorem+0xa4>
 8009c56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c5e:	b922      	cbnz	r2, 8009c6a <quorem+0xea>
 8009c60:	3b04      	subs	r3, #4
 8009c62:	429d      	cmp	r5, r3
 8009c64:	461a      	mov	r2, r3
 8009c66:	d30b      	bcc.n	8009c80 <quorem+0x100>
 8009c68:	613c      	str	r4, [r7, #16]
 8009c6a:	3601      	adds	r6, #1
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	b003      	add	sp, #12
 8009c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c74:	6812      	ldr	r2, [r2, #0]
 8009c76:	3b04      	subs	r3, #4
 8009c78:	2a00      	cmp	r2, #0
 8009c7a:	d1cb      	bne.n	8009c14 <quorem+0x94>
 8009c7c:	3c01      	subs	r4, #1
 8009c7e:	e7c6      	b.n	8009c0e <quorem+0x8e>
 8009c80:	6812      	ldr	r2, [r2, #0]
 8009c82:	3b04      	subs	r3, #4
 8009c84:	2a00      	cmp	r2, #0
 8009c86:	d1ef      	bne.n	8009c68 <quorem+0xe8>
 8009c88:	3c01      	subs	r4, #1
 8009c8a:	e7ea      	b.n	8009c62 <quorem+0xe2>
 8009c8c:	2000      	movs	r0, #0
 8009c8e:	e7ee      	b.n	8009c6e <quorem+0xee>

08009c90 <_dtoa_r>:
 8009c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c94:	69c7      	ldr	r7, [r0, #28]
 8009c96:	b099      	sub	sp, #100	@ 0x64
 8009c98:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009c9c:	ec55 4b10 	vmov	r4, r5, d0
 8009ca0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009ca2:	9109      	str	r1, [sp, #36]	@ 0x24
 8009ca4:	4683      	mov	fp, r0
 8009ca6:	920e      	str	r2, [sp, #56]	@ 0x38
 8009ca8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009caa:	b97f      	cbnz	r7, 8009ccc <_dtoa_r+0x3c>
 8009cac:	2010      	movs	r0, #16
 8009cae:	f000 fdfd 	bl	800a8ac <malloc>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	f8cb 001c 	str.w	r0, [fp, #28]
 8009cb8:	b920      	cbnz	r0, 8009cc4 <_dtoa_r+0x34>
 8009cba:	4ba7      	ldr	r3, [pc, #668]	@ (8009f58 <_dtoa_r+0x2c8>)
 8009cbc:	21ef      	movs	r1, #239	@ 0xef
 8009cbe:	48a7      	ldr	r0, [pc, #668]	@ (8009f5c <_dtoa_r+0x2cc>)
 8009cc0:	f7ff ff40 	bl	8009b44 <__assert_func>
 8009cc4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009cc8:	6007      	str	r7, [r0, #0]
 8009cca:	60c7      	str	r7, [r0, #12]
 8009ccc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009cd0:	6819      	ldr	r1, [r3, #0]
 8009cd2:	b159      	cbz	r1, 8009cec <_dtoa_r+0x5c>
 8009cd4:	685a      	ldr	r2, [r3, #4]
 8009cd6:	604a      	str	r2, [r1, #4]
 8009cd8:	2301      	movs	r3, #1
 8009cda:	4093      	lsls	r3, r2
 8009cdc:	608b      	str	r3, [r1, #8]
 8009cde:	4658      	mov	r0, fp
 8009ce0:	f000 feda 	bl	800aa98 <_Bfree>
 8009ce4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	601a      	str	r2, [r3, #0]
 8009cec:	1e2b      	subs	r3, r5, #0
 8009cee:	bfb9      	ittee	lt
 8009cf0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009cf4:	9303      	strlt	r3, [sp, #12]
 8009cf6:	2300      	movge	r3, #0
 8009cf8:	6033      	strge	r3, [r6, #0]
 8009cfa:	9f03      	ldr	r7, [sp, #12]
 8009cfc:	4b98      	ldr	r3, [pc, #608]	@ (8009f60 <_dtoa_r+0x2d0>)
 8009cfe:	bfbc      	itt	lt
 8009d00:	2201      	movlt	r2, #1
 8009d02:	6032      	strlt	r2, [r6, #0]
 8009d04:	43bb      	bics	r3, r7
 8009d06:	d112      	bne.n	8009d2e <_dtoa_r+0x9e>
 8009d08:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009d0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009d0e:	6013      	str	r3, [r2, #0]
 8009d10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d14:	4323      	orrs	r3, r4
 8009d16:	f000 854d 	beq.w	800a7b4 <_dtoa_r+0xb24>
 8009d1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009d1c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009f74 <_dtoa_r+0x2e4>
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f000 854f 	beq.w	800a7c4 <_dtoa_r+0xb34>
 8009d26:	f10a 0303 	add.w	r3, sl, #3
 8009d2a:	f000 bd49 	b.w	800a7c0 <_dtoa_r+0xb30>
 8009d2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d32:	2200      	movs	r2, #0
 8009d34:	ec51 0b17 	vmov	r0, r1, d7
 8009d38:	2300      	movs	r3, #0
 8009d3a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009d3e:	f7f6 fec3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d42:	4680      	mov	r8, r0
 8009d44:	b158      	cbz	r0, 8009d5e <_dtoa_r+0xce>
 8009d46:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009d48:	2301      	movs	r3, #1
 8009d4a:	6013      	str	r3, [r2, #0]
 8009d4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009d4e:	b113      	cbz	r3, 8009d56 <_dtoa_r+0xc6>
 8009d50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009d52:	4b84      	ldr	r3, [pc, #528]	@ (8009f64 <_dtoa_r+0x2d4>)
 8009d54:	6013      	str	r3, [r2, #0]
 8009d56:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009f78 <_dtoa_r+0x2e8>
 8009d5a:	f000 bd33 	b.w	800a7c4 <_dtoa_r+0xb34>
 8009d5e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009d62:	aa16      	add	r2, sp, #88	@ 0x58
 8009d64:	a917      	add	r1, sp, #92	@ 0x5c
 8009d66:	4658      	mov	r0, fp
 8009d68:	f001 f980 	bl	800b06c <__d2b>
 8009d6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009d70:	4681      	mov	r9, r0
 8009d72:	2e00      	cmp	r6, #0
 8009d74:	d077      	beq.n	8009e66 <_dtoa_r+0x1d6>
 8009d76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d78:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009d7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009d88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009d8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009d90:	4619      	mov	r1, r3
 8009d92:	2200      	movs	r2, #0
 8009d94:	4b74      	ldr	r3, [pc, #464]	@ (8009f68 <_dtoa_r+0x2d8>)
 8009d96:	f7f6 fa77 	bl	8000288 <__aeabi_dsub>
 8009d9a:	a369      	add	r3, pc, #420	@ (adr r3, 8009f40 <_dtoa_r+0x2b0>)
 8009d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da0:	f7f6 fc2a 	bl	80005f8 <__aeabi_dmul>
 8009da4:	a368      	add	r3, pc, #416	@ (adr r3, 8009f48 <_dtoa_r+0x2b8>)
 8009da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009daa:	f7f6 fa6f 	bl	800028c <__adddf3>
 8009dae:	4604      	mov	r4, r0
 8009db0:	4630      	mov	r0, r6
 8009db2:	460d      	mov	r5, r1
 8009db4:	f7f6 fbb6 	bl	8000524 <__aeabi_i2d>
 8009db8:	a365      	add	r3, pc, #404	@ (adr r3, 8009f50 <_dtoa_r+0x2c0>)
 8009dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dbe:	f7f6 fc1b 	bl	80005f8 <__aeabi_dmul>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	4629      	mov	r1, r5
 8009dca:	f7f6 fa5f 	bl	800028c <__adddf3>
 8009dce:	4604      	mov	r4, r0
 8009dd0:	460d      	mov	r5, r1
 8009dd2:	f7f6 fec1 	bl	8000b58 <__aeabi_d2iz>
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	4607      	mov	r7, r0
 8009dda:	2300      	movs	r3, #0
 8009ddc:	4620      	mov	r0, r4
 8009dde:	4629      	mov	r1, r5
 8009de0:	f7f6 fe7c 	bl	8000adc <__aeabi_dcmplt>
 8009de4:	b140      	cbz	r0, 8009df8 <_dtoa_r+0x168>
 8009de6:	4638      	mov	r0, r7
 8009de8:	f7f6 fb9c 	bl	8000524 <__aeabi_i2d>
 8009dec:	4622      	mov	r2, r4
 8009dee:	462b      	mov	r3, r5
 8009df0:	f7f6 fe6a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009df4:	b900      	cbnz	r0, 8009df8 <_dtoa_r+0x168>
 8009df6:	3f01      	subs	r7, #1
 8009df8:	2f16      	cmp	r7, #22
 8009dfa:	d851      	bhi.n	8009ea0 <_dtoa_r+0x210>
 8009dfc:	4b5b      	ldr	r3, [pc, #364]	@ (8009f6c <_dtoa_r+0x2dc>)
 8009dfe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e0a:	f7f6 fe67 	bl	8000adc <__aeabi_dcmplt>
 8009e0e:	2800      	cmp	r0, #0
 8009e10:	d048      	beq.n	8009ea4 <_dtoa_r+0x214>
 8009e12:	3f01      	subs	r7, #1
 8009e14:	2300      	movs	r3, #0
 8009e16:	9312      	str	r3, [sp, #72]	@ 0x48
 8009e18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009e1a:	1b9b      	subs	r3, r3, r6
 8009e1c:	1e5a      	subs	r2, r3, #1
 8009e1e:	bf44      	itt	mi
 8009e20:	f1c3 0801 	rsbmi	r8, r3, #1
 8009e24:	2300      	movmi	r3, #0
 8009e26:	9208      	str	r2, [sp, #32]
 8009e28:	bf54      	ite	pl
 8009e2a:	f04f 0800 	movpl.w	r8, #0
 8009e2e:	9308      	strmi	r3, [sp, #32]
 8009e30:	2f00      	cmp	r7, #0
 8009e32:	db39      	blt.n	8009ea8 <_dtoa_r+0x218>
 8009e34:	9b08      	ldr	r3, [sp, #32]
 8009e36:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009e38:	443b      	add	r3, r7
 8009e3a:	9308      	str	r3, [sp, #32]
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e42:	2b09      	cmp	r3, #9
 8009e44:	d864      	bhi.n	8009f10 <_dtoa_r+0x280>
 8009e46:	2b05      	cmp	r3, #5
 8009e48:	bfc4      	itt	gt
 8009e4a:	3b04      	subgt	r3, #4
 8009e4c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009e4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e50:	f1a3 0302 	sub.w	r3, r3, #2
 8009e54:	bfcc      	ite	gt
 8009e56:	2400      	movgt	r4, #0
 8009e58:	2401      	movle	r4, #1
 8009e5a:	2b03      	cmp	r3, #3
 8009e5c:	d863      	bhi.n	8009f26 <_dtoa_r+0x296>
 8009e5e:	e8df f003 	tbb	[pc, r3]
 8009e62:	372a      	.short	0x372a
 8009e64:	5535      	.short	0x5535
 8009e66:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009e6a:	441e      	add	r6, r3
 8009e6c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009e70:	2b20      	cmp	r3, #32
 8009e72:	bfc1      	itttt	gt
 8009e74:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009e78:	409f      	lslgt	r7, r3
 8009e7a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009e7e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009e82:	bfd6      	itet	le
 8009e84:	f1c3 0320 	rsble	r3, r3, #32
 8009e88:	ea47 0003 	orrgt.w	r0, r7, r3
 8009e8c:	fa04 f003 	lslle.w	r0, r4, r3
 8009e90:	f7f6 fb38 	bl	8000504 <__aeabi_ui2d>
 8009e94:	2201      	movs	r2, #1
 8009e96:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009e9a:	3e01      	subs	r6, #1
 8009e9c:	9214      	str	r2, [sp, #80]	@ 0x50
 8009e9e:	e777      	b.n	8009d90 <_dtoa_r+0x100>
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e7b8      	b.n	8009e16 <_dtoa_r+0x186>
 8009ea4:	9012      	str	r0, [sp, #72]	@ 0x48
 8009ea6:	e7b7      	b.n	8009e18 <_dtoa_r+0x188>
 8009ea8:	427b      	negs	r3, r7
 8009eaa:	930a      	str	r3, [sp, #40]	@ 0x28
 8009eac:	2300      	movs	r3, #0
 8009eae:	eba8 0807 	sub.w	r8, r8, r7
 8009eb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009eb4:	e7c4      	b.n	8009e40 <_dtoa_r+0x1b0>
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009eba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	dc35      	bgt.n	8009f2c <_dtoa_r+0x29c>
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	9307      	str	r3, [sp, #28]
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009eca:	e00b      	b.n	8009ee4 <_dtoa_r+0x254>
 8009ecc:	2301      	movs	r3, #1
 8009ece:	e7f3      	b.n	8009eb8 <_dtoa_r+0x228>
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ed4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ed6:	18fb      	adds	r3, r7, r3
 8009ed8:	9300      	str	r3, [sp, #0]
 8009eda:	3301      	adds	r3, #1
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	9307      	str	r3, [sp, #28]
 8009ee0:	bfb8      	it	lt
 8009ee2:	2301      	movlt	r3, #1
 8009ee4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009ee8:	2100      	movs	r1, #0
 8009eea:	2204      	movs	r2, #4
 8009eec:	f102 0514 	add.w	r5, r2, #20
 8009ef0:	429d      	cmp	r5, r3
 8009ef2:	d91f      	bls.n	8009f34 <_dtoa_r+0x2a4>
 8009ef4:	6041      	str	r1, [r0, #4]
 8009ef6:	4658      	mov	r0, fp
 8009ef8:	f000 fd8e 	bl	800aa18 <_Balloc>
 8009efc:	4682      	mov	sl, r0
 8009efe:	2800      	cmp	r0, #0
 8009f00:	d13c      	bne.n	8009f7c <_dtoa_r+0x2ec>
 8009f02:	4b1b      	ldr	r3, [pc, #108]	@ (8009f70 <_dtoa_r+0x2e0>)
 8009f04:	4602      	mov	r2, r0
 8009f06:	f240 11af 	movw	r1, #431	@ 0x1af
 8009f0a:	e6d8      	b.n	8009cbe <_dtoa_r+0x2e>
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e7e0      	b.n	8009ed2 <_dtoa_r+0x242>
 8009f10:	2401      	movs	r4, #1
 8009f12:	2300      	movs	r3, #0
 8009f14:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f16:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009f18:	f04f 33ff 	mov.w	r3, #4294967295
 8009f1c:	9300      	str	r3, [sp, #0]
 8009f1e:	9307      	str	r3, [sp, #28]
 8009f20:	2200      	movs	r2, #0
 8009f22:	2312      	movs	r3, #18
 8009f24:	e7d0      	b.n	8009ec8 <_dtoa_r+0x238>
 8009f26:	2301      	movs	r3, #1
 8009f28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f2a:	e7f5      	b.n	8009f18 <_dtoa_r+0x288>
 8009f2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	9307      	str	r3, [sp, #28]
 8009f32:	e7d7      	b.n	8009ee4 <_dtoa_r+0x254>
 8009f34:	3101      	adds	r1, #1
 8009f36:	0052      	lsls	r2, r2, #1
 8009f38:	e7d8      	b.n	8009eec <_dtoa_r+0x25c>
 8009f3a:	bf00      	nop
 8009f3c:	f3af 8000 	nop.w
 8009f40:	636f4361 	.word	0x636f4361
 8009f44:	3fd287a7 	.word	0x3fd287a7
 8009f48:	8b60c8b3 	.word	0x8b60c8b3
 8009f4c:	3fc68a28 	.word	0x3fc68a28
 8009f50:	509f79fb 	.word	0x509f79fb
 8009f54:	3fd34413 	.word	0x3fd34413
 8009f58:	0800bc64 	.word	0x0800bc64
 8009f5c:	0800bd50 	.word	0x0800bd50
 8009f60:	7ff00000 	.word	0x7ff00000
 8009f64:	0800bce4 	.word	0x0800bce4
 8009f68:	3ff80000 	.word	0x3ff80000
 8009f6c:	0800be48 	.word	0x0800be48
 8009f70:	0800bda8 	.word	0x0800bda8
 8009f74:	0800bd4c 	.word	0x0800bd4c
 8009f78:	0800bce3 	.word	0x0800bce3
 8009f7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009f80:	6018      	str	r0, [r3, #0]
 8009f82:	9b07      	ldr	r3, [sp, #28]
 8009f84:	2b0e      	cmp	r3, #14
 8009f86:	f200 80a4 	bhi.w	800a0d2 <_dtoa_r+0x442>
 8009f8a:	2c00      	cmp	r4, #0
 8009f8c:	f000 80a1 	beq.w	800a0d2 <_dtoa_r+0x442>
 8009f90:	2f00      	cmp	r7, #0
 8009f92:	dd33      	ble.n	8009ffc <_dtoa_r+0x36c>
 8009f94:	4bad      	ldr	r3, [pc, #692]	@ (800a24c <_dtoa_r+0x5bc>)
 8009f96:	f007 020f 	and.w	r2, r7, #15
 8009f9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f9e:	ed93 7b00 	vldr	d7, [r3]
 8009fa2:	05f8      	lsls	r0, r7, #23
 8009fa4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009fa8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009fac:	d516      	bpl.n	8009fdc <_dtoa_r+0x34c>
 8009fae:	4ba8      	ldr	r3, [pc, #672]	@ (800a250 <_dtoa_r+0x5c0>)
 8009fb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009fb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009fb8:	f7f6 fc48 	bl	800084c <__aeabi_ddiv>
 8009fbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fc0:	f004 040f 	and.w	r4, r4, #15
 8009fc4:	2603      	movs	r6, #3
 8009fc6:	4da2      	ldr	r5, [pc, #648]	@ (800a250 <_dtoa_r+0x5c0>)
 8009fc8:	b954      	cbnz	r4, 8009fe0 <_dtoa_r+0x350>
 8009fca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fd2:	f7f6 fc3b 	bl	800084c <__aeabi_ddiv>
 8009fd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fda:	e028      	b.n	800a02e <_dtoa_r+0x39e>
 8009fdc:	2602      	movs	r6, #2
 8009fde:	e7f2      	b.n	8009fc6 <_dtoa_r+0x336>
 8009fe0:	07e1      	lsls	r1, r4, #31
 8009fe2:	d508      	bpl.n	8009ff6 <_dtoa_r+0x366>
 8009fe4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fe8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009fec:	f7f6 fb04 	bl	80005f8 <__aeabi_dmul>
 8009ff0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ff4:	3601      	adds	r6, #1
 8009ff6:	1064      	asrs	r4, r4, #1
 8009ff8:	3508      	adds	r5, #8
 8009ffa:	e7e5      	b.n	8009fc8 <_dtoa_r+0x338>
 8009ffc:	f000 80d2 	beq.w	800a1a4 <_dtoa_r+0x514>
 800a000:	427c      	negs	r4, r7
 800a002:	4b92      	ldr	r3, [pc, #584]	@ (800a24c <_dtoa_r+0x5bc>)
 800a004:	4d92      	ldr	r5, [pc, #584]	@ (800a250 <_dtoa_r+0x5c0>)
 800a006:	f004 020f 	and.w	r2, r4, #15
 800a00a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a012:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a016:	f7f6 faef 	bl	80005f8 <__aeabi_dmul>
 800a01a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a01e:	1124      	asrs	r4, r4, #4
 800a020:	2300      	movs	r3, #0
 800a022:	2602      	movs	r6, #2
 800a024:	2c00      	cmp	r4, #0
 800a026:	f040 80b2 	bne.w	800a18e <_dtoa_r+0x4fe>
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d1d3      	bne.n	8009fd6 <_dtoa_r+0x346>
 800a02e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a030:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a034:	2b00      	cmp	r3, #0
 800a036:	f000 80b7 	beq.w	800a1a8 <_dtoa_r+0x518>
 800a03a:	4b86      	ldr	r3, [pc, #536]	@ (800a254 <_dtoa_r+0x5c4>)
 800a03c:	2200      	movs	r2, #0
 800a03e:	4620      	mov	r0, r4
 800a040:	4629      	mov	r1, r5
 800a042:	f7f6 fd4b 	bl	8000adc <__aeabi_dcmplt>
 800a046:	2800      	cmp	r0, #0
 800a048:	f000 80ae 	beq.w	800a1a8 <_dtoa_r+0x518>
 800a04c:	9b07      	ldr	r3, [sp, #28]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	f000 80aa 	beq.w	800a1a8 <_dtoa_r+0x518>
 800a054:	9b00      	ldr	r3, [sp, #0]
 800a056:	2b00      	cmp	r3, #0
 800a058:	dd37      	ble.n	800a0ca <_dtoa_r+0x43a>
 800a05a:	1e7b      	subs	r3, r7, #1
 800a05c:	9304      	str	r3, [sp, #16]
 800a05e:	4620      	mov	r0, r4
 800a060:	4b7d      	ldr	r3, [pc, #500]	@ (800a258 <_dtoa_r+0x5c8>)
 800a062:	2200      	movs	r2, #0
 800a064:	4629      	mov	r1, r5
 800a066:	f7f6 fac7 	bl	80005f8 <__aeabi_dmul>
 800a06a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a06e:	9c00      	ldr	r4, [sp, #0]
 800a070:	3601      	adds	r6, #1
 800a072:	4630      	mov	r0, r6
 800a074:	f7f6 fa56 	bl	8000524 <__aeabi_i2d>
 800a078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a07c:	f7f6 fabc 	bl	80005f8 <__aeabi_dmul>
 800a080:	4b76      	ldr	r3, [pc, #472]	@ (800a25c <_dtoa_r+0x5cc>)
 800a082:	2200      	movs	r2, #0
 800a084:	f7f6 f902 	bl	800028c <__adddf3>
 800a088:	4605      	mov	r5, r0
 800a08a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a08e:	2c00      	cmp	r4, #0
 800a090:	f040 808d 	bne.w	800a1ae <_dtoa_r+0x51e>
 800a094:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a098:	4b71      	ldr	r3, [pc, #452]	@ (800a260 <_dtoa_r+0x5d0>)
 800a09a:	2200      	movs	r2, #0
 800a09c:	f7f6 f8f4 	bl	8000288 <__aeabi_dsub>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a0a8:	462a      	mov	r2, r5
 800a0aa:	4633      	mov	r3, r6
 800a0ac:	f7f6 fd34 	bl	8000b18 <__aeabi_dcmpgt>
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	f040 828b 	bne.w	800a5cc <_dtoa_r+0x93c>
 800a0b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0ba:	462a      	mov	r2, r5
 800a0bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a0c0:	f7f6 fd0c 	bl	8000adc <__aeabi_dcmplt>
 800a0c4:	2800      	cmp	r0, #0
 800a0c6:	f040 8128 	bne.w	800a31a <_dtoa_r+0x68a>
 800a0ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a0ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a0d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	f2c0 815a 	blt.w	800a38e <_dtoa_r+0x6fe>
 800a0da:	2f0e      	cmp	r7, #14
 800a0dc:	f300 8157 	bgt.w	800a38e <_dtoa_r+0x6fe>
 800a0e0:	4b5a      	ldr	r3, [pc, #360]	@ (800a24c <_dtoa_r+0x5bc>)
 800a0e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a0e6:	ed93 7b00 	vldr	d7, [r3]
 800a0ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	ed8d 7b00 	vstr	d7, [sp]
 800a0f2:	da03      	bge.n	800a0fc <_dtoa_r+0x46c>
 800a0f4:	9b07      	ldr	r3, [sp, #28]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	f340 8101 	ble.w	800a2fe <_dtoa_r+0x66e>
 800a0fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a100:	4656      	mov	r6, sl
 800a102:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a106:	4620      	mov	r0, r4
 800a108:	4629      	mov	r1, r5
 800a10a:	f7f6 fb9f 	bl	800084c <__aeabi_ddiv>
 800a10e:	f7f6 fd23 	bl	8000b58 <__aeabi_d2iz>
 800a112:	4680      	mov	r8, r0
 800a114:	f7f6 fa06 	bl	8000524 <__aeabi_i2d>
 800a118:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a11c:	f7f6 fa6c 	bl	80005f8 <__aeabi_dmul>
 800a120:	4602      	mov	r2, r0
 800a122:	460b      	mov	r3, r1
 800a124:	4620      	mov	r0, r4
 800a126:	4629      	mov	r1, r5
 800a128:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a12c:	f7f6 f8ac 	bl	8000288 <__aeabi_dsub>
 800a130:	f806 4b01 	strb.w	r4, [r6], #1
 800a134:	9d07      	ldr	r5, [sp, #28]
 800a136:	eba6 040a 	sub.w	r4, r6, sl
 800a13a:	42a5      	cmp	r5, r4
 800a13c:	4602      	mov	r2, r0
 800a13e:	460b      	mov	r3, r1
 800a140:	f040 8117 	bne.w	800a372 <_dtoa_r+0x6e2>
 800a144:	f7f6 f8a2 	bl	800028c <__adddf3>
 800a148:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a14c:	4604      	mov	r4, r0
 800a14e:	460d      	mov	r5, r1
 800a150:	f7f6 fce2 	bl	8000b18 <__aeabi_dcmpgt>
 800a154:	2800      	cmp	r0, #0
 800a156:	f040 80f9 	bne.w	800a34c <_dtoa_r+0x6bc>
 800a15a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a15e:	4620      	mov	r0, r4
 800a160:	4629      	mov	r1, r5
 800a162:	f7f6 fcb1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a166:	b118      	cbz	r0, 800a170 <_dtoa_r+0x4e0>
 800a168:	f018 0f01 	tst.w	r8, #1
 800a16c:	f040 80ee 	bne.w	800a34c <_dtoa_r+0x6bc>
 800a170:	4649      	mov	r1, r9
 800a172:	4658      	mov	r0, fp
 800a174:	f000 fc90 	bl	800aa98 <_Bfree>
 800a178:	2300      	movs	r3, #0
 800a17a:	7033      	strb	r3, [r6, #0]
 800a17c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a17e:	3701      	adds	r7, #1
 800a180:	601f      	str	r7, [r3, #0]
 800a182:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a184:	2b00      	cmp	r3, #0
 800a186:	f000 831d 	beq.w	800a7c4 <_dtoa_r+0xb34>
 800a18a:	601e      	str	r6, [r3, #0]
 800a18c:	e31a      	b.n	800a7c4 <_dtoa_r+0xb34>
 800a18e:	07e2      	lsls	r2, r4, #31
 800a190:	d505      	bpl.n	800a19e <_dtoa_r+0x50e>
 800a192:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a196:	f7f6 fa2f 	bl	80005f8 <__aeabi_dmul>
 800a19a:	3601      	adds	r6, #1
 800a19c:	2301      	movs	r3, #1
 800a19e:	1064      	asrs	r4, r4, #1
 800a1a0:	3508      	adds	r5, #8
 800a1a2:	e73f      	b.n	800a024 <_dtoa_r+0x394>
 800a1a4:	2602      	movs	r6, #2
 800a1a6:	e742      	b.n	800a02e <_dtoa_r+0x39e>
 800a1a8:	9c07      	ldr	r4, [sp, #28]
 800a1aa:	9704      	str	r7, [sp, #16]
 800a1ac:	e761      	b.n	800a072 <_dtoa_r+0x3e2>
 800a1ae:	4b27      	ldr	r3, [pc, #156]	@ (800a24c <_dtoa_r+0x5bc>)
 800a1b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a1b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a1b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a1ba:	4454      	add	r4, sl
 800a1bc:	2900      	cmp	r1, #0
 800a1be:	d053      	beq.n	800a268 <_dtoa_r+0x5d8>
 800a1c0:	4928      	ldr	r1, [pc, #160]	@ (800a264 <_dtoa_r+0x5d4>)
 800a1c2:	2000      	movs	r0, #0
 800a1c4:	f7f6 fb42 	bl	800084c <__aeabi_ddiv>
 800a1c8:	4633      	mov	r3, r6
 800a1ca:	462a      	mov	r2, r5
 800a1cc:	f7f6 f85c 	bl	8000288 <__aeabi_dsub>
 800a1d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a1d4:	4656      	mov	r6, sl
 800a1d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1da:	f7f6 fcbd 	bl	8000b58 <__aeabi_d2iz>
 800a1de:	4605      	mov	r5, r0
 800a1e0:	f7f6 f9a0 	bl	8000524 <__aeabi_i2d>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1ec:	f7f6 f84c 	bl	8000288 <__aeabi_dsub>
 800a1f0:	3530      	adds	r5, #48	@ 0x30
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a1fa:	f806 5b01 	strb.w	r5, [r6], #1
 800a1fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a202:	f7f6 fc6b 	bl	8000adc <__aeabi_dcmplt>
 800a206:	2800      	cmp	r0, #0
 800a208:	d171      	bne.n	800a2ee <_dtoa_r+0x65e>
 800a20a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a20e:	4911      	ldr	r1, [pc, #68]	@ (800a254 <_dtoa_r+0x5c4>)
 800a210:	2000      	movs	r0, #0
 800a212:	f7f6 f839 	bl	8000288 <__aeabi_dsub>
 800a216:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a21a:	f7f6 fc5f 	bl	8000adc <__aeabi_dcmplt>
 800a21e:	2800      	cmp	r0, #0
 800a220:	f040 8095 	bne.w	800a34e <_dtoa_r+0x6be>
 800a224:	42a6      	cmp	r6, r4
 800a226:	f43f af50 	beq.w	800a0ca <_dtoa_r+0x43a>
 800a22a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a22e:	4b0a      	ldr	r3, [pc, #40]	@ (800a258 <_dtoa_r+0x5c8>)
 800a230:	2200      	movs	r2, #0
 800a232:	f7f6 f9e1 	bl	80005f8 <__aeabi_dmul>
 800a236:	4b08      	ldr	r3, [pc, #32]	@ (800a258 <_dtoa_r+0x5c8>)
 800a238:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a23c:	2200      	movs	r2, #0
 800a23e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a242:	f7f6 f9d9 	bl	80005f8 <__aeabi_dmul>
 800a246:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a24a:	e7c4      	b.n	800a1d6 <_dtoa_r+0x546>
 800a24c:	0800be48 	.word	0x0800be48
 800a250:	0800be20 	.word	0x0800be20
 800a254:	3ff00000 	.word	0x3ff00000
 800a258:	40240000 	.word	0x40240000
 800a25c:	401c0000 	.word	0x401c0000
 800a260:	40140000 	.word	0x40140000
 800a264:	3fe00000 	.word	0x3fe00000
 800a268:	4631      	mov	r1, r6
 800a26a:	4628      	mov	r0, r5
 800a26c:	f7f6 f9c4 	bl	80005f8 <__aeabi_dmul>
 800a270:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a274:	9415      	str	r4, [sp, #84]	@ 0x54
 800a276:	4656      	mov	r6, sl
 800a278:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a27c:	f7f6 fc6c 	bl	8000b58 <__aeabi_d2iz>
 800a280:	4605      	mov	r5, r0
 800a282:	f7f6 f94f 	bl	8000524 <__aeabi_i2d>
 800a286:	4602      	mov	r2, r0
 800a288:	460b      	mov	r3, r1
 800a28a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a28e:	f7f5 fffb 	bl	8000288 <__aeabi_dsub>
 800a292:	3530      	adds	r5, #48	@ 0x30
 800a294:	f806 5b01 	strb.w	r5, [r6], #1
 800a298:	4602      	mov	r2, r0
 800a29a:	460b      	mov	r3, r1
 800a29c:	42a6      	cmp	r6, r4
 800a29e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a2a2:	f04f 0200 	mov.w	r2, #0
 800a2a6:	d124      	bne.n	800a2f2 <_dtoa_r+0x662>
 800a2a8:	4bac      	ldr	r3, [pc, #688]	@ (800a55c <_dtoa_r+0x8cc>)
 800a2aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a2ae:	f7f5 ffed 	bl	800028c <__adddf3>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2ba:	f7f6 fc2d 	bl	8000b18 <__aeabi_dcmpgt>
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	d145      	bne.n	800a34e <_dtoa_r+0x6be>
 800a2c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a2c6:	49a5      	ldr	r1, [pc, #660]	@ (800a55c <_dtoa_r+0x8cc>)
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	f7f5 ffdd 	bl	8000288 <__aeabi_dsub>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2d6:	f7f6 fc01 	bl	8000adc <__aeabi_dcmplt>
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	f43f aef5 	beq.w	800a0ca <_dtoa_r+0x43a>
 800a2e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a2e2:	1e73      	subs	r3, r6, #1
 800a2e4:	9315      	str	r3, [sp, #84]	@ 0x54
 800a2e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a2ea:	2b30      	cmp	r3, #48	@ 0x30
 800a2ec:	d0f8      	beq.n	800a2e0 <_dtoa_r+0x650>
 800a2ee:	9f04      	ldr	r7, [sp, #16]
 800a2f0:	e73e      	b.n	800a170 <_dtoa_r+0x4e0>
 800a2f2:	4b9b      	ldr	r3, [pc, #620]	@ (800a560 <_dtoa_r+0x8d0>)
 800a2f4:	f7f6 f980 	bl	80005f8 <__aeabi_dmul>
 800a2f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2fc:	e7bc      	b.n	800a278 <_dtoa_r+0x5e8>
 800a2fe:	d10c      	bne.n	800a31a <_dtoa_r+0x68a>
 800a300:	4b98      	ldr	r3, [pc, #608]	@ (800a564 <_dtoa_r+0x8d4>)
 800a302:	2200      	movs	r2, #0
 800a304:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a308:	f7f6 f976 	bl	80005f8 <__aeabi_dmul>
 800a30c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a310:	f7f6 fbf8 	bl	8000b04 <__aeabi_dcmpge>
 800a314:	2800      	cmp	r0, #0
 800a316:	f000 8157 	beq.w	800a5c8 <_dtoa_r+0x938>
 800a31a:	2400      	movs	r4, #0
 800a31c:	4625      	mov	r5, r4
 800a31e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a320:	43db      	mvns	r3, r3
 800a322:	9304      	str	r3, [sp, #16]
 800a324:	4656      	mov	r6, sl
 800a326:	2700      	movs	r7, #0
 800a328:	4621      	mov	r1, r4
 800a32a:	4658      	mov	r0, fp
 800a32c:	f000 fbb4 	bl	800aa98 <_Bfree>
 800a330:	2d00      	cmp	r5, #0
 800a332:	d0dc      	beq.n	800a2ee <_dtoa_r+0x65e>
 800a334:	b12f      	cbz	r7, 800a342 <_dtoa_r+0x6b2>
 800a336:	42af      	cmp	r7, r5
 800a338:	d003      	beq.n	800a342 <_dtoa_r+0x6b2>
 800a33a:	4639      	mov	r1, r7
 800a33c:	4658      	mov	r0, fp
 800a33e:	f000 fbab 	bl	800aa98 <_Bfree>
 800a342:	4629      	mov	r1, r5
 800a344:	4658      	mov	r0, fp
 800a346:	f000 fba7 	bl	800aa98 <_Bfree>
 800a34a:	e7d0      	b.n	800a2ee <_dtoa_r+0x65e>
 800a34c:	9704      	str	r7, [sp, #16]
 800a34e:	4633      	mov	r3, r6
 800a350:	461e      	mov	r6, r3
 800a352:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a356:	2a39      	cmp	r2, #57	@ 0x39
 800a358:	d107      	bne.n	800a36a <_dtoa_r+0x6da>
 800a35a:	459a      	cmp	sl, r3
 800a35c:	d1f8      	bne.n	800a350 <_dtoa_r+0x6c0>
 800a35e:	9a04      	ldr	r2, [sp, #16]
 800a360:	3201      	adds	r2, #1
 800a362:	9204      	str	r2, [sp, #16]
 800a364:	2230      	movs	r2, #48	@ 0x30
 800a366:	f88a 2000 	strb.w	r2, [sl]
 800a36a:	781a      	ldrb	r2, [r3, #0]
 800a36c:	3201      	adds	r2, #1
 800a36e:	701a      	strb	r2, [r3, #0]
 800a370:	e7bd      	b.n	800a2ee <_dtoa_r+0x65e>
 800a372:	4b7b      	ldr	r3, [pc, #492]	@ (800a560 <_dtoa_r+0x8d0>)
 800a374:	2200      	movs	r2, #0
 800a376:	f7f6 f93f 	bl	80005f8 <__aeabi_dmul>
 800a37a:	2200      	movs	r2, #0
 800a37c:	2300      	movs	r3, #0
 800a37e:	4604      	mov	r4, r0
 800a380:	460d      	mov	r5, r1
 800a382:	f7f6 fba1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a386:	2800      	cmp	r0, #0
 800a388:	f43f aebb 	beq.w	800a102 <_dtoa_r+0x472>
 800a38c:	e6f0      	b.n	800a170 <_dtoa_r+0x4e0>
 800a38e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a390:	2a00      	cmp	r2, #0
 800a392:	f000 80db 	beq.w	800a54c <_dtoa_r+0x8bc>
 800a396:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a398:	2a01      	cmp	r2, #1
 800a39a:	f300 80bf 	bgt.w	800a51c <_dtoa_r+0x88c>
 800a39e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a3a0:	2a00      	cmp	r2, #0
 800a3a2:	f000 80b7 	beq.w	800a514 <_dtoa_r+0x884>
 800a3a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a3aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a3ac:	4646      	mov	r6, r8
 800a3ae:	9a08      	ldr	r2, [sp, #32]
 800a3b0:	2101      	movs	r1, #1
 800a3b2:	441a      	add	r2, r3
 800a3b4:	4658      	mov	r0, fp
 800a3b6:	4498      	add	r8, r3
 800a3b8:	9208      	str	r2, [sp, #32]
 800a3ba:	f000 fc21 	bl	800ac00 <__i2b>
 800a3be:	4605      	mov	r5, r0
 800a3c0:	b15e      	cbz	r6, 800a3da <_dtoa_r+0x74a>
 800a3c2:	9b08      	ldr	r3, [sp, #32]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	dd08      	ble.n	800a3da <_dtoa_r+0x74a>
 800a3c8:	42b3      	cmp	r3, r6
 800a3ca:	9a08      	ldr	r2, [sp, #32]
 800a3cc:	bfa8      	it	ge
 800a3ce:	4633      	movge	r3, r6
 800a3d0:	eba8 0803 	sub.w	r8, r8, r3
 800a3d4:	1af6      	subs	r6, r6, r3
 800a3d6:	1ad3      	subs	r3, r2, r3
 800a3d8:	9308      	str	r3, [sp, #32]
 800a3da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3dc:	b1f3      	cbz	r3, 800a41c <_dtoa_r+0x78c>
 800a3de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	f000 80b7 	beq.w	800a554 <_dtoa_r+0x8c4>
 800a3e6:	b18c      	cbz	r4, 800a40c <_dtoa_r+0x77c>
 800a3e8:	4629      	mov	r1, r5
 800a3ea:	4622      	mov	r2, r4
 800a3ec:	4658      	mov	r0, fp
 800a3ee:	f000 fcc7 	bl	800ad80 <__pow5mult>
 800a3f2:	464a      	mov	r2, r9
 800a3f4:	4601      	mov	r1, r0
 800a3f6:	4605      	mov	r5, r0
 800a3f8:	4658      	mov	r0, fp
 800a3fa:	f000 fc17 	bl	800ac2c <__multiply>
 800a3fe:	4649      	mov	r1, r9
 800a400:	9004      	str	r0, [sp, #16]
 800a402:	4658      	mov	r0, fp
 800a404:	f000 fb48 	bl	800aa98 <_Bfree>
 800a408:	9b04      	ldr	r3, [sp, #16]
 800a40a:	4699      	mov	r9, r3
 800a40c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a40e:	1b1a      	subs	r2, r3, r4
 800a410:	d004      	beq.n	800a41c <_dtoa_r+0x78c>
 800a412:	4649      	mov	r1, r9
 800a414:	4658      	mov	r0, fp
 800a416:	f000 fcb3 	bl	800ad80 <__pow5mult>
 800a41a:	4681      	mov	r9, r0
 800a41c:	2101      	movs	r1, #1
 800a41e:	4658      	mov	r0, fp
 800a420:	f000 fbee 	bl	800ac00 <__i2b>
 800a424:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a426:	4604      	mov	r4, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	f000 81cf 	beq.w	800a7cc <_dtoa_r+0xb3c>
 800a42e:	461a      	mov	r2, r3
 800a430:	4601      	mov	r1, r0
 800a432:	4658      	mov	r0, fp
 800a434:	f000 fca4 	bl	800ad80 <__pow5mult>
 800a438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	4604      	mov	r4, r0
 800a43e:	f300 8095 	bgt.w	800a56c <_dtoa_r+0x8dc>
 800a442:	9b02      	ldr	r3, [sp, #8]
 800a444:	2b00      	cmp	r3, #0
 800a446:	f040 8087 	bne.w	800a558 <_dtoa_r+0x8c8>
 800a44a:	9b03      	ldr	r3, [sp, #12]
 800a44c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a450:	2b00      	cmp	r3, #0
 800a452:	f040 8089 	bne.w	800a568 <_dtoa_r+0x8d8>
 800a456:	9b03      	ldr	r3, [sp, #12]
 800a458:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a45c:	0d1b      	lsrs	r3, r3, #20
 800a45e:	051b      	lsls	r3, r3, #20
 800a460:	b12b      	cbz	r3, 800a46e <_dtoa_r+0x7de>
 800a462:	9b08      	ldr	r3, [sp, #32]
 800a464:	3301      	adds	r3, #1
 800a466:	9308      	str	r3, [sp, #32]
 800a468:	f108 0801 	add.w	r8, r8, #1
 800a46c:	2301      	movs	r3, #1
 800a46e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a470:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a472:	2b00      	cmp	r3, #0
 800a474:	f000 81b0 	beq.w	800a7d8 <_dtoa_r+0xb48>
 800a478:	6923      	ldr	r3, [r4, #16]
 800a47a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a47e:	6918      	ldr	r0, [r3, #16]
 800a480:	f000 fb72 	bl	800ab68 <__hi0bits>
 800a484:	f1c0 0020 	rsb	r0, r0, #32
 800a488:	9b08      	ldr	r3, [sp, #32]
 800a48a:	4418      	add	r0, r3
 800a48c:	f010 001f 	ands.w	r0, r0, #31
 800a490:	d077      	beq.n	800a582 <_dtoa_r+0x8f2>
 800a492:	f1c0 0320 	rsb	r3, r0, #32
 800a496:	2b04      	cmp	r3, #4
 800a498:	dd6b      	ble.n	800a572 <_dtoa_r+0x8e2>
 800a49a:	9b08      	ldr	r3, [sp, #32]
 800a49c:	f1c0 001c 	rsb	r0, r0, #28
 800a4a0:	4403      	add	r3, r0
 800a4a2:	4480      	add	r8, r0
 800a4a4:	4406      	add	r6, r0
 800a4a6:	9308      	str	r3, [sp, #32]
 800a4a8:	f1b8 0f00 	cmp.w	r8, #0
 800a4ac:	dd05      	ble.n	800a4ba <_dtoa_r+0x82a>
 800a4ae:	4649      	mov	r1, r9
 800a4b0:	4642      	mov	r2, r8
 800a4b2:	4658      	mov	r0, fp
 800a4b4:	f000 fcbe 	bl	800ae34 <__lshift>
 800a4b8:	4681      	mov	r9, r0
 800a4ba:	9b08      	ldr	r3, [sp, #32]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	dd05      	ble.n	800a4cc <_dtoa_r+0x83c>
 800a4c0:	4621      	mov	r1, r4
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	4658      	mov	r0, fp
 800a4c6:	f000 fcb5 	bl	800ae34 <__lshift>
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d059      	beq.n	800a586 <_dtoa_r+0x8f6>
 800a4d2:	4621      	mov	r1, r4
 800a4d4:	4648      	mov	r0, r9
 800a4d6:	f000 fd19 	bl	800af0c <__mcmp>
 800a4da:	2800      	cmp	r0, #0
 800a4dc:	da53      	bge.n	800a586 <_dtoa_r+0x8f6>
 800a4de:	1e7b      	subs	r3, r7, #1
 800a4e0:	9304      	str	r3, [sp, #16]
 800a4e2:	4649      	mov	r1, r9
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	220a      	movs	r2, #10
 800a4e8:	4658      	mov	r0, fp
 800a4ea:	f000 faf7 	bl	800aadc <__multadd>
 800a4ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4f0:	4681      	mov	r9, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	f000 8172 	beq.w	800a7dc <_dtoa_r+0xb4c>
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	4629      	mov	r1, r5
 800a4fc:	220a      	movs	r2, #10
 800a4fe:	4658      	mov	r0, fp
 800a500:	f000 faec 	bl	800aadc <__multadd>
 800a504:	9b00      	ldr	r3, [sp, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	4605      	mov	r5, r0
 800a50a:	dc67      	bgt.n	800a5dc <_dtoa_r+0x94c>
 800a50c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a50e:	2b02      	cmp	r3, #2
 800a510:	dc41      	bgt.n	800a596 <_dtoa_r+0x906>
 800a512:	e063      	b.n	800a5dc <_dtoa_r+0x94c>
 800a514:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a516:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a51a:	e746      	b.n	800a3aa <_dtoa_r+0x71a>
 800a51c:	9b07      	ldr	r3, [sp, #28]
 800a51e:	1e5c      	subs	r4, r3, #1
 800a520:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a522:	42a3      	cmp	r3, r4
 800a524:	bfbf      	itttt	lt
 800a526:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a528:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a52a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a52c:	1ae3      	sublt	r3, r4, r3
 800a52e:	bfb4      	ite	lt
 800a530:	18d2      	addlt	r2, r2, r3
 800a532:	1b1c      	subge	r4, r3, r4
 800a534:	9b07      	ldr	r3, [sp, #28]
 800a536:	bfbc      	itt	lt
 800a538:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a53a:	2400      	movlt	r4, #0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	bfb5      	itete	lt
 800a540:	eba8 0603 	sublt.w	r6, r8, r3
 800a544:	9b07      	ldrge	r3, [sp, #28]
 800a546:	2300      	movlt	r3, #0
 800a548:	4646      	movge	r6, r8
 800a54a:	e730      	b.n	800a3ae <_dtoa_r+0x71e>
 800a54c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a54e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a550:	4646      	mov	r6, r8
 800a552:	e735      	b.n	800a3c0 <_dtoa_r+0x730>
 800a554:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a556:	e75c      	b.n	800a412 <_dtoa_r+0x782>
 800a558:	2300      	movs	r3, #0
 800a55a:	e788      	b.n	800a46e <_dtoa_r+0x7de>
 800a55c:	3fe00000 	.word	0x3fe00000
 800a560:	40240000 	.word	0x40240000
 800a564:	40140000 	.word	0x40140000
 800a568:	9b02      	ldr	r3, [sp, #8]
 800a56a:	e780      	b.n	800a46e <_dtoa_r+0x7de>
 800a56c:	2300      	movs	r3, #0
 800a56e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a570:	e782      	b.n	800a478 <_dtoa_r+0x7e8>
 800a572:	d099      	beq.n	800a4a8 <_dtoa_r+0x818>
 800a574:	9a08      	ldr	r2, [sp, #32]
 800a576:	331c      	adds	r3, #28
 800a578:	441a      	add	r2, r3
 800a57a:	4498      	add	r8, r3
 800a57c:	441e      	add	r6, r3
 800a57e:	9208      	str	r2, [sp, #32]
 800a580:	e792      	b.n	800a4a8 <_dtoa_r+0x818>
 800a582:	4603      	mov	r3, r0
 800a584:	e7f6      	b.n	800a574 <_dtoa_r+0x8e4>
 800a586:	9b07      	ldr	r3, [sp, #28]
 800a588:	9704      	str	r7, [sp, #16]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	dc20      	bgt.n	800a5d0 <_dtoa_r+0x940>
 800a58e:	9300      	str	r3, [sp, #0]
 800a590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a592:	2b02      	cmp	r3, #2
 800a594:	dd1e      	ble.n	800a5d4 <_dtoa_r+0x944>
 800a596:	9b00      	ldr	r3, [sp, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	f47f aec0 	bne.w	800a31e <_dtoa_r+0x68e>
 800a59e:	4621      	mov	r1, r4
 800a5a0:	2205      	movs	r2, #5
 800a5a2:	4658      	mov	r0, fp
 800a5a4:	f000 fa9a 	bl	800aadc <__multadd>
 800a5a8:	4601      	mov	r1, r0
 800a5aa:	4604      	mov	r4, r0
 800a5ac:	4648      	mov	r0, r9
 800a5ae:	f000 fcad 	bl	800af0c <__mcmp>
 800a5b2:	2800      	cmp	r0, #0
 800a5b4:	f77f aeb3 	ble.w	800a31e <_dtoa_r+0x68e>
 800a5b8:	4656      	mov	r6, sl
 800a5ba:	2331      	movs	r3, #49	@ 0x31
 800a5bc:	f806 3b01 	strb.w	r3, [r6], #1
 800a5c0:	9b04      	ldr	r3, [sp, #16]
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	9304      	str	r3, [sp, #16]
 800a5c6:	e6ae      	b.n	800a326 <_dtoa_r+0x696>
 800a5c8:	9c07      	ldr	r4, [sp, #28]
 800a5ca:	9704      	str	r7, [sp, #16]
 800a5cc:	4625      	mov	r5, r4
 800a5ce:	e7f3      	b.n	800a5b8 <_dtoa_r+0x928>
 800a5d0:	9b07      	ldr	r3, [sp, #28]
 800a5d2:	9300      	str	r3, [sp, #0]
 800a5d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	f000 8104 	beq.w	800a7e4 <_dtoa_r+0xb54>
 800a5dc:	2e00      	cmp	r6, #0
 800a5de:	dd05      	ble.n	800a5ec <_dtoa_r+0x95c>
 800a5e0:	4629      	mov	r1, r5
 800a5e2:	4632      	mov	r2, r6
 800a5e4:	4658      	mov	r0, fp
 800a5e6:	f000 fc25 	bl	800ae34 <__lshift>
 800a5ea:	4605      	mov	r5, r0
 800a5ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d05a      	beq.n	800a6a8 <_dtoa_r+0xa18>
 800a5f2:	6869      	ldr	r1, [r5, #4]
 800a5f4:	4658      	mov	r0, fp
 800a5f6:	f000 fa0f 	bl	800aa18 <_Balloc>
 800a5fa:	4606      	mov	r6, r0
 800a5fc:	b928      	cbnz	r0, 800a60a <_dtoa_r+0x97a>
 800a5fe:	4b84      	ldr	r3, [pc, #528]	@ (800a810 <_dtoa_r+0xb80>)
 800a600:	4602      	mov	r2, r0
 800a602:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a606:	f7ff bb5a 	b.w	8009cbe <_dtoa_r+0x2e>
 800a60a:	692a      	ldr	r2, [r5, #16]
 800a60c:	3202      	adds	r2, #2
 800a60e:	0092      	lsls	r2, r2, #2
 800a610:	f105 010c 	add.w	r1, r5, #12
 800a614:	300c      	adds	r0, #12
 800a616:	f7ff fa86 	bl	8009b26 <memcpy>
 800a61a:	2201      	movs	r2, #1
 800a61c:	4631      	mov	r1, r6
 800a61e:	4658      	mov	r0, fp
 800a620:	f000 fc08 	bl	800ae34 <__lshift>
 800a624:	f10a 0301 	add.w	r3, sl, #1
 800a628:	9307      	str	r3, [sp, #28]
 800a62a:	9b00      	ldr	r3, [sp, #0]
 800a62c:	4453      	add	r3, sl
 800a62e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a630:	9b02      	ldr	r3, [sp, #8]
 800a632:	f003 0301 	and.w	r3, r3, #1
 800a636:	462f      	mov	r7, r5
 800a638:	930a      	str	r3, [sp, #40]	@ 0x28
 800a63a:	4605      	mov	r5, r0
 800a63c:	9b07      	ldr	r3, [sp, #28]
 800a63e:	4621      	mov	r1, r4
 800a640:	3b01      	subs	r3, #1
 800a642:	4648      	mov	r0, r9
 800a644:	9300      	str	r3, [sp, #0]
 800a646:	f7ff fa9b 	bl	8009b80 <quorem>
 800a64a:	4639      	mov	r1, r7
 800a64c:	9002      	str	r0, [sp, #8]
 800a64e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a652:	4648      	mov	r0, r9
 800a654:	f000 fc5a 	bl	800af0c <__mcmp>
 800a658:	462a      	mov	r2, r5
 800a65a:	9008      	str	r0, [sp, #32]
 800a65c:	4621      	mov	r1, r4
 800a65e:	4658      	mov	r0, fp
 800a660:	f000 fc70 	bl	800af44 <__mdiff>
 800a664:	68c2      	ldr	r2, [r0, #12]
 800a666:	4606      	mov	r6, r0
 800a668:	bb02      	cbnz	r2, 800a6ac <_dtoa_r+0xa1c>
 800a66a:	4601      	mov	r1, r0
 800a66c:	4648      	mov	r0, r9
 800a66e:	f000 fc4d 	bl	800af0c <__mcmp>
 800a672:	4602      	mov	r2, r0
 800a674:	4631      	mov	r1, r6
 800a676:	4658      	mov	r0, fp
 800a678:	920e      	str	r2, [sp, #56]	@ 0x38
 800a67a:	f000 fa0d 	bl	800aa98 <_Bfree>
 800a67e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a680:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a682:	9e07      	ldr	r6, [sp, #28]
 800a684:	ea43 0102 	orr.w	r1, r3, r2
 800a688:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a68a:	4319      	orrs	r1, r3
 800a68c:	d110      	bne.n	800a6b0 <_dtoa_r+0xa20>
 800a68e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a692:	d029      	beq.n	800a6e8 <_dtoa_r+0xa58>
 800a694:	9b08      	ldr	r3, [sp, #32]
 800a696:	2b00      	cmp	r3, #0
 800a698:	dd02      	ble.n	800a6a0 <_dtoa_r+0xa10>
 800a69a:	9b02      	ldr	r3, [sp, #8]
 800a69c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a6a0:	9b00      	ldr	r3, [sp, #0]
 800a6a2:	f883 8000 	strb.w	r8, [r3]
 800a6a6:	e63f      	b.n	800a328 <_dtoa_r+0x698>
 800a6a8:	4628      	mov	r0, r5
 800a6aa:	e7bb      	b.n	800a624 <_dtoa_r+0x994>
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	e7e1      	b.n	800a674 <_dtoa_r+0x9e4>
 800a6b0:	9b08      	ldr	r3, [sp, #32]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	db04      	blt.n	800a6c0 <_dtoa_r+0xa30>
 800a6b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a6b8:	430b      	orrs	r3, r1
 800a6ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a6bc:	430b      	orrs	r3, r1
 800a6be:	d120      	bne.n	800a702 <_dtoa_r+0xa72>
 800a6c0:	2a00      	cmp	r2, #0
 800a6c2:	dded      	ble.n	800a6a0 <_dtoa_r+0xa10>
 800a6c4:	4649      	mov	r1, r9
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	4658      	mov	r0, fp
 800a6ca:	f000 fbb3 	bl	800ae34 <__lshift>
 800a6ce:	4621      	mov	r1, r4
 800a6d0:	4681      	mov	r9, r0
 800a6d2:	f000 fc1b 	bl	800af0c <__mcmp>
 800a6d6:	2800      	cmp	r0, #0
 800a6d8:	dc03      	bgt.n	800a6e2 <_dtoa_r+0xa52>
 800a6da:	d1e1      	bne.n	800a6a0 <_dtoa_r+0xa10>
 800a6dc:	f018 0f01 	tst.w	r8, #1
 800a6e0:	d0de      	beq.n	800a6a0 <_dtoa_r+0xa10>
 800a6e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a6e6:	d1d8      	bne.n	800a69a <_dtoa_r+0xa0a>
 800a6e8:	9a00      	ldr	r2, [sp, #0]
 800a6ea:	2339      	movs	r3, #57	@ 0x39
 800a6ec:	7013      	strb	r3, [r2, #0]
 800a6ee:	4633      	mov	r3, r6
 800a6f0:	461e      	mov	r6, r3
 800a6f2:	3b01      	subs	r3, #1
 800a6f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a6f8:	2a39      	cmp	r2, #57	@ 0x39
 800a6fa:	d052      	beq.n	800a7a2 <_dtoa_r+0xb12>
 800a6fc:	3201      	adds	r2, #1
 800a6fe:	701a      	strb	r2, [r3, #0]
 800a700:	e612      	b.n	800a328 <_dtoa_r+0x698>
 800a702:	2a00      	cmp	r2, #0
 800a704:	dd07      	ble.n	800a716 <_dtoa_r+0xa86>
 800a706:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a70a:	d0ed      	beq.n	800a6e8 <_dtoa_r+0xa58>
 800a70c:	9a00      	ldr	r2, [sp, #0]
 800a70e:	f108 0301 	add.w	r3, r8, #1
 800a712:	7013      	strb	r3, [r2, #0]
 800a714:	e608      	b.n	800a328 <_dtoa_r+0x698>
 800a716:	9b07      	ldr	r3, [sp, #28]
 800a718:	9a07      	ldr	r2, [sp, #28]
 800a71a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a71e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a720:	4293      	cmp	r3, r2
 800a722:	d028      	beq.n	800a776 <_dtoa_r+0xae6>
 800a724:	4649      	mov	r1, r9
 800a726:	2300      	movs	r3, #0
 800a728:	220a      	movs	r2, #10
 800a72a:	4658      	mov	r0, fp
 800a72c:	f000 f9d6 	bl	800aadc <__multadd>
 800a730:	42af      	cmp	r7, r5
 800a732:	4681      	mov	r9, r0
 800a734:	f04f 0300 	mov.w	r3, #0
 800a738:	f04f 020a 	mov.w	r2, #10
 800a73c:	4639      	mov	r1, r7
 800a73e:	4658      	mov	r0, fp
 800a740:	d107      	bne.n	800a752 <_dtoa_r+0xac2>
 800a742:	f000 f9cb 	bl	800aadc <__multadd>
 800a746:	4607      	mov	r7, r0
 800a748:	4605      	mov	r5, r0
 800a74a:	9b07      	ldr	r3, [sp, #28]
 800a74c:	3301      	adds	r3, #1
 800a74e:	9307      	str	r3, [sp, #28]
 800a750:	e774      	b.n	800a63c <_dtoa_r+0x9ac>
 800a752:	f000 f9c3 	bl	800aadc <__multadd>
 800a756:	4629      	mov	r1, r5
 800a758:	4607      	mov	r7, r0
 800a75a:	2300      	movs	r3, #0
 800a75c:	220a      	movs	r2, #10
 800a75e:	4658      	mov	r0, fp
 800a760:	f000 f9bc 	bl	800aadc <__multadd>
 800a764:	4605      	mov	r5, r0
 800a766:	e7f0      	b.n	800a74a <_dtoa_r+0xaba>
 800a768:	9b00      	ldr	r3, [sp, #0]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	bfcc      	ite	gt
 800a76e:	461e      	movgt	r6, r3
 800a770:	2601      	movle	r6, #1
 800a772:	4456      	add	r6, sl
 800a774:	2700      	movs	r7, #0
 800a776:	4649      	mov	r1, r9
 800a778:	2201      	movs	r2, #1
 800a77a:	4658      	mov	r0, fp
 800a77c:	f000 fb5a 	bl	800ae34 <__lshift>
 800a780:	4621      	mov	r1, r4
 800a782:	4681      	mov	r9, r0
 800a784:	f000 fbc2 	bl	800af0c <__mcmp>
 800a788:	2800      	cmp	r0, #0
 800a78a:	dcb0      	bgt.n	800a6ee <_dtoa_r+0xa5e>
 800a78c:	d102      	bne.n	800a794 <_dtoa_r+0xb04>
 800a78e:	f018 0f01 	tst.w	r8, #1
 800a792:	d1ac      	bne.n	800a6ee <_dtoa_r+0xa5e>
 800a794:	4633      	mov	r3, r6
 800a796:	461e      	mov	r6, r3
 800a798:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a79c:	2a30      	cmp	r2, #48	@ 0x30
 800a79e:	d0fa      	beq.n	800a796 <_dtoa_r+0xb06>
 800a7a0:	e5c2      	b.n	800a328 <_dtoa_r+0x698>
 800a7a2:	459a      	cmp	sl, r3
 800a7a4:	d1a4      	bne.n	800a6f0 <_dtoa_r+0xa60>
 800a7a6:	9b04      	ldr	r3, [sp, #16]
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	9304      	str	r3, [sp, #16]
 800a7ac:	2331      	movs	r3, #49	@ 0x31
 800a7ae:	f88a 3000 	strb.w	r3, [sl]
 800a7b2:	e5b9      	b.n	800a328 <_dtoa_r+0x698>
 800a7b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a7b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a814 <_dtoa_r+0xb84>
 800a7ba:	b11b      	cbz	r3, 800a7c4 <_dtoa_r+0xb34>
 800a7bc:	f10a 0308 	add.w	r3, sl, #8
 800a7c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a7c2:	6013      	str	r3, [r2, #0]
 800a7c4:	4650      	mov	r0, sl
 800a7c6:	b019      	add	sp, #100	@ 0x64
 800a7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	f77f ae37 	ble.w	800a442 <_dtoa_r+0x7b2>
 800a7d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7d8:	2001      	movs	r0, #1
 800a7da:	e655      	b.n	800a488 <_dtoa_r+0x7f8>
 800a7dc:	9b00      	ldr	r3, [sp, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	f77f aed6 	ble.w	800a590 <_dtoa_r+0x900>
 800a7e4:	4656      	mov	r6, sl
 800a7e6:	4621      	mov	r1, r4
 800a7e8:	4648      	mov	r0, r9
 800a7ea:	f7ff f9c9 	bl	8009b80 <quorem>
 800a7ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a7f2:	f806 8b01 	strb.w	r8, [r6], #1
 800a7f6:	9b00      	ldr	r3, [sp, #0]
 800a7f8:	eba6 020a 	sub.w	r2, r6, sl
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	ddb3      	ble.n	800a768 <_dtoa_r+0xad8>
 800a800:	4649      	mov	r1, r9
 800a802:	2300      	movs	r3, #0
 800a804:	220a      	movs	r2, #10
 800a806:	4658      	mov	r0, fp
 800a808:	f000 f968 	bl	800aadc <__multadd>
 800a80c:	4681      	mov	r9, r0
 800a80e:	e7ea      	b.n	800a7e6 <_dtoa_r+0xb56>
 800a810:	0800bda8 	.word	0x0800bda8
 800a814:	0800bd43 	.word	0x0800bd43

0800a818 <_free_r>:
 800a818:	b538      	push	{r3, r4, r5, lr}
 800a81a:	4605      	mov	r5, r0
 800a81c:	2900      	cmp	r1, #0
 800a81e:	d041      	beq.n	800a8a4 <_free_r+0x8c>
 800a820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a824:	1f0c      	subs	r4, r1, #4
 800a826:	2b00      	cmp	r3, #0
 800a828:	bfb8      	it	lt
 800a82a:	18e4      	addlt	r4, r4, r3
 800a82c:	f000 f8e8 	bl	800aa00 <__malloc_lock>
 800a830:	4a1d      	ldr	r2, [pc, #116]	@ (800a8a8 <_free_r+0x90>)
 800a832:	6813      	ldr	r3, [r2, #0]
 800a834:	b933      	cbnz	r3, 800a844 <_free_r+0x2c>
 800a836:	6063      	str	r3, [r4, #4]
 800a838:	6014      	str	r4, [r2, #0]
 800a83a:	4628      	mov	r0, r5
 800a83c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a840:	f000 b8e4 	b.w	800aa0c <__malloc_unlock>
 800a844:	42a3      	cmp	r3, r4
 800a846:	d908      	bls.n	800a85a <_free_r+0x42>
 800a848:	6820      	ldr	r0, [r4, #0]
 800a84a:	1821      	adds	r1, r4, r0
 800a84c:	428b      	cmp	r3, r1
 800a84e:	bf01      	itttt	eq
 800a850:	6819      	ldreq	r1, [r3, #0]
 800a852:	685b      	ldreq	r3, [r3, #4]
 800a854:	1809      	addeq	r1, r1, r0
 800a856:	6021      	streq	r1, [r4, #0]
 800a858:	e7ed      	b.n	800a836 <_free_r+0x1e>
 800a85a:	461a      	mov	r2, r3
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	b10b      	cbz	r3, 800a864 <_free_r+0x4c>
 800a860:	42a3      	cmp	r3, r4
 800a862:	d9fa      	bls.n	800a85a <_free_r+0x42>
 800a864:	6811      	ldr	r1, [r2, #0]
 800a866:	1850      	adds	r0, r2, r1
 800a868:	42a0      	cmp	r0, r4
 800a86a:	d10b      	bne.n	800a884 <_free_r+0x6c>
 800a86c:	6820      	ldr	r0, [r4, #0]
 800a86e:	4401      	add	r1, r0
 800a870:	1850      	adds	r0, r2, r1
 800a872:	4283      	cmp	r3, r0
 800a874:	6011      	str	r1, [r2, #0]
 800a876:	d1e0      	bne.n	800a83a <_free_r+0x22>
 800a878:	6818      	ldr	r0, [r3, #0]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	6053      	str	r3, [r2, #4]
 800a87e:	4408      	add	r0, r1
 800a880:	6010      	str	r0, [r2, #0]
 800a882:	e7da      	b.n	800a83a <_free_r+0x22>
 800a884:	d902      	bls.n	800a88c <_free_r+0x74>
 800a886:	230c      	movs	r3, #12
 800a888:	602b      	str	r3, [r5, #0]
 800a88a:	e7d6      	b.n	800a83a <_free_r+0x22>
 800a88c:	6820      	ldr	r0, [r4, #0]
 800a88e:	1821      	adds	r1, r4, r0
 800a890:	428b      	cmp	r3, r1
 800a892:	bf04      	itt	eq
 800a894:	6819      	ldreq	r1, [r3, #0]
 800a896:	685b      	ldreq	r3, [r3, #4]
 800a898:	6063      	str	r3, [r4, #4]
 800a89a:	bf04      	itt	eq
 800a89c:	1809      	addeq	r1, r1, r0
 800a89e:	6021      	streq	r1, [r4, #0]
 800a8a0:	6054      	str	r4, [r2, #4]
 800a8a2:	e7ca      	b.n	800a83a <_free_r+0x22>
 800a8a4:	bd38      	pop	{r3, r4, r5, pc}
 800a8a6:	bf00      	nop
 800a8a8:	20000968 	.word	0x20000968

0800a8ac <malloc>:
 800a8ac:	4b02      	ldr	r3, [pc, #8]	@ (800a8b8 <malloc+0xc>)
 800a8ae:	4601      	mov	r1, r0
 800a8b0:	6818      	ldr	r0, [r3, #0]
 800a8b2:	f000 b825 	b.w	800a900 <_malloc_r>
 800a8b6:	bf00      	nop
 800a8b8:	20000030 	.word	0x20000030

0800a8bc <sbrk_aligned>:
 800a8bc:	b570      	push	{r4, r5, r6, lr}
 800a8be:	4e0f      	ldr	r6, [pc, #60]	@ (800a8fc <sbrk_aligned+0x40>)
 800a8c0:	460c      	mov	r4, r1
 800a8c2:	6831      	ldr	r1, [r6, #0]
 800a8c4:	4605      	mov	r5, r0
 800a8c6:	b911      	cbnz	r1, 800a8ce <sbrk_aligned+0x12>
 800a8c8:	f000 fe58 	bl	800b57c <_sbrk_r>
 800a8cc:	6030      	str	r0, [r6, #0]
 800a8ce:	4621      	mov	r1, r4
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	f000 fe53 	bl	800b57c <_sbrk_r>
 800a8d6:	1c43      	adds	r3, r0, #1
 800a8d8:	d103      	bne.n	800a8e2 <sbrk_aligned+0x26>
 800a8da:	f04f 34ff 	mov.w	r4, #4294967295
 800a8de:	4620      	mov	r0, r4
 800a8e0:	bd70      	pop	{r4, r5, r6, pc}
 800a8e2:	1cc4      	adds	r4, r0, #3
 800a8e4:	f024 0403 	bic.w	r4, r4, #3
 800a8e8:	42a0      	cmp	r0, r4
 800a8ea:	d0f8      	beq.n	800a8de <sbrk_aligned+0x22>
 800a8ec:	1a21      	subs	r1, r4, r0
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	f000 fe44 	bl	800b57c <_sbrk_r>
 800a8f4:	3001      	adds	r0, #1
 800a8f6:	d1f2      	bne.n	800a8de <sbrk_aligned+0x22>
 800a8f8:	e7ef      	b.n	800a8da <sbrk_aligned+0x1e>
 800a8fa:	bf00      	nop
 800a8fc:	20000964 	.word	0x20000964

0800a900 <_malloc_r>:
 800a900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a904:	1ccd      	adds	r5, r1, #3
 800a906:	f025 0503 	bic.w	r5, r5, #3
 800a90a:	3508      	adds	r5, #8
 800a90c:	2d0c      	cmp	r5, #12
 800a90e:	bf38      	it	cc
 800a910:	250c      	movcc	r5, #12
 800a912:	2d00      	cmp	r5, #0
 800a914:	4606      	mov	r6, r0
 800a916:	db01      	blt.n	800a91c <_malloc_r+0x1c>
 800a918:	42a9      	cmp	r1, r5
 800a91a:	d904      	bls.n	800a926 <_malloc_r+0x26>
 800a91c:	230c      	movs	r3, #12
 800a91e:	6033      	str	r3, [r6, #0]
 800a920:	2000      	movs	r0, #0
 800a922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a926:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a9fc <_malloc_r+0xfc>
 800a92a:	f000 f869 	bl	800aa00 <__malloc_lock>
 800a92e:	f8d8 3000 	ldr.w	r3, [r8]
 800a932:	461c      	mov	r4, r3
 800a934:	bb44      	cbnz	r4, 800a988 <_malloc_r+0x88>
 800a936:	4629      	mov	r1, r5
 800a938:	4630      	mov	r0, r6
 800a93a:	f7ff ffbf 	bl	800a8bc <sbrk_aligned>
 800a93e:	1c43      	adds	r3, r0, #1
 800a940:	4604      	mov	r4, r0
 800a942:	d158      	bne.n	800a9f6 <_malloc_r+0xf6>
 800a944:	f8d8 4000 	ldr.w	r4, [r8]
 800a948:	4627      	mov	r7, r4
 800a94a:	2f00      	cmp	r7, #0
 800a94c:	d143      	bne.n	800a9d6 <_malloc_r+0xd6>
 800a94e:	2c00      	cmp	r4, #0
 800a950:	d04b      	beq.n	800a9ea <_malloc_r+0xea>
 800a952:	6823      	ldr	r3, [r4, #0]
 800a954:	4639      	mov	r1, r7
 800a956:	4630      	mov	r0, r6
 800a958:	eb04 0903 	add.w	r9, r4, r3
 800a95c:	f000 fe0e 	bl	800b57c <_sbrk_r>
 800a960:	4581      	cmp	r9, r0
 800a962:	d142      	bne.n	800a9ea <_malloc_r+0xea>
 800a964:	6821      	ldr	r1, [r4, #0]
 800a966:	1a6d      	subs	r5, r5, r1
 800a968:	4629      	mov	r1, r5
 800a96a:	4630      	mov	r0, r6
 800a96c:	f7ff ffa6 	bl	800a8bc <sbrk_aligned>
 800a970:	3001      	adds	r0, #1
 800a972:	d03a      	beq.n	800a9ea <_malloc_r+0xea>
 800a974:	6823      	ldr	r3, [r4, #0]
 800a976:	442b      	add	r3, r5
 800a978:	6023      	str	r3, [r4, #0]
 800a97a:	f8d8 3000 	ldr.w	r3, [r8]
 800a97e:	685a      	ldr	r2, [r3, #4]
 800a980:	bb62      	cbnz	r2, 800a9dc <_malloc_r+0xdc>
 800a982:	f8c8 7000 	str.w	r7, [r8]
 800a986:	e00f      	b.n	800a9a8 <_malloc_r+0xa8>
 800a988:	6822      	ldr	r2, [r4, #0]
 800a98a:	1b52      	subs	r2, r2, r5
 800a98c:	d420      	bmi.n	800a9d0 <_malloc_r+0xd0>
 800a98e:	2a0b      	cmp	r2, #11
 800a990:	d917      	bls.n	800a9c2 <_malloc_r+0xc2>
 800a992:	1961      	adds	r1, r4, r5
 800a994:	42a3      	cmp	r3, r4
 800a996:	6025      	str	r5, [r4, #0]
 800a998:	bf18      	it	ne
 800a99a:	6059      	strne	r1, [r3, #4]
 800a99c:	6863      	ldr	r3, [r4, #4]
 800a99e:	bf08      	it	eq
 800a9a0:	f8c8 1000 	streq.w	r1, [r8]
 800a9a4:	5162      	str	r2, [r4, r5]
 800a9a6:	604b      	str	r3, [r1, #4]
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	f000 f82f 	bl	800aa0c <__malloc_unlock>
 800a9ae:	f104 000b 	add.w	r0, r4, #11
 800a9b2:	1d23      	adds	r3, r4, #4
 800a9b4:	f020 0007 	bic.w	r0, r0, #7
 800a9b8:	1ac2      	subs	r2, r0, r3
 800a9ba:	bf1c      	itt	ne
 800a9bc:	1a1b      	subne	r3, r3, r0
 800a9be:	50a3      	strne	r3, [r4, r2]
 800a9c0:	e7af      	b.n	800a922 <_malloc_r+0x22>
 800a9c2:	6862      	ldr	r2, [r4, #4]
 800a9c4:	42a3      	cmp	r3, r4
 800a9c6:	bf0c      	ite	eq
 800a9c8:	f8c8 2000 	streq.w	r2, [r8]
 800a9cc:	605a      	strne	r2, [r3, #4]
 800a9ce:	e7eb      	b.n	800a9a8 <_malloc_r+0xa8>
 800a9d0:	4623      	mov	r3, r4
 800a9d2:	6864      	ldr	r4, [r4, #4]
 800a9d4:	e7ae      	b.n	800a934 <_malloc_r+0x34>
 800a9d6:	463c      	mov	r4, r7
 800a9d8:	687f      	ldr	r7, [r7, #4]
 800a9da:	e7b6      	b.n	800a94a <_malloc_r+0x4a>
 800a9dc:	461a      	mov	r2, r3
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	42a3      	cmp	r3, r4
 800a9e2:	d1fb      	bne.n	800a9dc <_malloc_r+0xdc>
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	6053      	str	r3, [r2, #4]
 800a9e8:	e7de      	b.n	800a9a8 <_malloc_r+0xa8>
 800a9ea:	230c      	movs	r3, #12
 800a9ec:	6033      	str	r3, [r6, #0]
 800a9ee:	4630      	mov	r0, r6
 800a9f0:	f000 f80c 	bl	800aa0c <__malloc_unlock>
 800a9f4:	e794      	b.n	800a920 <_malloc_r+0x20>
 800a9f6:	6005      	str	r5, [r0, #0]
 800a9f8:	e7d6      	b.n	800a9a8 <_malloc_r+0xa8>
 800a9fa:	bf00      	nop
 800a9fc:	20000968 	.word	0x20000968

0800aa00 <__malloc_lock>:
 800aa00:	4801      	ldr	r0, [pc, #4]	@ (800aa08 <__malloc_lock+0x8>)
 800aa02:	f7ff b88e 	b.w	8009b22 <__retarget_lock_acquire_recursive>
 800aa06:	bf00      	nop
 800aa08:	20000960 	.word	0x20000960

0800aa0c <__malloc_unlock>:
 800aa0c:	4801      	ldr	r0, [pc, #4]	@ (800aa14 <__malloc_unlock+0x8>)
 800aa0e:	f7ff b889 	b.w	8009b24 <__retarget_lock_release_recursive>
 800aa12:	bf00      	nop
 800aa14:	20000960 	.word	0x20000960

0800aa18 <_Balloc>:
 800aa18:	b570      	push	{r4, r5, r6, lr}
 800aa1a:	69c6      	ldr	r6, [r0, #28]
 800aa1c:	4604      	mov	r4, r0
 800aa1e:	460d      	mov	r5, r1
 800aa20:	b976      	cbnz	r6, 800aa40 <_Balloc+0x28>
 800aa22:	2010      	movs	r0, #16
 800aa24:	f7ff ff42 	bl	800a8ac <malloc>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	61e0      	str	r0, [r4, #28]
 800aa2c:	b920      	cbnz	r0, 800aa38 <_Balloc+0x20>
 800aa2e:	4b18      	ldr	r3, [pc, #96]	@ (800aa90 <_Balloc+0x78>)
 800aa30:	4818      	ldr	r0, [pc, #96]	@ (800aa94 <_Balloc+0x7c>)
 800aa32:	216b      	movs	r1, #107	@ 0x6b
 800aa34:	f7ff f886 	bl	8009b44 <__assert_func>
 800aa38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa3c:	6006      	str	r6, [r0, #0]
 800aa3e:	60c6      	str	r6, [r0, #12]
 800aa40:	69e6      	ldr	r6, [r4, #28]
 800aa42:	68f3      	ldr	r3, [r6, #12]
 800aa44:	b183      	cbz	r3, 800aa68 <_Balloc+0x50>
 800aa46:	69e3      	ldr	r3, [r4, #28]
 800aa48:	68db      	ldr	r3, [r3, #12]
 800aa4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa4e:	b9b8      	cbnz	r0, 800aa80 <_Balloc+0x68>
 800aa50:	2101      	movs	r1, #1
 800aa52:	fa01 f605 	lsl.w	r6, r1, r5
 800aa56:	1d72      	adds	r2, r6, #5
 800aa58:	0092      	lsls	r2, r2, #2
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	f000 fda5 	bl	800b5aa <_calloc_r>
 800aa60:	b160      	cbz	r0, 800aa7c <_Balloc+0x64>
 800aa62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa66:	e00e      	b.n	800aa86 <_Balloc+0x6e>
 800aa68:	2221      	movs	r2, #33	@ 0x21
 800aa6a:	2104      	movs	r1, #4
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	f000 fd9c 	bl	800b5aa <_calloc_r>
 800aa72:	69e3      	ldr	r3, [r4, #28]
 800aa74:	60f0      	str	r0, [r6, #12]
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d1e4      	bne.n	800aa46 <_Balloc+0x2e>
 800aa7c:	2000      	movs	r0, #0
 800aa7e:	bd70      	pop	{r4, r5, r6, pc}
 800aa80:	6802      	ldr	r2, [r0, #0]
 800aa82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa86:	2300      	movs	r3, #0
 800aa88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa8c:	e7f7      	b.n	800aa7e <_Balloc+0x66>
 800aa8e:	bf00      	nop
 800aa90:	0800bc64 	.word	0x0800bc64
 800aa94:	0800bdb9 	.word	0x0800bdb9

0800aa98 <_Bfree>:
 800aa98:	b570      	push	{r4, r5, r6, lr}
 800aa9a:	69c6      	ldr	r6, [r0, #28]
 800aa9c:	4605      	mov	r5, r0
 800aa9e:	460c      	mov	r4, r1
 800aaa0:	b976      	cbnz	r6, 800aac0 <_Bfree+0x28>
 800aaa2:	2010      	movs	r0, #16
 800aaa4:	f7ff ff02 	bl	800a8ac <malloc>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	61e8      	str	r0, [r5, #28]
 800aaac:	b920      	cbnz	r0, 800aab8 <_Bfree+0x20>
 800aaae:	4b09      	ldr	r3, [pc, #36]	@ (800aad4 <_Bfree+0x3c>)
 800aab0:	4809      	ldr	r0, [pc, #36]	@ (800aad8 <_Bfree+0x40>)
 800aab2:	218f      	movs	r1, #143	@ 0x8f
 800aab4:	f7ff f846 	bl	8009b44 <__assert_func>
 800aab8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aabc:	6006      	str	r6, [r0, #0]
 800aabe:	60c6      	str	r6, [r0, #12]
 800aac0:	b13c      	cbz	r4, 800aad2 <_Bfree+0x3a>
 800aac2:	69eb      	ldr	r3, [r5, #28]
 800aac4:	6862      	ldr	r2, [r4, #4]
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aacc:	6021      	str	r1, [r4, #0]
 800aace:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aad2:	bd70      	pop	{r4, r5, r6, pc}
 800aad4:	0800bc64 	.word	0x0800bc64
 800aad8:	0800bdb9 	.word	0x0800bdb9

0800aadc <__multadd>:
 800aadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aae0:	690d      	ldr	r5, [r1, #16]
 800aae2:	4607      	mov	r7, r0
 800aae4:	460c      	mov	r4, r1
 800aae6:	461e      	mov	r6, r3
 800aae8:	f101 0c14 	add.w	ip, r1, #20
 800aaec:	2000      	movs	r0, #0
 800aaee:	f8dc 3000 	ldr.w	r3, [ip]
 800aaf2:	b299      	uxth	r1, r3
 800aaf4:	fb02 6101 	mla	r1, r2, r1, r6
 800aaf8:	0c1e      	lsrs	r6, r3, #16
 800aafa:	0c0b      	lsrs	r3, r1, #16
 800aafc:	fb02 3306 	mla	r3, r2, r6, r3
 800ab00:	b289      	uxth	r1, r1
 800ab02:	3001      	adds	r0, #1
 800ab04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab08:	4285      	cmp	r5, r0
 800ab0a:	f84c 1b04 	str.w	r1, [ip], #4
 800ab0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab12:	dcec      	bgt.n	800aaee <__multadd+0x12>
 800ab14:	b30e      	cbz	r6, 800ab5a <__multadd+0x7e>
 800ab16:	68a3      	ldr	r3, [r4, #8]
 800ab18:	42ab      	cmp	r3, r5
 800ab1a:	dc19      	bgt.n	800ab50 <__multadd+0x74>
 800ab1c:	6861      	ldr	r1, [r4, #4]
 800ab1e:	4638      	mov	r0, r7
 800ab20:	3101      	adds	r1, #1
 800ab22:	f7ff ff79 	bl	800aa18 <_Balloc>
 800ab26:	4680      	mov	r8, r0
 800ab28:	b928      	cbnz	r0, 800ab36 <__multadd+0x5a>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	4b0c      	ldr	r3, [pc, #48]	@ (800ab60 <__multadd+0x84>)
 800ab2e:	480d      	ldr	r0, [pc, #52]	@ (800ab64 <__multadd+0x88>)
 800ab30:	21ba      	movs	r1, #186	@ 0xba
 800ab32:	f7ff f807 	bl	8009b44 <__assert_func>
 800ab36:	6922      	ldr	r2, [r4, #16]
 800ab38:	3202      	adds	r2, #2
 800ab3a:	f104 010c 	add.w	r1, r4, #12
 800ab3e:	0092      	lsls	r2, r2, #2
 800ab40:	300c      	adds	r0, #12
 800ab42:	f7fe fff0 	bl	8009b26 <memcpy>
 800ab46:	4621      	mov	r1, r4
 800ab48:	4638      	mov	r0, r7
 800ab4a:	f7ff ffa5 	bl	800aa98 <_Bfree>
 800ab4e:	4644      	mov	r4, r8
 800ab50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab54:	3501      	adds	r5, #1
 800ab56:	615e      	str	r6, [r3, #20]
 800ab58:	6125      	str	r5, [r4, #16]
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab60:	0800bda8 	.word	0x0800bda8
 800ab64:	0800bdb9 	.word	0x0800bdb9

0800ab68 <__hi0bits>:
 800ab68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	bf36      	itet	cc
 800ab70:	0403      	lslcc	r3, r0, #16
 800ab72:	2000      	movcs	r0, #0
 800ab74:	2010      	movcc	r0, #16
 800ab76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ab7a:	bf3c      	itt	cc
 800ab7c:	021b      	lslcc	r3, r3, #8
 800ab7e:	3008      	addcc	r0, #8
 800ab80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab84:	bf3c      	itt	cc
 800ab86:	011b      	lslcc	r3, r3, #4
 800ab88:	3004      	addcc	r0, #4
 800ab8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab8e:	bf3c      	itt	cc
 800ab90:	009b      	lslcc	r3, r3, #2
 800ab92:	3002      	addcc	r0, #2
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	db05      	blt.n	800aba4 <__hi0bits+0x3c>
 800ab98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ab9c:	f100 0001 	add.w	r0, r0, #1
 800aba0:	bf08      	it	eq
 800aba2:	2020      	moveq	r0, #32
 800aba4:	4770      	bx	lr

0800aba6 <__lo0bits>:
 800aba6:	6803      	ldr	r3, [r0, #0]
 800aba8:	4602      	mov	r2, r0
 800abaa:	f013 0007 	ands.w	r0, r3, #7
 800abae:	d00b      	beq.n	800abc8 <__lo0bits+0x22>
 800abb0:	07d9      	lsls	r1, r3, #31
 800abb2:	d421      	bmi.n	800abf8 <__lo0bits+0x52>
 800abb4:	0798      	lsls	r0, r3, #30
 800abb6:	bf49      	itett	mi
 800abb8:	085b      	lsrmi	r3, r3, #1
 800abba:	089b      	lsrpl	r3, r3, #2
 800abbc:	2001      	movmi	r0, #1
 800abbe:	6013      	strmi	r3, [r2, #0]
 800abc0:	bf5c      	itt	pl
 800abc2:	6013      	strpl	r3, [r2, #0]
 800abc4:	2002      	movpl	r0, #2
 800abc6:	4770      	bx	lr
 800abc8:	b299      	uxth	r1, r3
 800abca:	b909      	cbnz	r1, 800abd0 <__lo0bits+0x2a>
 800abcc:	0c1b      	lsrs	r3, r3, #16
 800abce:	2010      	movs	r0, #16
 800abd0:	b2d9      	uxtb	r1, r3
 800abd2:	b909      	cbnz	r1, 800abd8 <__lo0bits+0x32>
 800abd4:	3008      	adds	r0, #8
 800abd6:	0a1b      	lsrs	r3, r3, #8
 800abd8:	0719      	lsls	r1, r3, #28
 800abda:	bf04      	itt	eq
 800abdc:	091b      	lsreq	r3, r3, #4
 800abde:	3004      	addeq	r0, #4
 800abe0:	0799      	lsls	r1, r3, #30
 800abe2:	bf04      	itt	eq
 800abe4:	089b      	lsreq	r3, r3, #2
 800abe6:	3002      	addeq	r0, #2
 800abe8:	07d9      	lsls	r1, r3, #31
 800abea:	d403      	bmi.n	800abf4 <__lo0bits+0x4e>
 800abec:	085b      	lsrs	r3, r3, #1
 800abee:	f100 0001 	add.w	r0, r0, #1
 800abf2:	d003      	beq.n	800abfc <__lo0bits+0x56>
 800abf4:	6013      	str	r3, [r2, #0]
 800abf6:	4770      	bx	lr
 800abf8:	2000      	movs	r0, #0
 800abfa:	4770      	bx	lr
 800abfc:	2020      	movs	r0, #32
 800abfe:	4770      	bx	lr

0800ac00 <__i2b>:
 800ac00:	b510      	push	{r4, lr}
 800ac02:	460c      	mov	r4, r1
 800ac04:	2101      	movs	r1, #1
 800ac06:	f7ff ff07 	bl	800aa18 <_Balloc>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	b928      	cbnz	r0, 800ac1a <__i2b+0x1a>
 800ac0e:	4b05      	ldr	r3, [pc, #20]	@ (800ac24 <__i2b+0x24>)
 800ac10:	4805      	ldr	r0, [pc, #20]	@ (800ac28 <__i2b+0x28>)
 800ac12:	f240 1145 	movw	r1, #325	@ 0x145
 800ac16:	f7fe ff95 	bl	8009b44 <__assert_func>
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	6144      	str	r4, [r0, #20]
 800ac1e:	6103      	str	r3, [r0, #16]
 800ac20:	bd10      	pop	{r4, pc}
 800ac22:	bf00      	nop
 800ac24:	0800bda8 	.word	0x0800bda8
 800ac28:	0800bdb9 	.word	0x0800bdb9

0800ac2c <__multiply>:
 800ac2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac30:	4614      	mov	r4, r2
 800ac32:	690a      	ldr	r2, [r1, #16]
 800ac34:	6923      	ldr	r3, [r4, #16]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	bfa8      	it	ge
 800ac3a:	4623      	movge	r3, r4
 800ac3c:	460f      	mov	r7, r1
 800ac3e:	bfa4      	itt	ge
 800ac40:	460c      	movge	r4, r1
 800ac42:	461f      	movge	r7, r3
 800ac44:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ac48:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ac4c:	68a3      	ldr	r3, [r4, #8]
 800ac4e:	6861      	ldr	r1, [r4, #4]
 800ac50:	eb0a 0609 	add.w	r6, sl, r9
 800ac54:	42b3      	cmp	r3, r6
 800ac56:	b085      	sub	sp, #20
 800ac58:	bfb8      	it	lt
 800ac5a:	3101      	addlt	r1, #1
 800ac5c:	f7ff fedc 	bl	800aa18 <_Balloc>
 800ac60:	b930      	cbnz	r0, 800ac70 <__multiply+0x44>
 800ac62:	4602      	mov	r2, r0
 800ac64:	4b44      	ldr	r3, [pc, #272]	@ (800ad78 <__multiply+0x14c>)
 800ac66:	4845      	ldr	r0, [pc, #276]	@ (800ad7c <__multiply+0x150>)
 800ac68:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ac6c:	f7fe ff6a 	bl	8009b44 <__assert_func>
 800ac70:	f100 0514 	add.w	r5, r0, #20
 800ac74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ac78:	462b      	mov	r3, r5
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	4543      	cmp	r3, r8
 800ac7e:	d321      	bcc.n	800acc4 <__multiply+0x98>
 800ac80:	f107 0114 	add.w	r1, r7, #20
 800ac84:	f104 0214 	add.w	r2, r4, #20
 800ac88:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ac8c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ac90:	9302      	str	r3, [sp, #8]
 800ac92:	1b13      	subs	r3, r2, r4
 800ac94:	3b15      	subs	r3, #21
 800ac96:	f023 0303 	bic.w	r3, r3, #3
 800ac9a:	3304      	adds	r3, #4
 800ac9c:	f104 0715 	add.w	r7, r4, #21
 800aca0:	42ba      	cmp	r2, r7
 800aca2:	bf38      	it	cc
 800aca4:	2304      	movcc	r3, #4
 800aca6:	9301      	str	r3, [sp, #4]
 800aca8:	9b02      	ldr	r3, [sp, #8]
 800acaa:	9103      	str	r1, [sp, #12]
 800acac:	428b      	cmp	r3, r1
 800acae:	d80c      	bhi.n	800acca <__multiply+0x9e>
 800acb0:	2e00      	cmp	r6, #0
 800acb2:	dd03      	ble.n	800acbc <__multiply+0x90>
 800acb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d05b      	beq.n	800ad74 <__multiply+0x148>
 800acbc:	6106      	str	r6, [r0, #16]
 800acbe:	b005      	add	sp, #20
 800acc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acc4:	f843 2b04 	str.w	r2, [r3], #4
 800acc8:	e7d8      	b.n	800ac7c <__multiply+0x50>
 800acca:	f8b1 a000 	ldrh.w	sl, [r1]
 800acce:	f1ba 0f00 	cmp.w	sl, #0
 800acd2:	d024      	beq.n	800ad1e <__multiply+0xf2>
 800acd4:	f104 0e14 	add.w	lr, r4, #20
 800acd8:	46a9      	mov	r9, r5
 800acda:	f04f 0c00 	mov.w	ip, #0
 800acde:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ace2:	f8d9 3000 	ldr.w	r3, [r9]
 800ace6:	fa1f fb87 	uxth.w	fp, r7
 800acea:	b29b      	uxth	r3, r3
 800acec:	fb0a 330b 	mla	r3, sl, fp, r3
 800acf0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800acf4:	f8d9 7000 	ldr.w	r7, [r9]
 800acf8:	4463      	add	r3, ip
 800acfa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800acfe:	fb0a c70b 	mla	r7, sl, fp, ip
 800ad02:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ad0c:	4572      	cmp	r2, lr
 800ad0e:	f849 3b04 	str.w	r3, [r9], #4
 800ad12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ad16:	d8e2      	bhi.n	800acde <__multiply+0xb2>
 800ad18:	9b01      	ldr	r3, [sp, #4]
 800ad1a:	f845 c003 	str.w	ip, [r5, r3]
 800ad1e:	9b03      	ldr	r3, [sp, #12]
 800ad20:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ad24:	3104      	adds	r1, #4
 800ad26:	f1b9 0f00 	cmp.w	r9, #0
 800ad2a:	d021      	beq.n	800ad70 <__multiply+0x144>
 800ad2c:	682b      	ldr	r3, [r5, #0]
 800ad2e:	f104 0c14 	add.w	ip, r4, #20
 800ad32:	46ae      	mov	lr, r5
 800ad34:	f04f 0a00 	mov.w	sl, #0
 800ad38:	f8bc b000 	ldrh.w	fp, [ip]
 800ad3c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ad40:	fb09 770b 	mla	r7, r9, fp, r7
 800ad44:	4457      	add	r7, sl
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ad4c:	f84e 3b04 	str.w	r3, [lr], #4
 800ad50:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ad54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad58:	f8be 3000 	ldrh.w	r3, [lr]
 800ad5c:	fb09 330a 	mla	r3, r9, sl, r3
 800ad60:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ad64:	4562      	cmp	r2, ip
 800ad66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad6a:	d8e5      	bhi.n	800ad38 <__multiply+0x10c>
 800ad6c:	9f01      	ldr	r7, [sp, #4]
 800ad6e:	51eb      	str	r3, [r5, r7]
 800ad70:	3504      	adds	r5, #4
 800ad72:	e799      	b.n	800aca8 <__multiply+0x7c>
 800ad74:	3e01      	subs	r6, #1
 800ad76:	e79b      	b.n	800acb0 <__multiply+0x84>
 800ad78:	0800bda8 	.word	0x0800bda8
 800ad7c:	0800bdb9 	.word	0x0800bdb9

0800ad80 <__pow5mult>:
 800ad80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad84:	4615      	mov	r5, r2
 800ad86:	f012 0203 	ands.w	r2, r2, #3
 800ad8a:	4607      	mov	r7, r0
 800ad8c:	460e      	mov	r6, r1
 800ad8e:	d007      	beq.n	800ada0 <__pow5mult+0x20>
 800ad90:	4c25      	ldr	r4, [pc, #148]	@ (800ae28 <__pow5mult+0xa8>)
 800ad92:	3a01      	subs	r2, #1
 800ad94:	2300      	movs	r3, #0
 800ad96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad9a:	f7ff fe9f 	bl	800aadc <__multadd>
 800ad9e:	4606      	mov	r6, r0
 800ada0:	10ad      	asrs	r5, r5, #2
 800ada2:	d03d      	beq.n	800ae20 <__pow5mult+0xa0>
 800ada4:	69fc      	ldr	r4, [r7, #28]
 800ada6:	b97c      	cbnz	r4, 800adc8 <__pow5mult+0x48>
 800ada8:	2010      	movs	r0, #16
 800adaa:	f7ff fd7f 	bl	800a8ac <malloc>
 800adae:	4602      	mov	r2, r0
 800adb0:	61f8      	str	r0, [r7, #28]
 800adb2:	b928      	cbnz	r0, 800adc0 <__pow5mult+0x40>
 800adb4:	4b1d      	ldr	r3, [pc, #116]	@ (800ae2c <__pow5mult+0xac>)
 800adb6:	481e      	ldr	r0, [pc, #120]	@ (800ae30 <__pow5mult+0xb0>)
 800adb8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800adbc:	f7fe fec2 	bl	8009b44 <__assert_func>
 800adc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800adc4:	6004      	str	r4, [r0, #0]
 800adc6:	60c4      	str	r4, [r0, #12]
 800adc8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800adcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800add0:	b94c      	cbnz	r4, 800ade6 <__pow5mult+0x66>
 800add2:	f240 2171 	movw	r1, #625	@ 0x271
 800add6:	4638      	mov	r0, r7
 800add8:	f7ff ff12 	bl	800ac00 <__i2b>
 800addc:	2300      	movs	r3, #0
 800adde:	f8c8 0008 	str.w	r0, [r8, #8]
 800ade2:	4604      	mov	r4, r0
 800ade4:	6003      	str	r3, [r0, #0]
 800ade6:	f04f 0900 	mov.w	r9, #0
 800adea:	07eb      	lsls	r3, r5, #31
 800adec:	d50a      	bpl.n	800ae04 <__pow5mult+0x84>
 800adee:	4631      	mov	r1, r6
 800adf0:	4622      	mov	r2, r4
 800adf2:	4638      	mov	r0, r7
 800adf4:	f7ff ff1a 	bl	800ac2c <__multiply>
 800adf8:	4631      	mov	r1, r6
 800adfa:	4680      	mov	r8, r0
 800adfc:	4638      	mov	r0, r7
 800adfe:	f7ff fe4b 	bl	800aa98 <_Bfree>
 800ae02:	4646      	mov	r6, r8
 800ae04:	106d      	asrs	r5, r5, #1
 800ae06:	d00b      	beq.n	800ae20 <__pow5mult+0xa0>
 800ae08:	6820      	ldr	r0, [r4, #0]
 800ae0a:	b938      	cbnz	r0, 800ae1c <__pow5mult+0x9c>
 800ae0c:	4622      	mov	r2, r4
 800ae0e:	4621      	mov	r1, r4
 800ae10:	4638      	mov	r0, r7
 800ae12:	f7ff ff0b 	bl	800ac2c <__multiply>
 800ae16:	6020      	str	r0, [r4, #0]
 800ae18:	f8c0 9000 	str.w	r9, [r0]
 800ae1c:	4604      	mov	r4, r0
 800ae1e:	e7e4      	b.n	800adea <__pow5mult+0x6a>
 800ae20:	4630      	mov	r0, r6
 800ae22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae26:	bf00      	nop
 800ae28:	0800be14 	.word	0x0800be14
 800ae2c:	0800bc64 	.word	0x0800bc64
 800ae30:	0800bdb9 	.word	0x0800bdb9

0800ae34 <__lshift>:
 800ae34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae38:	460c      	mov	r4, r1
 800ae3a:	6849      	ldr	r1, [r1, #4]
 800ae3c:	6923      	ldr	r3, [r4, #16]
 800ae3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae42:	68a3      	ldr	r3, [r4, #8]
 800ae44:	4607      	mov	r7, r0
 800ae46:	4691      	mov	r9, r2
 800ae48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae4c:	f108 0601 	add.w	r6, r8, #1
 800ae50:	42b3      	cmp	r3, r6
 800ae52:	db0b      	blt.n	800ae6c <__lshift+0x38>
 800ae54:	4638      	mov	r0, r7
 800ae56:	f7ff fddf 	bl	800aa18 <_Balloc>
 800ae5a:	4605      	mov	r5, r0
 800ae5c:	b948      	cbnz	r0, 800ae72 <__lshift+0x3e>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	4b28      	ldr	r3, [pc, #160]	@ (800af04 <__lshift+0xd0>)
 800ae62:	4829      	ldr	r0, [pc, #164]	@ (800af08 <__lshift+0xd4>)
 800ae64:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ae68:	f7fe fe6c 	bl	8009b44 <__assert_func>
 800ae6c:	3101      	adds	r1, #1
 800ae6e:	005b      	lsls	r3, r3, #1
 800ae70:	e7ee      	b.n	800ae50 <__lshift+0x1c>
 800ae72:	2300      	movs	r3, #0
 800ae74:	f100 0114 	add.w	r1, r0, #20
 800ae78:	f100 0210 	add.w	r2, r0, #16
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	4553      	cmp	r3, sl
 800ae80:	db33      	blt.n	800aeea <__lshift+0xb6>
 800ae82:	6920      	ldr	r0, [r4, #16]
 800ae84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae88:	f104 0314 	add.w	r3, r4, #20
 800ae8c:	f019 091f 	ands.w	r9, r9, #31
 800ae90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ae98:	d02b      	beq.n	800aef2 <__lshift+0xbe>
 800ae9a:	f1c9 0e20 	rsb	lr, r9, #32
 800ae9e:	468a      	mov	sl, r1
 800aea0:	2200      	movs	r2, #0
 800aea2:	6818      	ldr	r0, [r3, #0]
 800aea4:	fa00 f009 	lsl.w	r0, r0, r9
 800aea8:	4310      	orrs	r0, r2
 800aeaa:	f84a 0b04 	str.w	r0, [sl], #4
 800aeae:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeb2:	459c      	cmp	ip, r3
 800aeb4:	fa22 f20e 	lsr.w	r2, r2, lr
 800aeb8:	d8f3      	bhi.n	800aea2 <__lshift+0x6e>
 800aeba:	ebac 0304 	sub.w	r3, ip, r4
 800aebe:	3b15      	subs	r3, #21
 800aec0:	f023 0303 	bic.w	r3, r3, #3
 800aec4:	3304      	adds	r3, #4
 800aec6:	f104 0015 	add.w	r0, r4, #21
 800aeca:	4584      	cmp	ip, r0
 800aecc:	bf38      	it	cc
 800aece:	2304      	movcc	r3, #4
 800aed0:	50ca      	str	r2, [r1, r3]
 800aed2:	b10a      	cbz	r2, 800aed8 <__lshift+0xa4>
 800aed4:	f108 0602 	add.w	r6, r8, #2
 800aed8:	3e01      	subs	r6, #1
 800aeda:	4638      	mov	r0, r7
 800aedc:	612e      	str	r6, [r5, #16]
 800aede:	4621      	mov	r1, r4
 800aee0:	f7ff fdda 	bl	800aa98 <_Bfree>
 800aee4:	4628      	mov	r0, r5
 800aee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeea:	f842 0f04 	str.w	r0, [r2, #4]!
 800aeee:	3301      	adds	r3, #1
 800aef0:	e7c5      	b.n	800ae7e <__lshift+0x4a>
 800aef2:	3904      	subs	r1, #4
 800aef4:	f853 2b04 	ldr.w	r2, [r3], #4
 800aef8:	f841 2f04 	str.w	r2, [r1, #4]!
 800aefc:	459c      	cmp	ip, r3
 800aefe:	d8f9      	bhi.n	800aef4 <__lshift+0xc0>
 800af00:	e7ea      	b.n	800aed8 <__lshift+0xa4>
 800af02:	bf00      	nop
 800af04:	0800bda8 	.word	0x0800bda8
 800af08:	0800bdb9 	.word	0x0800bdb9

0800af0c <__mcmp>:
 800af0c:	690a      	ldr	r2, [r1, #16]
 800af0e:	4603      	mov	r3, r0
 800af10:	6900      	ldr	r0, [r0, #16]
 800af12:	1a80      	subs	r0, r0, r2
 800af14:	b530      	push	{r4, r5, lr}
 800af16:	d10e      	bne.n	800af36 <__mcmp+0x2a>
 800af18:	3314      	adds	r3, #20
 800af1a:	3114      	adds	r1, #20
 800af1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800af20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800af24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800af28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800af2c:	4295      	cmp	r5, r2
 800af2e:	d003      	beq.n	800af38 <__mcmp+0x2c>
 800af30:	d205      	bcs.n	800af3e <__mcmp+0x32>
 800af32:	f04f 30ff 	mov.w	r0, #4294967295
 800af36:	bd30      	pop	{r4, r5, pc}
 800af38:	42a3      	cmp	r3, r4
 800af3a:	d3f3      	bcc.n	800af24 <__mcmp+0x18>
 800af3c:	e7fb      	b.n	800af36 <__mcmp+0x2a>
 800af3e:	2001      	movs	r0, #1
 800af40:	e7f9      	b.n	800af36 <__mcmp+0x2a>
	...

0800af44 <__mdiff>:
 800af44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af48:	4689      	mov	r9, r1
 800af4a:	4606      	mov	r6, r0
 800af4c:	4611      	mov	r1, r2
 800af4e:	4648      	mov	r0, r9
 800af50:	4614      	mov	r4, r2
 800af52:	f7ff ffdb 	bl	800af0c <__mcmp>
 800af56:	1e05      	subs	r5, r0, #0
 800af58:	d112      	bne.n	800af80 <__mdiff+0x3c>
 800af5a:	4629      	mov	r1, r5
 800af5c:	4630      	mov	r0, r6
 800af5e:	f7ff fd5b 	bl	800aa18 <_Balloc>
 800af62:	4602      	mov	r2, r0
 800af64:	b928      	cbnz	r0, 800af72 <__mdiff+0x2e>
 800af66:	4b3f      	ldr	r3, [pc, #252]	@ (800b064 <__mdiff+0x120>)
 800af68:	f240 2137 	movw	r1, #567	@ 0x237
 800af6c:	483e      	ldr	r0, [pc, #248]	@ (800b068 <__mdiff+0x124>)
 800af6e:	f7fe fde9 	bl	8009b44 <__assert_func>
 800af72:	2301      	movs	r3, #1
 800af74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800af78:	4610      	mov	r0, r2
 800af7a:	b003      	add	sp, #12
 800af7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af80:	bfbc      	itt	lt
 800af82:	464b      	movlt	r3, r9
 800af84:	46a1      	movlt	r9, r4
 800af86:	4630      	mov	r0, r6
 800af88:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800af8c:	bfba      	itte	lt
 800af8e:	461c      	movlt	r4, r3
 800af90:	2501      	movlt	r5, #1
 800af92:	2500      	movge	r5, #0
 800af94:	f7ff fd40 	bl	800aa18 <_Balloc>
 800af98:	4602      	mov	r2, r0
 800af9a:	b918      	cbnz	r0, 800afa4 <__mdiff+0x60>
 800af9c:	4b31      	ldr	r3, [pc, #196]	@ (800b064 <__mdiff+0x120>)
 800af9e:	f240 2145 	movw	r1, #581	@ 0x245
 800afa2:	e7e3      	b.n	800af6c <__mdiff+0x28>
 800afa4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800afa8:	6926      	ldr	r6, [r4, #16]
 800afaa:	60c5      	str	r5, [r0, #12]
 800afac:	f109 0310 	add.w	r3, r9, #16
 800afb0:	f109 0514 	add.w	r5, r9, #20
 800afb4:	f104 0e14 	add.w	lr, r4, #20
 800afb8:	f100 0b14 	add.w	fp, r0, #20
 800afbc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800afc0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800afc4:	9301      	str	r3, [sp, #4]
 800afc6:	46d9      	mov	r9, fp
 800afc8:	f04f 0c00 	mov.w	ip, #0
 800afcc:	9b01      	ldr	r3, [sp, #4]
 800afce:	f85e 0b04 	ldr.w	r0, [lr], #4
 800afd2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800afd6:	9301      	str	r3, [sp, #4]
 800afd8:	fa1f f38a 	uxth.w	r3, sl
 800afdc:	4619      	mov	r1, r3
 800afde:	b283      	uxth	r3, r0
 800afe0:	1acb      	subs	r3, r1, r3
 800afe2:	0c00      	lsrs	r0, r0, #16
 800afe4:	4463      	add	r3, ip
 800afe6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800afea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800afee:	b29b      	uxth	r3, r3
 800aff0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aff4:	4576      	cmp	r6, lr
 800aff6:	f849 3b04 	str.w	r3, [r9], #4
 800affa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800affe:	d8e5      	bhi.n	800afcc <__mdiff+0x88>
 800b000:	1b33      	subs	r3, r6, r4
 800b002:	3b15      	subs	r3, #21
 800b004:	f023 0303 	bic.w	r3, r3, #3
 800b008:	3415      	adds	r4, #21
 800b00a:	3304      	adds	r3, #4
 800b00c:	42a6      	cmp	r6, r4
 800b00e:	bf38      	it	cc
 800b010:	2304      	movcc	r3, #4
 800b012:	441d      	add	r5, r3
 800b014:	445b      	add	r3, fp
 800b016:	461e      	mov	r6, r3
 800b018:	462c      	mov	r4, r5
 800b01a:	4544      	cmp	r4, r8
 800b01c:	d30e      	bcc.n	800b03c <__mdiff+0xf8>
 800b01e:	f108 0103 	add.w	r1, r8, #3
 800b022:	1b49      	subs	r1, r1, r5
 800b024:	f021 0103 	bic.w	r1, r1, #3
 800b028:	3d03      	subs	r5, #3
 800b02a:	45a8      	cmp	r8, r5
 800b02c:	bf38      	it	cc
 800b02e:	2100      	movcc	r1, #0
 800b030:	440b      	add	r3, r1
 800b032:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b036:	b191      	cbz	r1, 800b05e <__mdiff+0x11a>
 800b038:	6117      	str	r7, [r2, #16]
 800b03a:	e79d      	b.n	800af78 <__mdiff+0x34>
 800b03c:	f854 1b04 	ldr.w	r1, [r4], #4
 800b040:	46e6      	mov	lr, ip
 800b042:	0c08      	lsrs	r0, r1, #16
 800b044:	fa1c fc81 	uxtah	ip, ip, r1
 800b048:	4471      	add	r1, lr
 800b04a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b04e:	b289      	uxth	r1, r1
 800b050:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b054:	f846 1b04 	str.w	r1, [r6], #4
 800b058:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b05c:	e7dd      	b.n	800b01a <__mdiff+0xd6>
 800b05e:	3f01      	subs	r7, #1
 800b060:	e7e7      	b.n	800b032 <__mdiff+0xee>
 800b062:	bf00      	nop
 800b064:	0800bda8 	.word	0x0800bda8
 800b068:	0800bdb9 	.word	0x0800bdb9

0800b06c <__d2b>:
 800b06c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b070:	460f      	mov	r7, r1
 800b072:	2101      	movs	r1, #1
 800b074:	ec59 8b10 	vmov	r8, r9, d0
 800b078:	4616      	mov	r6, r2
 800b07a:	f7ff fccd 	bl	800aa18 <_Balloc>
 800b07e:	4604      	mov	r4, r0
 800b080:	b930      	cbnz	r0, 800b090 <__d2b+0x24>
 800b082:	4602      	mov	r2, r0
 800b084:	4b23      	ldr	r3, [pc, #140]	@ (800b114 <__d2b+0xa8>)
 800b086:	4824      	ldr	r0, [pc, #144]	@ (800b118 <__d2b+0xac>)
 800b088:	f240 310f 	movw	r1, #783	@ 0x30f
 800b08c:	f7fe fd5a 	bl	8009b44 <__assert_func>
 800b090:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b094:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b098:	b10d      	cbz	r5, 800b09e <__d2b+0x32>
 800b09a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b09e:	9301      	str	r3, [sp, #4]
 800b0a0:	f1b8 0300 	subs.w	r3, r8, #0
 800b0a4:	d023      	beq.n	800b0ee <__d2b+0x82>
 800b0a6:	4668      	mov	r0, sp
 800b0a8:	9300      	str	r3, [sp, #0]
 800b0aa:	f7ff fd7c 	bl	800aba6 <__lo0bits>
 800b0ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b0b2:	b1d0      	cbz	r0, 800b0ea <__d2b+0x7e>
 800b0b4:	f1c0 0320 	rsb	r3, r0, #32
 800b0b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b0bc:	430b      	orrs	r3, r1
 800b0be:	40c2      	lsrs	r2, r0
 800b0c0:	6163      	str	r3, [r4, #20]
 800b0c2:	9201      	str	r2, [sp, #4]
 800b0c4:	9b01      	ldr	r3, [sp, #4]
 800b0c6:	61a3      	str	r3, [r4, #24]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	bf0c      	ite	eq
 800b0cc:	2201      	moveq	r2, #1
 800b0ce:	2202      	movne	r2, #2
 800b0d0:	6122      	str	r2, [r4, #16]
 800b0d2:	b1a5      	cbz	r5, 800b0fe <__d2b+0x92>
 800b0d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b0d8:	4405      	add	r5, r0
 800b0da:	603d      	str	r5, [r7, #0]
 800b0dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b0e0:	6030      	str	r0, [r6, #0]
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	b003      	add	sp, #12
 800b0e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0ea:	6161      	str	r1, [r4, #20]
 800b0ec:	e7ea      	b.n	800b0c4 <__d2b+0x58>
 800b0ee:	a801      	add	r0, sp, #4
 800b0f0:	f7ff fd59 	bl	800aba6 <__lo0bits>
 800b0f4:	9b01      	ldr	r3, [sp, #4]
 800b0f6:	6163      	str	r3, [r4, #20]
 800b0f8:	3020      	adds	r0, #32
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	e7e8      	b.n	800b0d0 <__d2b+0x64>
 800b0fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b102:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b106:	6038      	str	r0, [r7, #0]
 800b108:	6918      	ldr	r0, [r3, #16]
 800b10a:	f7ff fd2d 	bl	800ab68 <__hi0bits>
 800b10e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b112:	e7e5      	b.n	800b0e0 <__d2b+0x74>
 800b114:	0800bda8 	.word	0x0800bda8
 800b118:	0800bdb9 	.word	0x0800bdb9

0800b11c <__ssputs_r>:
 800b11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b120:	688e      	ldr	r6, [r1, #8]
 800b122:	461f      	mov	r7, r3
 800b124:	42be      	cmp	r6, r7
 800b126:	680b      	ldr	r3, [r1, #0]
 800b128:	4682      	mov	sl, r0
 800b12a:	460c      	mov	r4, r1
 800b12c:	4690      	mov	r8, r2
 800b12e:	d82d      	bhi.n	800b18c <__ssputs_r+0x70>
 800b130:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b134:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b138:	d026      	beq.n	800b188 <__ssputs_r+0x6c>
 800b13a:	6965      	ldr	r5, [r4, #20]
 800b13c:	6909      	ldr	r1, [r1, #16]
 800b13e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b142:	eba3 0901 	sub.w	r9, r3, r1
 800b146:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b14a:	1c7b      	adds	r3, r7, #1
 800b14c:	444b      	add	r3, r9
 800b14e:	106d      	asrs	r5, r5, #1
 800b150:	429d      	cmp	r5, r3
 800b152:	bf38      	it	cc
 800b154:	461d      	movcc	r5, r3
 800b156:	0553      	lsls	r3, r2, #21
 800b158:	d527      	bpl.n	800b1aa <__ssputs_r+0x8e>
 800b15a:	4629      	mov	r1, r5
 800b15c:	f7ff fbd0 	bl	800a900 <_malloc_r>
 800b160:	4606      	mov	r6, r0
 800b162:	b360      	cbz	r0, 800b1be <__ssputs_r+0xa2>
 800b164:	6921      	ldr	r1, [r4, #16]
 800b166:	464a      	mov	r2, r9
 800b168:	f7fe fcdd 	bl	8009b26 <memcpy>
 800b16c:	89a3      	ldrh	r3, [r4, #12]
 800b16e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b176:	81a3      	strh	r3, [r4, #12]
 800b178:	6126      	str	r6, [r4, #16]
 800b17a:	6165      	str	r5, [r4, #20]
 800b17c:	444e      	add	r6, r9
 800b17e:	eba5 0509 	sub.w	r5, r5, r9
 800b182:	6026      	str	r6, [r4, #0]
 800b184:	60a5      	str	r5, [r4, #8]
 800b186:	463e      	mov	r6, r7
 800b188:	42be      	cmp	r6, r7
 800b18a:	d900      	bls.n	800b18e <__ssputs_r+0x72>
 800b18c:	463e      	mov	r6, r7
 800b18e:	6820      	ldr	r0, [r4, #0]
 800b190:	4632      	mov	r2, r6
 800b192:	4641      	mov	r1, r8
 800b194:	f000 f9d8 	bl	800b548 <memmove>
 800b198:	68a3      	ldr	r3, [r4, #8]
 800b19a:	1b9b      	subs	r3, r3, r6
 800b19c:	60a3      	str	r3, [r4, #8]
 800b19e:	6823      	ldr	r3, [r4, #0]
 800b1a0:	4433      	add	r3, r6
 800b1a2:	6023      	str	r3, [r4, #0]
 800b1a4:	2000      	movs	r0, #0
 800b1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1aa:	462a      	mov	r2, r5
 800b1ac:	f000 fa23 	bl	800b5f6 <_realloc_r>
 800b1b0:	4606      	mov	r6, r0
 800b1b2:	2800      	cmp	r0, #0
 800b1b4:	d1e0      	bne.n	800b178 <__ssputs_r+0x5c>
 800b1b6:	6921      	ldr	r1, [r4, #16]
 800b1b8:	4650      	mov	r0, sl
 800b1ba:	f7ff fb2d 	bl	800a818 <_free_r>
 800b1be:	230c      	movs	r3, #12
 800b1c0:	f8ca 3000 	str.w	r3, [sl]
 800b1c4:	89a3      	ldrh	r3, [r4, #12]
 800b1c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1ca:	81a3      	strh	r3, [r4, #12]
 800b1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d0:	e7e9      	b.n	800b1a6 <__ssputs_r+0x8a>
	...

0800b1d4 <_svfiprintf_r>:
 800b1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d8:	4698      	mov	r8, r3
 800b1da:	898b      	ldrh	r3, [r1, #12]
 800b1dc:	061b      	lsls	r3, r3, #24
 800b1de:	b09d      	sub	sp, #116	@ 0x74
 800b1e0:	4607      	mov	r7, r0
 800b1e2:	460d      	mov	r5, r1
 800b1e4:	4614      	mov	r4, r2
 800b1e6:	d510      	bpl.n	800b20a <_svfiprintf_r+0x36>
 800b1e8:	690b      	ldr	r3, [r1, #16]
 800b1ea:	b973      	cbnz	r3, 800b20a <_svfiprintf_r+0x36>
 800b1ec:	2140      	movs	r1, #64	@ 0x40
 800b1ee:	f7ff fb87 	bl	800a900 <_malloc_r>
 800b1f2:	6028      	str	r0, [r5, #0]
 800b1f4:	6128      	str	r0, [r5, #16]
 800b1f6:	b930      	cbnz	r0, 800b206 <_svfiprintf_r+0x32>
 800b1f8:	230c      	movs	r3, #12
 800b1fa:	603b      	str	r3, [r7, #0]
 800b1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b200:	b01d      	add	sp, #116	@ 0x74
 800b202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b206:	2340      	movs	r3, #64	@ 0x40
 800b208:	616b      	str	r3, [r5, #20]
 800b20a:	2300      	movs	r3, #0
 800b20c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b20e:	2320      	movs	r3, #32
 800b210:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b214:	f8cd 800c 	str.w	r8, [sp, #12]
 800b218:	2330      	movs	r3, #48	@ 0x30
 800b21a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b3b8 <_svfiprintf_r+0x1e4>
 800b21e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b222:	f04f 0901 	mov.w	r9, #1
 800b226:	4623      	mov	r3, r4
 800b228:	469a      	mov	sl, r3
 800b22a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b22e:	b10a      	cbz	r2, 800b234 <_svfiprintf_r+0x60>
 800b230:	2a25      	cmp	r2, #37	@ 0x25
 800b232:	d1f9      	bne.n	800b228 <_svfiprintf_r+0x54>
 800b234:	ebba 0b04 	subs.w	fp, sl, r4
 800b238:	d00b      	beq.n	800b252 <_svfiprintf_r+0x7e>
 800b23a:	465b      	mov	r3, fp
 800b23c:	4622      	mov	r2, r4
 800b23e:	4629      	mov	r1, r5
 800b240:	4638      	mov	r0, r7
 800b242:	f7ff ff6b 	bl	800b11c <__ssputs_r>
 800b246:	3001      	adds	r0, #1
 800b248:	f000 80a7 	beq.w	800b39a <_svfiprintf_r+0x1c6>
 800b24c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b24e:	445a      	add	r2, fp
 800b250:	9209      	str	r2, [sp, #36]	@ 0x24
 800b252:	f89a 3000 	ldrb.w	r3, [sl]
 800b256:	2b00      	cmp	r3, #0
 800b258:	f000 809f 	beq.w	800b39a <_svfiprintf_r+0x1c6>
 800b25c:	2300      	movs	r3, #0
 800b25e:	f04f 32ff 	mov.w	r2, #4294967295
 800b262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b266:	f10a 0a01 	add.w	sl, sl, #1
 800b26a:	9304      	str	r3, [sp, #16]
 800b26c:	9307      	str	r3, [sp, #28]
 800b26e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b272:	931a      	str	r3, [sp, #104]	@ 0x68
 800b274:	4654      	mov	r4, sl
 800b276:	2205      	movs	r2, #5
 800b278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b27c:	484e      	ldr	r0, [pc, #312]	@ (800b3b8 <_svfiprintf_r+0x1e4>)
 800b27e:	f7f4 ffa7 	bl	80001d0 <memchr>
 800b282:	9a04      	ldr	r2, [sp, #16]
 800b284:	b9d8      	cbnz	r0, 800b2be <_svfiprintf_r+0xea>
 800b286:	06d0      	lsls	r0, r2, #27
 800b288:	bf44      	itt	mi
 800b28a:	2320      	movmi	r3, #32
 800b28c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b290:	0711      	lsls	r1, r2, #28
 800b292:	bf44      	itt	mi
 800b294:	232b      	movmi	r3, #43	@ 0x2b
 800b296:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b29a:	f89a 3000 	ldrb.w	r3, [sl]
 800b29e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2a0:	d015      	beq.n	800b2ce <_svfiprintf_r+0xfa>
 800b2a2:	9a07      	ldr	r2, [sp, #28]
 800b2a4:	4654      	mov	r4, sl
 800b2a6:	2000      	movs	r0, #0
 800b2a8:	f04f 0c0a 	mov.w	ip, #10
 800b2ac:	4621      	mov	r1, r4
 800b2ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2b2:	3b30      	subs	r3, #48	@ 0x30
 800b2b4:	2b09      	cmp	r3, #9
 800b2b6:	d94b      	bls.n	800b350 <_svfiprintf_r+0x17c>
 800b2b8:	b1b0      	cbz	r0, 800b2e8 <_svfiprintf_r+0x114>
 800b2ba:	9207      	str	r2, [sp, #28]
 800b2bc:	e014      	b.n	800b2e8 <_svfiprintf_r+0x114>
 800b2be:	eba0 0308 	sub.w	r3, r0, r8
 800b2c2:	fa09 f303 	lsl.w	r3, r9, r3
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	9304      	str	r3, [sp, #16]
 800b2ca:	46a2      	mov	sl, r4
 800b2cc:	e7d2      	b.n	800b274 <_svfiprintf_r+0xa0>
 800b2ce:	9b03      	ldr	r3, [sp, #12]
 800b2d0:	1d19      	adds	r1, r3, #4
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	9103      	str	r1, [sp, #12]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	bfbb      	ittet	lt
 800b2da:	425b      	neglt	r3, r3
 800b2dc:	f042 0202 	orrlt.w	r2, r2, #2
 800b2e0:	9307      	strge	r3, [sp, #28]
 800b2e2:	9307      	strlt	r3, [sp, #28]
 800b2e4:	bfb8      	it	lt
 800b2e6:	9204      	strlt	r2, [sp, #16]
 800b2e8:	7823      	ldrb	r3, [r4, #0]
 800b2ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2ec:	d10a      	bne.n	800b304 <_svfiprintf_r+0x130>
 800b2ee:	7863      	ldrb	r3, [r4, #1]
 800b2f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2f2:	d132      	bne.n	800b35a <_svfiprintf_r+0x186>
 800b2f4:	9b03      	ldr	r3, [sp, #12]
 800b2f6:	1d1a      	adds	r2, r3, #4
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	9203      	str	r2, [sp, #12]
 800b2fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b300:	3402      	adds	r4, #2
 800b302:	9305      	str	r3, [sp, #20]
 800b304:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b3c8 <_svfiprintf_r+0x1f4>
 800b308:	7821      	ldrb	r1, [r4, #0]
 800b30a:	2203      	movs	r2, #3
 800b30c:	4650      	mov	r0, sl
 800b30e:	f7f4 ff5f 	bl	80001d0 <memchr>
 800b312:	b138      	cbz	r0, 800b324 <_svfiprintf_r+0x150>
 800b314:	9b04      	ldr	r3, [sp, #16]
 800b316:	eba0 000a 	sub.w	r0, r0, sl
 800b31a:	2240      	movs	r2, #64	@ 0x40
 800b31c:	4082      	lsls	r2, r0
 800b31e:	4313      	orrs	r3, r2
 800b320:	3401      	adds	r4, #1
 800b322:	9304      	str	r3, [sp, #16]
 800b324:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b328:	4824      	ldr	r0, [pc, #144]	@ (800b3bc <_svfiprintf_r+0x1e8>)
 800b32a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b32e:	2206      	movs	r2, #6
 800b330:	f7f4 ff4e 	bl	80001d0 <memchr>
 800b334:	2800      	cmp	r0, #0
 800b336:	d036      	beq.n	800b3a6 <_svfiprintf_r+0x1d2>
 800b338:	4b21      	ldr	r3, [pc, #132]	@ (800b3c0 <_svfiprintf_r+0x1ec>)
 800b33a:	bb1b      	cbnz	r3, 800b384 <_svfiprintf_r+0x1b0>
 800b33c:	9b03      	ldr	r3, [sp, #12]
 800b33e:	3307      	adds	r3, #7
 800b340:	f023 0307 	bic.w	r3, r3, #7
 800b344:	3308      	adds	r3, #8
 800b346:	9303      	str	r3, [sp, #12]
 800b348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b34a:	4433      	add	r3, r6
 800b34c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b34e:	e76a      	b.n	800b226 <_svfiprintf_r+0x52>
 800b350:	fb0c 3202 	mla	r2, ip, r2, r3
 800b354:	460c      	mov	r4, r1
 800b356:	2001      	movs	r0, #1
 800b358:	e7a8      	b.n	800b2ac <_svfiprintf_r+0xd8>
 800b35a:	2300      	movs	r3, #0
 800b35c:	3401      	adds	r4, #1
 800b35e:	9305      	str	r3, [sp, #20]
 800b360:	4619      	mov	r1, r3
 800b362:	f04f 0c0a 	mov.w	ip, #10
 800b366:	4620      	mov	r0, r4
 800b368:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b36c:	3a30      	subs	r2, #48	@ 0x30
 800b36e:	2a09      	cmp	r2, #9
 800b370:	d903      	bls.n	800b37a <_svfiprintf_r+0x1a6>
 800b372:	2b00      	cmp	r3, #0
 800b374:	d0c6      	beq.n	800b304 <_svfiprintf_r+0x130>
 800b376:	9105      	str	r1, [sp, #20]
 800b378:	e7c4      	b.n	800b304 <_svfiprintf_r+0x130>
 800b37a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b37e:	4604      	mov	r4, r0
 800b380:	2301      	movs	r3, #1
 800b382:	e7f0      	b.n	800b366 <_svfiprintf_r+0x192>
 800b384:	ab03      	add	r3, sp, #12
 800b386:	9300      	str	r3, [sp, #0]
 800b388:	462a      	mov	r2, r5
 800b38a:	4b0e      	ldr	r3, [pc, #56]	@ (800b3c4 <_svfiprintf_r+0x1f0>)
 800b38c:	a904      	add	r1, sp, #16
 800b38e:	4638      	mov	r0, r7
 800b390:	f7fd fe6c 	bl	800906c <_printf_float>
 800b394:	1c42      	adds	r2, r0, #1
 800b396:	4606      	mov	r6, r0
 800b398:	d1d6      	bne.n	800b348 <_svfiprintf_r+0x174>
 800b39a:	89ab      	ldrh	r3, [r5, #12]
 800b39c:	065b      	lsls	r3, r3, #25
 800b39e:	f53f af2d 	bmi.w	800b1fc <_svfiprintf_r+0x28>
 800b3a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b3a4:	e72c      	b.n	800b200 <_svfiprintf_r+0x2c>
 800b3a6:	ab03      	add	r3, sp, #12
 800b3a8:	9300      	str	r3, [sp, #0]
 800b3aa:	462a      	mov	r2, r5
 800b3ac:	4b05      	ldr	r3, [pc, #20]	@ (800b3c4 <_svfiprintf_r+0x1f0>)
 800b3ae:	a904      	add	r1, sp, #16
 800b3b0:	4638      	mov	r0, r7
 800b3b2:	f7fe f8f3 	bl	800959c <_printf_i>
 800b3b6:	e7ed      	b.n	800b394 <_svfiprintf_r+0x1c0>
 800b3b8:	0800bf10 	.word	0x0800bf10
 800b3bc:	0800bf1a 	.word	0x0800bf1a
 800b3c0:	0800906d 	.word	0x0800906d
 800b3c4:	0800b11d 	.word	0x0800b11d
 800b3c8:	0800bf16 	.word	0x0800bf16

0800b3cc <__sflush_r>:
 800b3cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3d4:	0716      	lsls	r6, r2, #28
 800b3d6:	4605      	mov	r5, r0
 800b3d8:	460c      	mov	r4, r1
 800b3da:	d454      	bmi.n	800b486 <__sflush_r+0xba>
 800b3dc:	684b      	ldr	r3, [r1, #4]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	dc02      	bgt.n	800b3e8 <__sflush_r+0x1c>
 800b3e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	dd48      	ble.n	800b47a <__sflush_r+0xae>
 800b3e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b3ea:	2e00      	cmp	r6, #0
 800b3ec:	d045      	beq.n	800b47a <__sflush_r+0xae>
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b3f4:	682f      	ldr	r7, [r5, #0]
 800b3f6:	6a21      	ldr	r1, [r4, #32]
 800b3f8:	602b      	str	r3, [r5, #0]
 800b3fa:	d030      	beq.n	800b45e <__sflush_r+0x92>
 800b3fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b3fe:	89a3      	ldrh	r3, [r4, #12]
 800b400:	0759      	lsls	r1, r3, #29
 800b402:	d505      	bpl.n	800b410 <__sflush_r+0x44>
 800b404:	6863      	ldr	r3, [r4, #4]
 800b406:	1ad2      	subs	r2, r2, r3
 800b408:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b40a:	b10b      	cbz	r3, 800b410 <__sflush_r+0x44>
 800b40c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b40e:	1ad2      	subs	r2, r2, r3
 800b410:	2300      	movs	r3, #0
 800b412:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b414:	6a21      	ldr	r1, [r4, #32]
 800b416:	4628      	mov	r0, r5
 800b418:	47b0      	blx	r6
 800b41a:	1c43      	adds	r3, r0, #1
 800b41c:	89a3      	ldrh	r3, [r4, #12]
 800b41e:	d106      	bne.n	800b42e <__sflush_r+0x62>
 800b420:	6829      	ldr	r1, [r5, #0]
 800b422:	291d      	cmp	r1, #29
 800b424:	d82b      	bhi.n	800b47e <__sflush_r+0xb2>
 800b426:	4a2a      	ldr	r2, [pc, #168]	@ (800b4d0 <__sflush_r+0x104>)
 800b428:	410a      	asrs	r2, r1
 800b42a:	07d6      	lsls	r6, r2, #31
 800b42c:	d427      	bmi.n	800b47e <__sflush_r+0xb2>
 800b42e:	2200      	movs	r2, #0
 800b430:	6062      	str	r2, [r4, #4]
 800b432:	04d9      	lsls	r1, r3, #19
 800b434:	6922      	ldr	r2, [r4, #16]
 800b436:	6022      	str	r2, [r4, #0]
 800b438:	d504      	bpl.n	800b444 <__sflush_r+0x78>
 800b43a:	1c42      	adds	r2, r0, #1
 800b43c:	d101      	bne.n	800b442 <__sflush_r+0x76>
 800b43e:	682b      	ldr	r3, [r5, #0]
 800b440:	b903      	cbnz	r3, 800b444 <__sflush_r+0x78>
 800b442:	6560      	str	r0, [r4, #84]	@ 0x54
 800b444:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b446:	602f      	str	r7, [r5, #0]
 800b448:	b1b9      	cbz	r1, 800b47a <__sflush_r+0xae>
 800b44a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b44e:	4299      	cmp	r1, r3
 800b450:	d002      	beq.n	800b458 <__sflush_r+0x8c>
 800b452:	4628      	mov	r0, r5
 800b454:	f7ff f9e0 	bl	800a818 <_free_r>
 800b458:	2300      	movs	r3, #0
 800b45a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b45c:	e00d      	b.n	800b47a <__sflush_r+0xae>
 800b45e:	2301      	movs	r3, #1
 800b460:	4628      	mov	r0, r5
 800b462:	47b0      	blx	r6
 800b464:	4602      	mov	r2, r0
 800b466:	1c50      	adds	r0, r2, #1
 800b468:	d1c9      	bne.n	800b3fe <__sflush_r+0x32>
 800b46a:	682b      	ldr	r3, [r5, #0]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d0c6      	beq.n	800b3fe <__sflush_r+0x32>
 800b470:	2b1d      	cmp	r3, #29
 800b472:	d001      	beq.n	800b478 <__sflush_r+0xac>
 800b474:	2b16      	cmp	r3, #22
 800b476:	d11e      	bne.n	800b4b6 <__sflush_r+0xea>
 800b478:	602f      	str	r7, [r5, #0]
 800b47a:	2000      	movs	r0, #0
 800b47c:	e022      	b.n	800b4c4 <__sflush_r+0xf8>
 800b47e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b482:	b21b      	sxth	r3, r3
 800b484:	e01b      	b.n	800b4be <__sflush_r+0xf2>
 800b486:	690f      	ldr	r7, [r1, #16]
 800b488:	2f00      	cmp	r7, #0
 800b48a:	d0f6      	beq.n	800b47a <__sflush_r+0xae>
 800b48c:	0793      	lsls	r3, r2, #30
 800b48e:	680e      	ldr	r6, [r1, #0]
 800b490:	bf08      	it	eq
 800b492:	694b      	ldreq	r3, [r1, #20]
 800b494:	600f      	str	r7, [r1, #0]
 800b496:	bf18      	it	ne
 800b498:	2300      	movne	r3, #0
 800b49a:	eba6 0807 	sub.w	r8, r6, r7
 800b49e:	608b      	str	r3, [r1, #8]
 800b4a0:	f1b8 0f00 	cmp.w	r8, #0
 800b4a4:	dde9      	ble.n	800b47a <__sflush_r+0xae>
 800b4a6:	6a21      	ldr	r1, [r4, #32]
 800b4a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b4aa:	4643      	mov	r3, r8
 800b4ac:	463a      	mov	r2, r7
 800b4ae:	4628      	mov	r0, r5
 800b4b0:	47b0      	blx	r6
 800b4b2:	2800      	cmp	r0, #0
 800b4b4:	dc08      	bgt.n	800b4c8 <__sflush_r+0xfc>
 800b4b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4be:	81a3      	strh	r3, [r4, #12]
 800b4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4c8:	4407      	add	r7, r0
 800b4ca:	eba8 0800 	sub.w	r8, r8, r0
 800b4ce:	e7e7      	b.n	800b4a0 <__sflush_r+0xd4>
 800b4d0:	dfbffffe 	.word	0xdfbffffe

0800b4d4 <_fflush_r>:
 800b4d4:	b538      	push	{r3, r4, r5, lr}
 800b4d6:	690b      	ldr	r3, [r1, #16]
 800b4d8:	4605      	mov	r5, r0
 800b4da:	460c      	mov	r4, r1
 800b4dc:	b913      	cbnz	r3, 800b4e4 <_fflush_r+0x10>
 800b4de:	2500      	movs	r5, #0
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	bd38      	pop	{r3, r4, r5, pc}
 800b4e4:	b118      	cbz	r0, 800b4ee <_fflush_r+0x1a>
 800b4e6:	6a03      	ldr	r3, [r0, #32]
 800b4e8:	b90b      	cbnz	r3, 800b4ee <_fflush_r+0x1a>
 800b4ea:	f7fe fa03 	bl	80098f4 <__sinit>
 800b4ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d0f3      	beq.n	800b4de <_fflush_r+0xa>
 800b4f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b4f8:	07d0      	lsls	r0, r2, #31
 800b4fa:	d404      	bmi.n	800b506 <_fflush_r+0x32>
 800b4fc:	0599      	lsls	r1, r3, #22
 800b4fe:	d402      	bmi.n	800b506 <_fflush_r+0x32>
 800b500:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b502:	f7fe fb0e 	bl	8009b22 <__retarget_lock_acquire_recursive>
 800b506:	4628      	mov	r0, r5
 800b508:	4621      	mov	r1, r4
 800b50a:	f7ff ff5f 	bl	800b3cc <__sflush_r>
 800b50e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b510:	07da      	lsls	r2, r3, #31
 800b512:	4605      	mov	r5, r0
 800b514:	d4e4      	bmi.n	800b4e0 <_fflush_r+0xc>
 800b516:	89a3      	ldrh	r3, [r4, #12]
 800b518:	059b      	lsls	r3, r3, #22
 800b51a:	d4e1      	bmi.n	800b4e0 <_fflush_r+0xc>
 800b51c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b51e:	f7fe fb01 	bl	8009b24 <__retarget_lock_release_recursive>
 800b522:	e7dd      	b.n	800b4e0 <_fflush_r+0xc>

0800b524 <fiprintf>:
 800b524:	b40e      	push	{r1, r2, r3}
 800b526:	b503      	push	{r0, r1, lr}
 800b528:	4601      	mov	r1, r0
 800b52a:	ab03      	add	r3, sp, #12
 800b52c:	4805      	ldr	r0, [pc, #20]	@ (800b544 <fiprintf+0x20>)
 800b52e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b532:	6800      	ldr	r0, [r0, #0]
 800b534:	9301      	str	r3, [sp, #4]
 800b536:	f000 f8c3 	bl	800b6c0 <_vfiprintf_r>
 800b53a:	b002      	add	sp, #8
 800b53c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b540:	b003      	add	sp, #12
 800b542:	4770      	bx	lr
 800b544:	20000030 	.word	0x20000030

0800b548 <memmove>:
 800b548:	4288      	cmp	r0, r1
 800b54a:	b510      	push	{r4, lr}
 800b54c:	eb01 0402 	add.w	r4, r1, r2
 800b550:	d902      	bls.n	800b558 <memmove+0x10>
 800b552:	4284      	cmp	r4, r0
 800b554:	4623      	mov	r3, r4
 800b556:	d807      	bhi.n	800b568 <memmove+0x20>
 800b558:	1e43      	subs	r3, r0, #1
 800b55a:	42a1      	cmp	r1, r4
 800b55c:	d008      	beq.n	800b570 <memmove+0x28>
 800b55e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b562:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b566:	e7f8      	b.n	800b55a <memmove+0x12>
 800b568:	4402      	add	r2, r0
 800b56a:	4601      	mov	r1, r0
 800b56c:	428a      	cmp	r2, r1
 800b56e:	d100      	bne.n	800b572 <memmove+0x2a>
 800b570:	bd10      	pop	{r4, pc}
 800b572:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b576:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b57a:	e7f7      	b.n	800b56c <memmove+0x24>

0800b57c <_sbrk_r>:
 800b57c:	b538      	push	{r3, r4, r5, lr}
 800b57e:	4d06      	ldr	r5, [pc, #24]	@ (800b598 <_sbrk_r+0x1c>)
 800b580:	2300      	movs	r3, #0
 800b582:	4604      	mov	r4, r0
 800b584:	4608      	mov	r0, r1
 800b586:	602b      	str	r3, [r5, #0]
 800b588:	f7f8 fa5e 	bl	8003a48 <_sbrk>
 800b58c:	1c43      	adds	r3, r0, #1
 800b58e:	d102      	bne.n	800b596 <_sbrk_r+0x1a>
 800b590:	682b      	ldr	r3, [r5, #0]
 800b592:	b103      	cbz	r3, 800b596 <_sbrk_r+0x1a>
 800b594:	6023      	str	r3, [r4, #0]
 800b596:	bd38      	pop	{r3, r4, r5, pc}
 800b598:	2000095c 	.word	0x2000095c

0800b59c <abort>:
 800b59c:	b508      	push	{r3, lr}
 800b59e:	2006      	movs	r0, #6
 800b5a0:	f000 fa62 	bl	800ba68 <raise>
 800b5a4:	2001      	movs	r0, #1
 800b5a6:	f7f8 f9d7 	bl	8003958 <_exit>

0800b5aa <_calloc_r>:
 800b5aa:	b570      	push	{r4, r5, r6, lr}
 800b5ac:	fba1 5402 	umull	r5, r4, r1, r2
 800b5b0:	b93c      	cbnz	r4, 800b5c2 <_calloc_r+0x18>
 800b5b2:	4629      	mov	r1, r5
 800b5b4:	f7ff f9a4 	bl	800a900 <_malloc_r>
 800b5b8:	4606      	mov	r6, r0
 800b5ba:	b928      	cbnz	r0, 800b5c8 <_calloc_r+0x1e>
 800b5bc:	2600      	movs	r6, #0
 800b5be:	4630      	mov	r0, r6
 800b5c0:	bd70      	pop	{r4, r5, r6, pc}
 800b5c2:	220c      	movs	r2, #12
 800b5c4:	6002      	str	r2, [r0, #0]
 800b5c6:	e7f9      	b.n	800b5bc <_calloc_r+0x12>
 800b5c8:	462a      	mov	r2, r5
 800b5ca:	4621      	mov	r1, r4
 800b5cc:	f7fe fa2b 	bl	8009a26 <memset>
 800b5d0:	e7f5      	b.n	800b5be <_calloc_r+0x14>

0800b5d2 <__ascii_mbtowc>:
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	b901      	cbnz	r1, 800b5d8 <__ascii_mbtowc+0x6>
 800b5d6:	a901      	add	r1, sp, #4
 800b5d8:	b142      	cbz	r2, 800b5ec <__ascii_mbtowc+0x1a>
 800b5da:	b14b      	cbz	r3, 800b5f0 <__ascii_mbtowc+0x1e>
 800b5dc:	7813      	ldrb	r3, [r2, #0]
 800b5de:	600b      	str	r3, [r1, #0]
 800b5e0:	7812      	ldrb	r2, [r2, #0]
 800b5e2:	1e10      	subs	r0, r2, #0
 800b5e4:	bf18      	it	ne
 800b5e6:	2001      	movne	r0, #1
 800b5e8:	b002      	add	sp, #8
 800b5ea:	4770      	bx	lr
 800b5ec:	4610      	mov	r0, r2
 800b5ee:	e7fb      	b.n	800b5e8 <__ascii_mbtowc+0x16>
 800b5f0:	f06f 0001 	mvn.w	r0, #1
 800b5f4:	e7f8      	b.n	800b5e8 <__ascii_mbtowc+0x16>

0800b5f6 <_realloc_r>:
 800b5f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5fa:	4680      	mov	r8, r0
 800b5fc:	4615      	mov	r5, r2
 800b5fe:	460c      	mov	r4, r1
 800b600:	b921      	cbnz	r1, 800b60c <_realloc_r+0x16>
 800b602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b606:	4611      	mov	r1, r2
 800b608:	f7ff b97a 	b.w	800a900 <_malloc_r>
 800b60c:	b92a      	cbnz	r2, 800b61a <_realloc_r+0x24>
 800b60e:	f7ff f903 	bl	800a818 <_free_r>
 800b612:	2400      	movs	r4, #0
 800b614:	4620      	mov	r0, r4
 800b616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b61a:	f000 fa41 	bl	800baa0 <_malloc_usable_size_r>
 800b61e:	4285      	cmp	r5, r0
 800b620:	4606      	mov	r6, r0
 800b622:	d802      	bhi.n	800b62a <_realloc_r+0x34>
 800b624:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b628:	d8f4      	bhi.n	800b614 <_realloc_r+0x1e>
 800b62a:	4629      	mov	r1, r5
 800b62c:	4640      	mov	r0, r8
 800b62e:	f7ff f967 	bl	800a900 <_malloc_r>
 800b632:	4607      	mov	r7, r0
 800b634:	2800      	cmp	r0, #0
 800b636:	d0ec      	beq.n	800b612 <_realloc_r+0x1c>
 800b638:	42b5      	cmp	r5, r6
 800b63a:	462a      	mov	r2, r5
 800b63c:	4621      	mov	r1, r4
 800b63e:	bf28      	it	cs
 800b640:	4632      	movcs	r2, r6
 800b642:	f7fe fa70 	bl	8009b26 <memcpy>
 800b646:	4621      	mov	r1, r4
 800b648:	4640      	mov	r0, r8
 800b64a:	f7ff f8e5 	bl	800a818 <_free_r>
 800b64e:	463c      	mov	r4, r7
 800b650:	e7e0      	b.n	800b614 <_realloc_r+0x1e>

0800b652 <__ascii_wctomb>:
 800b652:	4603      	mov	r3, r0
 800b654:	4608      	mov	r0, r1
 800b656:	b141      	cbz	r1, 800b66a <__ascii_wctomb+0x18>
 800b658:	2aff      	cmp	r2, #255	@ 0xff
 800b65a:	d904      	bls.n	800b666 <__ascii_wctomb+0x14>
 800b65c:	228a      	movs	r2, #138	@ 0x8a
 800b65e:	601a      	str	r2, [r3, #0]
 800b660:	f04f 30ff 	mov.w	r0, #4294967295
 800b664:	4770      	bx	lr
 800b666:	700a      	strb	r2, [r1, #0]
 800b668:	2001      	movs	r0, #1
 800b66a:	4770      	bx	lr

0800b66c <__sfputc_r>:
 800b66c:	6893      	ldr	r3, [r2, #8]
 800b66e:	3b01      	subs	r3, #1
 800b670:	2b00      	cmp	r3, #0
 800b672:	b410      	push	{r4}
 800b674:	6093      	str	r3, [r2, #8]
 800b676:	da08      	bge.n	800b68a <__sfputc_r+0x1e>
 800b678:	6994      	ldr	r4, [r2, #24]
 800b67a:	42a3      	cmp	r3, r4
 800b67c:	db01      	blt.n	800b682 <__sfputc_r+0x16>
 800b67e:	290a      	cmp	r1, #10
 800b680:	d103      	bne.n	800b68a <__sfputc_r+0x1e>
 800b682:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b686:	f000 b933 	b.w	800b8f0 <__swbuf_r>
 800b68a:	6813      	ldr	r3, [r2, #0]
 800b68c:	1c58      	adds	r0, r3, #1
 800b68e:	6010      	str	r0, [r2, #0]
 800b690:	7019      	strb	r1, [r3, #0]
 800b692:	4608      	mov	r0, r1
 800b694:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b698:	4770      	bx	lr

0800b69a <__sfputs_r>:
 800b69a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b69c:	4606      	mov	r6, r0
 800b69e:	460f      	mov	r7, r1
 800b6a0:	4614      	mov	r4, r2
 800b6a2:	18d5      	adds	r5, r2, r3
 800b6a4:	42ac      	cmp	r4, r5
 800b6a6:	d101      	bne.n	800b6ac <__sfputs_r+0x12>
 800b6a8:	2000      	movs	r0, #0
 800b6aa:	e007      	b.n	800b6bc <__sfputs_r+0x22>
 800b6ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6b0:	463a      	mov	r2, r7
 800b6b2:	4630      	mov	r0, r6
 800b6b4:	f7ff ffda 	bl	800b66c <__sfputc_r>
 800b6b8:	1c43      	adds	r3, r0, #1
 800b6ba:	d1f3      	bne.n	800b6a4 <__sfputs_r+0xa>
 800b6bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b6c0 <_vfiprintf_r>:
 800b6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6c4:	460d      	mov	r5, r1
 800b6c6:	b09d      	sub	sp, #116	@ 0x74
 800b6c8:	4614      	mov	r4, r2
 800b6ca:	4698      	mov	r8, r3
 800b6cc:	4606      	mov	r6, r0
 800b6ce:	b118      	cbz	r0, 800b6d8 <_vfiprintf_r+0x18>
 800b6d0:	6a03      	ldr	r3, [r0, #32]
 800b6d2:	b90b      	cbnz	r3, 800b6d8 <_vfiprintf_r+0x18>
 800b6d4:	f7fe f90e 	bl	80098f4 <__sinit>
 800b6d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b6da:	07d9      	lsls	r1, r3, #31
 800b6dc:	d405      	bmi.n	800b6ea <_vfiprintf_r+0x2a>
 800b6de:	89ab      	ldrh	r3, [r5, #12]
 800b6e0:	059a      	lsls	r2, r3, #22
 800b6e2:	d402      	bmi.n	800b6ea <_vfiprintf_r+0x2a>
 800b6e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b6e6:	f7fe fa1c 	bl	8009b22 <__retarget_lock_acquire_recursive>
 800b6ea:	89ab      	ldrh	r3, [r5, #12]
 800b6ec:	071b      	lsls	r3, r3, #28
 800b6ee:	d501      	bpl.n	800b6f4 <_vfiprintf_r+0x34>
 800b6f0:	692b      	ldr	r3, [r5, #16]
 800b6f2:	b99b      	cbnz	r3, 800b71c <_vfiprintf_r+0x5c>
 800b6f4:	4629      	mov	r1, r5
 800b6f6:	4630      	mov	r0, r6
 800b6f8:	f000 f938 	bl	800b96c <__swsetup_r>
 800b6fc:	b170      	cbz	r0, 800b71c <_vfiprintf_r+0x5c>
 800b6fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b700:	07dc      	lsls	r4, r3, #31
 800b702:	d504      	bpl.n	800b70e <_vfiprintf_r+0x4e>
 800b704:	f04f 30ff 	mov.w	r0, #4294967295
 800b708:	b01d      	add	sp, #116	@ 0x74
 800b70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b70e:	89ab      	ldrh	r3, [r5, #12]
 800b710:	0598      	lsls	r0, r3, #22
 800b712:	d4f7      	bmi.n	800b704 <_vfiprintf_r+0x44>
 800b714:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b716:	f7fe fa05 	bl	8009b24 <__retarget_lock_release_recursive>
 800b71a:	e7f3      	b.n	800b704 <_vfiprintf_r+0x44>
 800b71c:	2300      	movs	r3, #0
 800b71e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b720:	2320      	movs	r3, #32
 800b722:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b726:	f8cd 800c 	str.w	r8, [sp, #12]
 800b72a:	2330      	movs	r3, #48	@ 0x30
 800b72c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b8dc <_vfiprintf_r+0x21c>
 800b730:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b734:	f04f 0901 	mov.w	r9, #1
 800b738:	4623      	mov	r3, r4
 800b73a:	469a      	mov	sl, r3
 800b73c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b740:	b10a      	cbz	r2, 800b746 <_vfiprintf_r+0x86>
 800b742:	2a25      	cmp	r2, #37	@ 0x25
 800b744:	d1f9      	bne.n	800b73a <_vfiprintf_r+0x7a>
 800b746:	ebba 0b04 	subs.w	fp, sl, r4
 800b74a:	d00b      	beq.n	800b764 <_vfiprintf_r+0xa4>
 800b74c:	465b      	mov	r3, fp
 800b74e:	4622      	mov	r2, r4
 800b750:	4629      	mov	r1, r5
 800b752:	4630      	mov	r0, r6
 800b754:	f7ff ffa1 	bl	800b69a <__sfputs_r>
 800b758:	3001      	adds	r0, #1
 800b75a:	f000 80a7 	beq.w	800b8ac <_vfiprintf_r+0x1ec>
 800b75e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b760:	445a      	add	r2, fp
 800b762:	9209      	str	r2, [sp, #36]	@ 0x24
 800b764:	f89a 3000 	ldrb.w	r3, [sl]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	f000 809f 	beq.w	800b8ac <_vfiprintf_r+0x1ec>
 800b76e:	2300      	movs	r3, #0
 800b770:	f04f 32ff 	mov.w	r2, #4294967295
 800b774:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b778:	f10a 0a01 	add.w	sl, sl, #1
 800b77c:	9304      	str	r3, [sp, #16]
 800b77e:	9307      	str	r3, [sp, #28]
 800b780:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b784:	931a      	str	r3, [sp, #104]	@ 0x68
 800b786:	4654      	mov	r4, sl
 800b788:	2205      	movs	r2, #5
 800b78a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b78e:	4853      	ldr	r0, [pc, #332]	@ (800b8dc <_vfiprintf_r+0x21c>)
 800b790:	f7f4 fd1e 	bl	80001d0 <memchr>
 800b794:	9a04      	ldr	r2, [sp, #16]
 800b796:	b9d8      	cbnz	r0, 800b7d0 <_vfiprintf_r+0x110>
 800b798:	06d1      	lsls	r1, r2, #27
 800b79a:	bf44      	itt	mi
 800b79c:	2320      	movmi	r3, #32
 800b79e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7a2:	0713      	lsls	r3, r2, #28
 800b7a4:	bf44      	itt	mi
 800b7a6:	232b      	movmi	r3, #43	@ 0x2b
 800b7a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7ac:	f89a 3000 	ldrb.w	r3, [sl]
 800b7b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7b2:	d015      	beq.n	800b7e0 <_vfiprintf_r+0x120>
 800b7b4:	9a07      	ldr	r2, [sp, #28]
 800b7b6:	4654      	mov	r4, sl
 800b7b8:	2000      	movs	r0, #0
 800b7ba:	f04f 0c0a 	mov.w	ip, #10
 800b7be:	4621      	mov	r1, r4
 800b7c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7c4:	3b30      	subs	r3, #48	@ 0x30
 800b7c6:	2b09      	cmp	r3, #9
 800b7c8:	d94b      	bls.n	800b862 <_vfiprintf_r+0x1a2>
 800b7ca:	b1b0      	cbz	r0, 800b7fa <_vfiprintf_r+0x13a>
 800b7cc:	9207      	str	r2, [sp, #28]
 800b7ce:	e014      	b.n	800b7fa <_vfiprintf_r+0x13a>
 800b7d0:	eba0 0308 	sub.w	r3, r0, r8
 800b7d4:	fa09 f303 	lsl.w	r3, r9, r3
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	9304      	str	r3, [sp, #16]
 800b7dc:	46a2      	mov	sl, r4
 800b7de:	e7d2      	b.n	800b786 <_vfiprintf_r+0xc6>
 800b7e0:	9b03      	ldr	r3, [sp, #12]
 800b7e2:	1d19      	adds	r1, r3, #4
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	9103      	str	r1, [sp, #12]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	bfbb      	ittet	lt
 800b7ec:	425b      	neglt	r3, r3
 800b7ee:	f042 0202 	orrlt.w	r2, r2, #2
 800b7f2:	9307      	strge	r3, [sp, #28]
 800b7f4:	9307      	strlt	r3, [sp, #28]
 800b7f6:	bfb8      	it	lt
 800b7f8:	9204      	strlt	r2, [sp, #16]
 800b7fa:	7823      	ldrb	r3, [r4, #0]
 800b7fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800b7fe:	d10a      	bne.n	800b816 <_vfiprintf_r+0x156>
 800b800:	7863      	ldrb	r3, [r4, #1]
 800b802:	2b2a      	cmp	r3, #42	@ 0x2a
 800b804:	d132      	bne.n	800b86c <_vfiprintf_r+0x1ac>
 800b806:	9b03      	ldr	r3, [sp, #12]
 800b808:	1d1a      	adds	r2, r3, #4
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	9203      	str	r2, [sp, #12]
 800b80e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b812:	3402      	adds	r4, #2
 800b814:	9305      	str	r3, [sp, #20]
 800b816:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b8ec <_vfiprintf_r+0x22c>
 800b81a:	7821      	ldrb	r1, [r4, #0]
 800b81c:	2203      	movs	r2, #3
 800b81e:	4650      	mov	r0, sl
 800b820:	f7f4 fcd6 	bl	80001d0 <memchr>
 800b824:	b138      	cbz	r0, 800b836 <_vfiprintf_r+0x176>
 800b826:	9b04      	ldr	r3, [sp, #16]
 800b828:	eba0 000a 	sub.w	r0, r0, sl
 800b82c:	2240      	movs	r2, #64	@ 0x40
 800b82e:	4082      	lsls	r2, r0
 800b830:	4313      	orrs	r3, r2
 800b832:	3401      	adds	r4, #1
 800b834:	9304      	str	r3, [sp, #16]
 800b836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b83a:	4829      	ldr	r0, [pc, #164]	@ (800b8e0 <_vfiprintf_r+0x220>)
 800b83c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b840:	2206      	movs	r2, #6
 800b842:	f7f4 fcc5 	bl	80001d0 <memchr>
 800b846:	2800      	cmp	r0, #0
 800b848:	d03f      	beq.n	800b8ca <_vfiprintf_r+0x20a>
 800b84a:	4b26      	ldr	r3, [pc, #152]	@ (800b8e4 <_vfiprintf_r+0x224>)
 800b84c:	bb1b      	cbnz	r3, 800b896 <_vfiprintf_r+0x1d6>
 800b84e:	9b03      	ldr	r3, [sp, #12]
 800b850:	3307      	adds	r3, #7
 800b852:	f023 0307 	bic.w	r3, r3, #7
 800b856:	3308      	adds	r3, #8
 800b858:	9303      	str	r3, [sp, #12]
 800b85a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b85c:	443b      	add	r3, r7
 800b85e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b860:	e76a      	b.n	800b738 <_vfiprintf_r+0x78>
 800b862:	fb0c 3202 	mla	r2, ip, r2, r3
 800b866:	460c      	mov	r4, r1
 800b868:	2001      	movs	r0, #1
 800b86a:	e7a8      	b.n	800b7be <_vfiprintf_r+0xfe>
 800b86c:	2300      	movs	r3, #0
 800b86e:	3401      	adds	r4, #1
 800b870:	9305      	str	r3, [sp, #20]
 800b872:	4619      	mov	r1, r3
 800b874:	f04f 0c0a 	mov.w	ip, #10
 800b878:	4620      	mov	r0, r4
 800b87a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b87e:	3a30      	subs	r2, #48	@ 0x30
 800b880:	2a09      	cmp	r2, #9
 800b882:	d903      	bls.n	800b88c <_vfiprintf_r+0x1cc>
 800b884:	2b00      	cmp	r3, #0
 800b886:	d0c6      	beq.n	800b816 <_vfiprintf_r+0x156>
 800b888:	9105      	str	r1, [sp, #20]
 800b88a:	e7c4      	b.n	800b816 <_vfiprintf_r+0x156>
 800b88c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b890:	4604      	mov	r4, r0
 800b892:	2301      	movs	r3, #1
 800b894:	e7f0      	b.n	800b878 <_vfiprintf_r+0x1b8>
 800b896:	ab03      	add	r3, sp, #12
 800b898:	9300      	str	r3, [sp, #0]
 800b89a:	462a      	mov	r2, r5
 800b89c:	4b12      	ldr	r3, [pc, #72]	@ (800b8e8 <_vfiprintf_r+0x228>)
 800b89e:	a904      	add	r1, sp, #16
 800b8a0:	4630      	mov	r0, r6
 800b8a2:	f7fd fbe3 	bl	800906c <_printf_float>
 800b8a6:	4607      	mov	r7, r0
 800b8a8:	1c78      	adds	r0, r7, #1
 800b8aa:	d1d6      	bne.n	800b85a <_vfiprintf_r+0x19a>
 800b8ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8ae:	07d9      	lsls	r1, r3, #31
 800b8b0:	d405      	bmi.n	800b8be <_vfiprintf_r+0x1fe>
 800b8b2:	89ab      	ldrh	r3, [r5, #12]
 800b8b4:	059a      	lsls	r2, r3, #22
 800b8b6:	d402      	bmi.n	800b8be <_vfiprintf_r+0x1fe>
 800b8b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b8ba:	f7fe f933 	bl	8009b24 <__retarget_lock_release_recursive>
 800b8be:	89ab      	ldrh	r3, [r5, #12]
 800b8c0:	065b      	lsls	r3, r3, #25
 800b8c2:	f53f af1f 	bmi.w	800b704 <_vfiprintf_r+0x44>
 800b8c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b8c8:	e71e      	b.n	800b708 <_vfiprintf_r+0x48>
 800b8ca:	ab03      	add	r3, sp, #12
 800b8cc:	9300      	str	r3, [sp, #0]
 800b8ce:	462a      	mov	r2, r5
 800b8d0:	4b05      	ldr	r3, [pc, #20]	@ (800b8e8 <_vfiprintf_r+0x228>)
 800b8d2:	a904      	add	r1, sp, #16
 800b8d4:	4630      	mov	r0, r6
 800b8d6:	f7fd fe61 	bl	800959c <_printf_i>
 800b8da:	e7e4      	b.n	800b8a6 <_vfiprintf_r+0x1e6>
 800b8dc:	0800bf10 	.word	0x0800bf10
 800b8e0:	0800bf1a 	.word	0x0800bf1a
 800b8e4:	0800906d 	.word	0x0800906d
 800b8e8:	0800b69b 	.word	0x0800b69b
 800b8ec:	0800bf16 	.word	0x0800bf16

0800b8f0 <__swbuf_r>:
 800b8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8f2:	460e      	mov	r6, r1
 800b8f4:	4614      	mov	r4, r2
 800b8f6:	4605      	mov	r5, r0
 800b8f8:	b118      	cbz	r0, 800b902 <__swbuf_r+0x12>
 800b8fa:	6a03      	ldr	r3, [r0, #32]
 800b8fc:	b90b      	cbnz	r3, 800b902 <__swbuf_r+0x12>
 800b8fe:	f7fd fff9 	bl	80098f4 <__sinit>
 800b902:	69a3      	ldr	r3, [r4, #24]
 800b904:	60a3      	str	r3, [r4, #8]
 800b906:	89a3      	ldrh	r3, [r4, #12]
 800b908:	071a      	lsls	r2, r3, #28
 800b90a:	d501      	bpl.n	800b910 <__swbuf_r+0x20>
 800b90c:	6923      	ldr	r3, [r4, #16]
 800b90e:	b943      	cbnz	r3, 800b922 <__swbuf_r+0x32>
 800b910:	4621      	mov	r1, r4
 800b912:	4628      	mov	r0, r5
 800b914:	f000 f82a 	bl	800b96c <__swsetup_r>
 800b918:	b118      	cbz	r0, 800b922 <__swbuf_r+0x32>
 800b91a:	f04f 37ff 	mov.w	r7, #4294967295
 800b91e:	4638      	mov	r0, r7
 800b920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b922:	6823      	ldr	r3, [r4, #0]
 800b924:	6922      	ldr	r2, [r4, #16]
 800b926:	1a98      	subs	r0, r3, r2
 800b928:	6963      	ldr	r3, [r4, #20]
 800b92a:	b2f6      	uxtb	r6, r6
 800b92c:	4283      	cmp	r3, r0
 800b92e:	4637      	mov	r7, r6
 800b930:	dc05      	bgt.n	800b93e <__swbuf_r+0x4e>
 800b932:	4621      	mov	r1, r4
 800b934:	4628      	mov	r0, r5
 800b936:	f7ff fdcd 	bl	800b4d4 <_fflush_r>
 800b93a:	2800      	cmp	r0, #0
 800b93c:	d1ed      	bne.n	800b91a <__swbuf_r+0x2a>
 800b93e:	68a3      	ldr	r3, [r4, #8]
 800b940:	3b01      	subs	r3, #1
 800b942:	60a3      	str	r3, [r4, #8]
 800b944:	6823      	ldr	r3, [r4, #0]
 800b946:	1c5a      	adds	r2, r3, #1
 800b948:	6022      	str	r2, [r4, #0]
 800b94a:	701e      	strb	r6, [r3, #0]
 800b94c:	6962      	ldr	r2, [r4, #20]
 800b94e:	1c43      	adds	r3, r0, #1
 800b950:	429a      	cmp	r2, r3
 800b952:	d004      	beq.n	800b95e <__swbuf_r+0x6e>
 800b954:	89a3      	ldrh	r3, [r4, #12]
 800b956:	07db      	lsls	r3, r3, #31
 800b958:	d5e1      	bpl.n	800b91e <__swbuf_r+0x2e>
 800b95a:	2e0a      	cmp	r6, #10
 800b95c:	d1df      	bne.n	800b91e <__swbuf_r+0x2e>
 800b95e:	4621      	mov	r1, r4
 800b960:	4628      	mov	r0, r5
 800b962:	f7ff fdb7 	bl	800b4d4 <_fflush_r>
 800b966:	2800      	cmp	r0, #0
 800b968:	d0d9      	beq.n	800b91e <__swbuf_r+0x2e>
 800b96a:	e7d6      	b.n	800b91a <__swbuf_r+0x2a>

0800b96c <__swsetup_r>:
 800b96c:	b538      	push	{r3, r4, r5, lr}
 800b96e:	4b29      	ldr	r3, [pc, #164]	@ (800ba14 <__swsetup_r+0xa8>)
 800b970:	4605      	mov	r5, r0
 800b972:	6818      	ldr	r0, [r3, #0]
 800b974:	460c      	mov	r4, r1
 800b976:	b118      	cbz	r0, 800b980 <__swsetup_r+0x14>
 800b978:	6a03      	ldr	r3, [r0, #32]
 800b97a:	b90b      	cbnz	r3, 800b980 <__swsetup_r+0x14>
 800b97c:	f7fd ffba 	bl	80098f4 <__sinit>
 800b980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b984:	0719      	lsls	r1, r3, #28
 800b986:	d422      	bmi.n	800b9ce <__swsetup_r+0x62>
 800b988:	06da      	lsls	r2, r3, #27
 800b98a:	d407      	bmi.n	800b99c <__swsetup_r+0x30>
 800b98c:	2209      	movs	r2, #9
 800b98e:	602a      	str	r2, [r5, #0]
 800b990:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b994:	81a3      	strh	r3, [r4, #12]
 800b996:	f04f 30ff 	mov.w	r0, #4294967295
 800b99a:	e033      	b.n	800ba04 <__swsetup_r+0x98>
 800b99c:	0758      	lsls	r0, r3, #29
 800b99e:	d512      	bpl.n	800b9c6 <__swsetup_r+0x5a>
 800b9a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b9a2:	b141      	cbz	r1, 800b9b6 <__swsetup_r+0x4a>
 800b9a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b9a8:	4299      	cmp	r1, r3
 800b9aa:	d002      	beq.n	800b9b2 <__swsetup_r+0x46>
 800b9ac:	4628      	mov	r0, r5
 800b9ae:	f7fe ff33 	bl	800a818 <_free_r>
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b9b6:	89a3      	ldrh	r3, [r4, #12]
 800b9b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b9bc:	81a3      	strh	r3, [r4, #12]
 800b9be:	2300      	movs	r3, #0
 800b9c0:	6063      	str	r3, [r4, #4]
 800b9c2:	6923      	ldr	r3, [r4, #16]
 800b9c4:	6023      	str	r3, [r4, #0]
 800b9c6:	89a3      	ldrh	r3, [r4, #12]
 800b9c8:	f043 0308 	orr.w	r3, r3, #8
 800b9cc:	81a3      	strh	r3, [r4, #12]
 800b9ce:	6923      	ldr	r3, [r4, #16]
 800b9d0:	b94b      	cbnz	r3, 800b9e6 <__swsetup_r+0x7a>
 800b9d2:	89a3      	ldrh	r3, [r4, #12]
 800b9d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b9d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9dc:	d003      	beq.n	800b9e6 <__swsetup_r+0x7a>
 800b9de:	4621      	mov	r1, r4
 800b9e0:	4628      	mov	r0, r5
 800b9e2:	f000 f88b 	bl	800bafc <__smakebuf_r>
 800b9e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9ea:	f013 0201 	ands.w	r2, r3, #1
 800b9ee:	d00a      	beq.n	800ba06 <__swsetup_r+0x9a>
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	60a2      	str	r2, [r4, #8]
 800b9f4:	6962      	ldr	r2, [r4, #20]
 800b9f6:	4252      	negs	r2, r2
 800b9f8:	61a2      	str	r2, [r4, #24]
 800b9fa:	6922      	ldr	r2, [r4, #16]
 800b9fc:	b942      	cbnz	r2, 800ba10 <__swsetup_r+0xa4>
 800b9fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ba02:	d1c5      	bne.n	800b990 <__swsetup_r+0x24>
 800ba04:	bd38      	pop	{r3, r4, r5, pc}
 800ba06:	0799      	lsls	r1, r3, #30
 800ba08:	bf58      	it	pl
 800ba0a:	6962      	ldrpl	r2, [r4, #20]
 800ba0c:	60a2      	str	r2, [r4, #8]
 800ba0e:	e7f4      	b.n	800b9fa <__swsetup_r+0x8e>
 800ba10:	2000      	movs	r0, #0
 800ba12:	e7f7      	b.n	800ba04 <__swsetup_r+0x98>
 800ba14:	20000030 	.word	0x20000030

0800ba18 <_raise_r>:
 800ba18:	291f      	cmp	r1, #31
 800ba1a:	b538      	push	{r3, r4, r5, lr}
 800ba1c:	4605      	mov	r5, r0
 800ba1e:	460c      	mov	r4, r1
 800ba20:	d904      	bls.n	800ba2c <_raise_r+0x14>
 800ba22:	2316      	movs	r3, #22
 800ba24:	6003      	str	r3, [r0, #0]
 800ba26:	f04f 30ff 	mov.w	r0, #4294967295
 800ba2a:	bd38      	pop	{r3, r4, r5, pc}
 800ba2c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ba2e:	b112      	cbz	r2, 800ba36 <_raise_r+0x1e>
 800ba30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba34:	b94b      	cbnz	r3, 800ba4a <_raise_r+0x32>
 800ba36:	4628      	mov	r0, r5
 800ba38:	f000 f830 	bl	800ba9c <_getpid_r>
 800ba3c:	4622      	mov	r2, r4
 800ba3e:	4601      	mov	r1, r0
 800ba40:	4628      	mov	r0, r5
 800ba42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba46:	f000 b817 	b.w	800ba78 <_kill_r>
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d00a      	beq.n	800ba64 <_raise_r+0x4c>
 800ba4e:	1c59      	adds	r1, r3, #1
 800ba50:	d103      	bne.n	800ba5a <_raise_r+0x42>
 800ba52:	2316      	movs	r3, #22
 800ba54:	6003      	str	r3, [r0, #0]
 800ba56:	2001      	movs	r0, #1
 800ba58:	e7e7      	b.n	800ba2a <_raise_r+0x12>
 800ba5a:	2100      	movs	r1, #0
 800ba5c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ba60:	4620      	mov	r0, r4
 800ba62:	4798      	blx	r3
 800ba64:	2000      	movs	r0, #0
 800ba66:	e7e0      	b.n	800ba2a <_raise_r+0x12>

0800ba68 <raise>:
 800ba68:	4b02      	ldr	r3, [pc, #8]	@ (800ba74 <raise+0xc>)
 800ba6a:	4601      	mov	r1, r0
 800ba6c:	6818      	ldr	r0, [r3, #0]
 800ba6e:	f7ff bfd3 	b.w	800ba18 <_raise_r>
 800ba72:	bf00      	nop
 800ba74:	20000030 	.word	0x20000030

0800ba78 <_kill_r>:
 800ba78:	b538      	push	{r3, r4, r5, lr}
 800ba7a:	4d07      	ldr	r5, [pc, #28]	@ (800ba98 <_kill_r+0x20>)
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	4604      	mov	r4, r0
 800ba80:	4608      	mov	r0, r1
 800ba82:	4611      	mov	r1, r2
 800ba84:	602b      	str	r3, [r5, #0]
 800ba86:	f7f7 ff57 	bl	8003938 <_kill>
 800ba8a:	1c43      	adds	r3, r0, #1
 800ba8c:	d102      	bne.n	800ba94 <_kill_r+0x1c>
 800ba8e:	682b      	ldr	r3, [r5, #0]
 800ba90:	b103      	cbz	r3, 800ba94 <_kill_r+0x1c>
 800ba92:	6023      	str	r3, [r4, #0]
 800ba94:	bd38      	pop	{r3, r4, r5, pc}
 800ba96:	bf00      	nop
 800ba98:	2000095c 	.word	0x2000095c

0800ba9c <_getpid_r>:
 800ba9c:	f7f7 bf44 	b.w	8003928 <_getpid>

0800baa0 <_malloc_usable_size_r>:
 800baa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800baa4:	1f18      	subs	r0, r3, #4
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	bfbc      	itt	lt
 800baaa:	580b      	ldrlt	r3, [r1, r0]
 800baac:	18c0      	addlt	r0, r0, r3
 800baae:	4770      	bx	lr

0800bab0 <__swhatbuf_r>:
 800bab0:	b570      	push	{r4, r5, r6, lr}
 800bab2:	460c      	mov	r4, r1
 800bab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bab8:	2900      	cmp	r1, #0
 800baba:	b096      	sub	sp, #88	@ 0x58
 800babc:	4615      	mov	r5, r2
 800babe:	461e      	mov	r6, r3
 800bac0:	da0d      	bge.n	800bade <__swhatbuf_r+0x2e>
 800bac2:	89a3      	ldrh	r3, [r4, #12]
 800bac4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bac8:	f04f 0100 	mov.w	r1, #0
 800bacc:	bf14      	ite	ne
 800bace:	2340      	movne	r3, #64	@ 0x40
 800bad0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bad4:	2000      	movs	r0, #0
 800bad6:	6031      	str	r1, [r6, #0]
 800bad8:	602b      	str	r3, [r5, #0]
 800bada:	b016      	add	sp, #88	@ 0x58
 800badc:	bd70      	pop	{r4, r5, r6, pc}
 800bade:	466a      	mov	r2, sp
 800bae0:	f000 f848 	bl	800bb74 <_fstat_r>
 800bae4:	2800      	cmp	r0, #0
 800bae6:	dbec      	blt.n	800bac2 <__swhatbuf_r+0x12>
 800bae8:	9901      	ldr	r1, [sp, #4]
 800baea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800baee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800baf2:	4259      	negs	r1, r3
 800baf4:	4159      	adcs	r1, r3
 800baf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bafa:	e7eb      	b.n	800bad4 <__swhatbuf_r+0x24>

0800bafc <__smakebuf_r>:
 800bafc:	898b      	ldrh	r3, [r1, #12]
 800bafe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb00:	079d      	lsls	r5, r3, #30
 800bb02:	4606      	mov	r6, r0
 800bb04:	460c      	mov	r4, r1
 800bb06:	d507      	bpl.n	800bb18 <__smakebuf_r+0x1c>
 800bb08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bb0c:	6023      	str	r3, [r4, #0]
 800bb0e:	6123      	str	r3, [r4, #16]
 800bb10:	2301      	movs	r3, #1
 800bb12:	6163      	str	r3, [r4, #20]
 800bb14:	b003      	add	sp, #12
 800bb16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb18:	ab01      	add	r3, sp, #4
 800bb1a:	466a      	mov	r2, sp
 800bb1c:	f7ff ffc8 	bl	800bab0 <__swhatbuf_r>
 800bb20:	9f00      	ldr	r7, [sp, #0]
 800bb22:	4605      	mov	r5, r0
 800bb24:	4639      	mov	r1, r7
 800bb26:	4630      	mov	r0, r6
 800bb28:	f7fe feea 	bl	800a900 <_malloc_r>
 800bb2c:	b948      	cbnz	r0, 800bb42 <__smakebuf_r+0x46>
 800bb2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb32:	059a      	lsls	r2, r3, #22
 800bb34:	d4ee      	bmi.n	800bb14 <__smakebuf_r+0x18>
 800bb36:	f023 0303 	bic.w	r3, r3, #3
 800bb3a:	f043 0302 	orr.w	r3, r3, #2
 800bb3e:	81a3      	strh	r3, [r4, #12]
 800bb40:	e7e2      	b.n	800bb08 <__smakebuf_r+0xc>
 800bb42:	89a3      	ldrh	r3, [r4, #12]
 800bb44:	6020      	str	r0, [r4, #0]
 800bb46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb4a:	81a3      	strh	r3, [r4, #12]
 800bb4c:	9b01      	ldr	r3, [sp, #4]
 800bb4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bb52:	b15b      	cbz	r3, 800bb6c <__smakebuf_r+0x70>
 800bb54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb58:	4630      	mov	r0, r6
 800bb5a:	f000 f81d 	bl	800bb98 <_isatty_r>
 800bb5e:	b128      	cbz	r0, 800bb6c <__smakebuf_r+0x70>
 800bb60:	89a3      	ldrh	r3, [r4, #12]
 800bb62:	f023 0303 	bic.w	r3, r3, #3
 800bb66:	f043 0301 	orr.w	r3, r3, #1
 800bb6a:	81a3      	strh	r3, [r4, #12]
 800bb6c:	89a3      	ldrh	r3, [r4, #12]
 800bb6e:	431d      	orrs	r5, r3
 800bb70:	81a5      	strh	r5, [r4, #12]
 800bb72:	e7cf      	b.n	800bb14 <__smakebuf_r+0x18>

0800bb74 <_fstat_r>:
 800bb74:	b538      	push	{r3, r4, r5, lr}
 800bb76:	4d07      	ldr	r5, [pc, #28]	@ (800bb94 <_fstat_r+0x20>)
 800bb78:	2300      	movs	r3, #0
 800bb7a:	4604      	mov	r4, r0
 800bb7c:	4608      	mov	r0, r1
 800bb7e:	4611      	mov	r1, r2
 800bb80:	602b      	str	r3, [r5, #0]
 800bb82:	f7f7 ff39 	bl	80039f8 <_fstat>
 800bb86:	1c43      	adds	r3, r0, #1
 800bb88:	d102      	bne.n	800bb90 <_fstat_r+0x1c>
 800bb8a:	682b      	ldr	r3, [r5, #0]
 800bb8c:	b103      	cbz	r3, 800bb90 <_fstat_r+0x1c>
 800bb8e:	6023      	str	r3, [r4, #0]
 800bb90:	bd38      	pop	{r3, r4, r5, pc}
 800bb92:	bf00      	nop
 800bb94:	2000095c 	.word	0x2000095c

0800bb98 <_isatty_r>:
 800bb98:	b538      	push	{r3, r4, r5, lr}
 800bb9a:	4d06      	ldr	r5, [pc, #24]	@ (800bbb4 <_isatty_r+0x1c>)
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	4604      	mov	r4, r0
 800bba0:	4608      	mov	r0, r1
 800bba2:	602b      	str	r3, [r5, #0]
 800bba4:	f7f7 ff38 	bl	8003a18 <_isatty>
 800bba8:	1c43      	adds	r3, r0, #1
 800bbaa:	d102      	bne.n	800bbb2 <_isatty_r+0x1a>
 800bbac:	682b      	ldr	r3, [r5, #0]
 800bbae:	b103      	cbz	r3, 800bbb2 <_isatty_r+0x1a>
 800bbb0:	6023      	str	r3, [r4, #0]
 800bbb2:	bd38      	pop	{r3, r4, r5, pc}
 800bbb4:	2000095c 	.word	0x2000095c

0800bbb8 <_init>:
 800bbb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbba:	bf00      	nop
 800bbbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbbe:	bc08      	pop	{r3}
 800bbc0:	469e      	mov	lr, r3
 800bbc2:	4770      	bx	lr

0800bbc4 <_fini>:
 800bbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbc6:	bf00      	nop
 800bbc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbca:	bc08      	pop	{r3}
 800bbcc:	469e      	mov	lr, r3
 800bbce:	4770      	bx	lr
